/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/trpc/[trpc]/route";
exports.ids = ["app/api/trpc/[trpc]/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_Anurag_Singh_Thakur_CascadeProjects_OrationBOT_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/trpc/[trpc]/route.ts */ \"(rsc)/./src/app/api/trpc/[trpc]/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/trpc/[trpc]/route\",\n        pathname: \"/api/trpc/[trpc]\",\n        filename: \"route\",\n        bundlePath: \"app/api/trpc/[trpc]/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\Anurag Singh Thakur\\\\CascadeProjects\\\\OrationBOT\\\\src\\\\app\\\\api\\\\trpc\\\\[trpc]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Anurag_Singh_Thakur_CascadeProjects_OrationBOT_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/trpc/[trpc]/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/trpc/[trpc]/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/trpc/[trpc]/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server/adapters/fetch */ \"(rsc)/./node_modules/@trpc/server/dist/adapters/fetch/index.mjs\");\n/* harmony import */ var _server_routers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../server/routers */ \"(rsc)/./src/server/routers/index.ts\");\n\n\nconst runtime = \"nodejs\";\nconst dynamic = \"force-dynamic\";\nfunction handler(req) {\n    return (0,_trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_1__.fetchRequestHandler)({\n        endpoint: \"/api/trpc\",\n        req,\n        router: _server_routers__WEBPACK_IMPORTED_MODULE_0__.appRouter,\n        createContext: ()=>({}),\n        onError ({ error, path }) {\n            console.error(\"tRPC error:\", {\n                path,\n                message: error.message,\n                code: error.code\n            });\n        }\n    });\n}\nasync function GET(req) {\n    return handler(req);\n}\nasync function POST(req) {\n    try {\n        const clone = req.clone();\n        const bodyText = await clone.text();\n        console.log(\"tRPC POST raw body:\", bodyText);\n    } catch (e) {\n        console.log(\"tRPC POST body read error:\", e);\n    }\n    return handler(req);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBa0U7QUFDWDtBQUVoRCxNQUFNRSxVQUFVLFNBQVM7QUFDekIsTUFBTUMsVUFBVSxnQkFBZ0I7QUFFdkMsU0FBU0MsUUFBUUMsR0FBWTtJQUMzQixPQUFPTCxnRkFBbUJBLENBQUM7UUFDekJNLFVBQVU7UUFDVkQ7UUFDQUUsUUFBUU4sc0RBQVNBO1FBQ2pCTyxlQUFlLElBQU8sRUFBQztRQUN2QkMsU0FBUSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRTtZQUNyQkMsUUFBUUYsS0FBSyxDQUFDLGVBQWU7Z0JBQUVDO2dCQUFNRSxTQUFTSCxNQUFNRyxPQUFPO2dCQUFFQyxNQUFNSixNQUFNSSxJQUFJO1lBQUM7UUFDaEY7SUFDRjtBQUNGO0FBRU8sZUFBZUMsSUFBSVYsR0FBWTtJQUNwQyxPQUFPRCxRQUFRQztBQUNqQjtBQUVPLGVBQWVXLEtBQUtYLEdBQVk7SUFDckMsSUFBSTtRQUNGLE1BQU1ZLFFBQVFaLElBQUlZLEtBQUs7UUFDdkIsTUFBTUMsV0FBVyxNQUFNRCxNQUFNRSxJQUFJO1FBQ2pDUCxRQUFRUSxHQUFHLENBQUMsdUJBQXVCRjtJQUNyQyxFQUFFLE9BQU9HLEdBQUc7UUFDVlQsUUFBUVEsR0FBRyxDQUFDLDhCQUE4QkM7SUFDNUM7SUFDQSxPQUFPakIsUUFBUUM7QUFDakIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQW51cmFnIFNpbmdoIFRoYWt1clxcQ2FzY2FkZVByb2plY3RzXFxPcmF0aW9uQk9UXFxzcmNcXGFwcFxcYXBpXFx0cnBjXFxbdHJwY11cXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZldGNoUmVxdWVzdEhhbmRsZXIgfSBmcm9tIFwiQHRycGMvc2VydmVyL2FkYXB0ZXJzL2ZldGNoXCI7XHJcbmltcG9ydCB7IGFwcFJvdXRlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9zZXJ2ZXIvcm91dGVyc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJ1bnRpbWUgPSBcIm5vZGVqc1wiO1xyXG5leHBvcnQgY29uc3QgZHluYW1pYyA9IFwiZm9yY2UtZHluYW1pY1wiO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlcihyZXE6IFJlcXVlc3QpIHtcclxuICByZXR1cm4gZmV0Y2hSZXF1ZXN0SGFuZGxlcih7XHJcbiAgICBlbmRwb2ludDogXCIvYXBpL3RycGNcIixcclxuICAgIHJlcSxcclxuICAgIHJvdXRlcjogYXBwUm91dGVyLFxyXG4gICAgY3JlYXRlQ29udGV4dDogKCkgPT4gKHt9KSxcclxuICAgIG9uRXJyb3IoeyBlcnJvciwgcGF0aCB9KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJ0UlBDIGVycm9yOlwiLCB7IHBhdGgsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsIGNvZGU6IGVycm9yLmNvZGUgfSk7XHJcbiAgICB9LFxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcTogUmVxdWVzdCkge1xyXG4gIHJldHVybiBoYW5kbGVyKHJlcSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogUmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjbG9uZSA9IHJlcS5jbG9uZSgpO1xyXG4gICAgY29uc3QgYm9keVRleHQgPSBhd2FpdCBjbG9uZS50ZXh0KCk7XHJcbiAgICBjb25zb2xlLmxvZyhcInRSUEMgUE9TVCByYXcgYm9keTpcIiwgYm9keVRleHQpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwidFJQQyBQT1NUIGJvZHkgcmVhZCBlcnJvcjpcIiwgZSk7XHJcbiAgfVxyXG4gIHJldHVybiBoYW5kbGVyKHJlcSk7XHJcbn1cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiZmV0Y2hSZXF1ZXN0SGFuZGxlciIsImFwcFJvdXRlciIsInJ1bnRpbWUiLCJkeW5hbWljIiwiaGFuZGxlciIsInJlcSIsImVuZHBvaW50Iiwicm91dGVyIiwiY3JlYXRlQ29udGV4dCIsIm9uRXJyb3IiLCJlcnJvciIsInBhdGgiLCJjb25zb2xlIiwibWVzc2FnZSIsImNvZGUiLCJHRVQiLCJQT1NUIiwiY2xvbmUiLCJib2R5VGV4dCIsInRleHQiLCJsb2ciLCJlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/trpc/[trpc]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/generated/prisma/index.js":
/*!***************************************!*\
  !*** ./src/generated/prisma/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\n/* eslint-disable */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./src/generated/prisma/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.16.1\n * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43\n */ Prisma.prismaVersion = {\n    client: \"6.16.1\",\n    engine: \"1c57fdcd7e44b29b9313256c76699e91c3ac3c43\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    Serializable: 'Serializable'\n});\nexports.Prisma.UserScalarFieldEnum = {\n    id: 'id',\n    email: 'email',\n    name: 'name',\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n};\nexports.Prisma.ChatSessionScalarFieldEnum = {\n    id: 'id',\n    userId: 'userId',\n    title: 'title',\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n};\nexports.Prisma.MessageScalarFieldEnum = {\n    id: 'id',\n    sessionId: 'sessionId',\n    role: 'role',\n    content: 'content',\n    createdAt: 'createdAt'\n};\nexports.Prisma.SortOrder = {\n    asc: 'asc',\n    desc: 'desc'\n};\nexports.Prisma.NullsOrder = {\n    first: 'first',\n    last: 'last'\n};\nexports.MessageRole = exports.$Enums.MessageRole = {\n    user: 'user',\n    assistant: 'assistant',\n    system: 'system'\n};\nexports.Prisma.ModelName = {\n    User: 'User',\n    ChatSession: 'ChatSession',\n    Message: 'Message'\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"C:\\\\Users\\\\Anurag Singh Thakur\\\\CascadeProjects\\\\OrationBOT\\\\src\\\\generated\\\\prisma\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"windows\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"C:\\\\Users\\\\Anurag Singh Thakur\\\\CascadeProjects\\\\OrationBOT\\\\prisma\\\\schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null,\n        \"schemaEnvPath\": \"../../../.env\"\n    },\n    \"relativePath\": \"../../../prisma\",\n    \"clientVersion\": \"6.16.1\",\n    \"engineVersion\": \"1c57fdcd7e44b29b9313256c76699e91c3ac3c43\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"sqlite\",\n    \"postinstall\": false,\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n  output   = \\\"../src/generated/prisma\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"sqlite\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nenum MessageRole {\\n  user\\n  assistant\\n  system\\n}\\n\\nmodel User {\\n  id        String        @id @default(cuid())\\n  email     String?       @unique\\n  name      String?\\n  createdAt DateTime      @default(now())\\n  updatedAt DateTime      @updatedAt\\n  sessions  ChatSession[]\\n}\\n\\nmodel ChatSession {\\n  id        String    @id @default(cuid())\\n  userId    String?\\n  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)\\n  title     String\\n  createdAt DateTime  @default(now())\\n  updatedAt DateTime  @updatedAt\\n  messages  Message[]\\n\\n  @@index([userId, createdAt])\\n  @@index([createdAt])\\n}\\n\\nmodel Message {\\n  id        String      @id @default(cuid())\\n  sessionId String\\n  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\\n  role      MessageRole\\n  content   String\\n  createdAt DateTime    @default(now())\\n\\n  @@index([sessionId, createdAt])\\n}\\n\",\n    \"inlineSchemaHash\": \"d44c6a03791778bfea1c1feb30224f53f1309850dbb5b08d6a0e523b6c9c2503\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {\n    const alternativePaths = [\n        \"src/generated/prisma\",\n        \"generated/prisma\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse(\"{\\\"models\\\":{\\\"User\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"sessions\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"ChatSession\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ChatSessionToUser\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"ChatSession\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"user\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"User\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ChatSessionToUser\\\",\\\"relationFromFields\\\":[\\\"userId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"SetNull\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"title\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"messages\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Message\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ChatSessionToMessage\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"Message\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"sessionId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"session\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"ChatSession\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"ChatSessionToMessage\\\",\\\"relationFromFields\\\":[\\\"sessionId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"role\\\",\\\"kind\\\":\\\"enum\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"MessageRole\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"content\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false}},\\\"enums\\\":{\\\"MessageRole\\\":{\\\"values\\\":[{\\\"name\\\":\\\"user\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"assistant\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"system\\\",\\\"dbName\\\":null}],\\\"dbName\\\":null}},\\\"types\\\":{}}\");\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./src/generated/prisma/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"query_engine-windows.dll.node\");\npath.join(process.cwd(), \"src/generated/prisma/query_engine-windows.dll.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"src/generated/prisma/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/generated/prisma/index.js\n");

/***/ }),

/***/ "(rsc)/./src/generated/prisma/runtime/library.js":
/*!*************************************************!*\
  !*** ./src/generated/prisma/runtime/library.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\n/* eslint-disable */ \nvar yu = Object.create;\nvar jt = Object.defineProperty;\nvar Eu = Object.getOwnPropertyDescriptor;\nvar bu = Object.getOwnPropertyNames;\nvar wu = Object.getPrototypeOf, xu = Object.prototype.hasOwnProperty;\nvar Do = (e, r)=>()=>(e && (r = e(e = 0)), r);\nvar ue = (e, r)=>()=>(r || e((r = {\n            exports: {}\n        }).exports, r), r.exports), tr = (e, r)=>{\n    for(var t in r)jt(e, t, {\n        get: r[t],\n        enumerable: !0\n    });\n}, Oo = (e, r, t, n)=>{\n    if (r && typeof r == \"object\" || typeof r == \"function\") for (let i of bu(r))!xu.call(e, i) && i !== t && jt(e, i, {\n        get: ()=>r[i],\n        enumerable: !(n = Eu(r, i)) || n.enumerable\n    });\n    return e;\n};\nvar O = (e, r, t)=>(t = e != null ? yu(wu(e)) : {}, Oo(r || !e || !e.__esModule ? jt(t, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : t, e)), Pu = (e)=>Oo(jt({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar hi = ue((_g, is)=>{\n    \"use strict\";\n    is.exports = (e, r = process.argv)=>{\n        let t = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = r.indexOf(t + e), i = r.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar as = ue((Ng, ss)=>{\n    \"use strict\";\n    var Fc = __webpack_require__(/*! node:os */ \"node:os\"), os = __webpack_require__(/*! node:tty */ \"node:tty\"), de = hi(), { env: G } = process, Qe;\n    de(\"no-color\") || de(\"no-colors\") || de(\"color=false\") || de(\"color=never\") ? Qe = 0 : (de(\"color\") || de(\"colors\") || de(\"color=true\") || de(\"color=always\")) && (Qe = 1);\n    \"FORCE_COLOR\" in G && (G.FORCE_COLOR === \"true\" ? Qe = 1 : G.FORCE_COLOR === \"false\" ? Qe = 0 : Qe = G.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(G.FORCE_COLOR, 10), 3));\n    function yi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function Ei(e, r) {\n        if (Qe === 0) return 0;\n        if (de(\"color=16m\") || de(\"color=full\") || de(\"color=truecolor\")) return 3;\n        if (de(\"color=256\")) return 2;\n        if (e && !r && Qe === void 0) return 0;\n        let t = Qe || 0;\n        if (G.TERM === \"dumb\") return t;\n        if (process.platform === \"win32\") {\n            let n = Fc.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in G) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in G) || G.CI_NAME === \"codeship\" ? 1 : t;\n        if (\"TEAMCITY_VERSION\" in G) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(G.TEAMCITY_VERSION) ? 1 : 0;\n        if (G.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in G) {\n            let n = parseInt((G.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(G.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(G.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(G.TERM) || \"COLORTERM\" in G ? 1 : t;\n    }\n    function Mc(e) {\n        let r = Ei(e, e && e.isTTY);\n        return yi(r);\n    }\n    ss.exports = {\n        supportsColor: Mc,\n        stdout: yi(Ei(!0, os.isatty(1))),\n        stderr: yi(Ei(!0, os.isatty(2)))\n    };\n});\nvar cs = ue((Lg, us)=>{\n    \"use strict\";\n    var $c = as(), Er = hi();\n    function ls(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let t = /(\\d{1,2})(\\d{2})/.exec(e) || [];\n            return {\n                major: 0,\n                minor: parseInt(t[1], 10),\n                patch: parseInt(t[2], 10)\n            };\n        }\n        let r = (e || \"\").split(\".\").map((t)=>parseInt(t, 10));\n        return {\n            major: r[0],\n            minor: r[1],\n            patch: r[2]\n        };\n    }\n    function bi(e) {\n        let { CI: r, FORCE_HYPERLINK: t, NETLIFY: n, TEAMCITY_VERSION: i, TERM_PROGRAM: o, TERM_PROGRAM_VERSION: s, VTE_VERSION: a, TERM: l } = process.env;\n        if (t) return !(t.length > 0 && parseInt(t, 10) === 0);\n        if (Er(\"no-hyperlink\") || Er(\"no-hyperlinks\") || Er(\"hyperlink=false\") || Er(\"hyperlink=never\")) return !1;\n        if (Er(\"hyperlink=true\") || Er(\"hyperlink=always\") || n) return !0;\n        if (!$c.supportsColor(e) || e && !e.isTTY) return !1;\n        if (\"WT_SESSION\" in process.env) return !0;\n        if (process.platform === \"win32\" || r || i) return !1;\n        if (o) {\n            let u = ls(s || \"\");\n            switch(o){\n                case \"iTerm.app\":\n                    return u.major === 3 ? u.minor >= 1 : u.major > 3;\n                case \"WezTerm\":\n                    return u.major >= 20200620;\n                case \"vscode\":\n                    return u.major > 1 || u.major === 1 && u.minor >= 72;\n                case \"ghostty\":\n                    return !0;\n            }\n        }\n        if (a) {\n            if (a === \"0.50.0\") return !1;\n            let u = ls(a);\n            return u.major > 0 || u.minor >= 50;\n        }\n        switch(l){\n            case \"alacritty\":\n                return !0;\n        }\n        return !1;\n    }\n    us.exports = {\n        supportsHyperlink: bi,\n        stdout: bi(process.stdout),\n        stderr: bi(process.stderr)\n    };\n});\nvar ps = ue((Kg, qc)=>{\n    qc.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.16.1\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.5.0\",\n            empathic: \"2.0.0\",\n            \"escape-string-regexp\": \"5.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-directory\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"7.2.0\",\n            \"strip-indent\": \"4.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"4.0.0\",\n            tmp: \"0.2.3\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/dmmf\": \"workspace:*\",\n            \"@prisma/driver-adapter-utils\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43\",\n            \"@prisma/schema-engine-wasm\": \"6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar Ti = ue((gh, Qc)=>{\n    Qc.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"1c57fdcd7e44b29b9313256c76699e91c3ac3c43\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar on = ue((nn)=>{\n    \"use strict\";\n    Object.defineProperty(nn, \"__esModule\", {\n        value: !0\n    });\n    nn.enginesVersion = void 0;\n    nn.enginesVersion = Ti().prisma.enginesVersion;\n});\nvar hs = ue((Ih, gs)=>{\n    \"use strict\";\n    gs.exports = (e)=>{\n        let r = e.match(/^[ \\t]*(?=\\S)/gm);\n        return r ? r.reduce((t, n)=>Math.min(t, n.length), 1 / 0) : 0;\n    };\n});\nvar Di = ue((kh, bs)=>{\n    \"use strict\";\n    bs.exports = (e, r = 1, t)=>{\n        if (t = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...t\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof r != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof r}\\``);\n        if (typeof t.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof t.indent}\\``);\n        if (r === 0) return e;\n        let n = t.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, t.indent.repeat(r));\n    };\n});\nvar Ps = ue((jh, tp)=>{\n    tp.exports = {\n        name: \"dotenv\",\n        version: \"16.5.0\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        homepage: \"https://github.com/motdotla/dotenv#readme\",\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar As = ue((Bh, _e)=>{\n    \"use strict\";\n    var Fi = __webpack_require__(/*! node:fs */ \"node:fs\"), Mi = __webpack_require__(/*! node:path */ \"node:path\"), np = __webpack_require__(/*! node:os */ \"node:os\"), ip = __webpack_require__(/*! node:crypto */ \"node:crypto\"), op = Ps(), Ts = op.version, sp = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function ap(e) {\n        let r = {}, t = e.toString();\n        t = t.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = sp.exec(t)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), r[i] = o;\n        }\n        return r;\n    }\n    function lp(e) {\n        let r = Rs(e), t = B.configDotenv({\n            path: r\n        });\n        if (!t.parsed) {\n            let s = new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);\n            throw s.code = \"MISSING_DATA\", s;\n        }\n        let n = Ss(e).split(\",\"), i = n.length, o;\n        for(let s = 0; s < i; s++)try {\n            let a = n[s].trim(), l = cp(t, a);\n            o = B.decrypt(l.ciphertext, l.key);\n            break;\n        } catch (a) {\n            if (s + 1 >= i) throw a;\n        }\n        return B.parse(o);\n    }\n    function up(e) {\n        console.log(`[dotenv@${Ts}][WARN] ${e}`);\n    }\n    function ot(e) {\n        console.log(`[dotenv@${Ts}][DEBUG] ${e}`);\n    }\n    function Ss(e) {\n        return e && e.DOTENV_KEY && e.DOTENV_KEY.length > 0 ? e.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function cp(e, r) {\n        let t;\n        try {\n            t = new URL(r);\n        } catch (a) {\n            if (a.code === \"ERR_INVALID_URL\") {\n                let l = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l.code = \"INVALID_DOTENV_KEY\", l;\n            }\n            throw a;\n        }\n        let n = t.password;\n        if (!n) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let i = t.searchParams.get(\"environment\");\n        if (!i) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let o = `DOTENV_VAULT_${i.toUpperCase()}`, s = e.parsed[o];\n        if (!s) {\n            let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);\n            throw a.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a;\n        }\n        return {\n            ciphertext: s,\n            key: n\n        };\n    }\n    function Rs(e) {\n        let r = null;\n        if (e && e.path && e.path.length > 0) if (Array.isArray(e.path)) for (let t of e.path)Fi.existsSync(t) && (r = t.endsWith(\".vault\") ? t : `${t}.vault`);\n        else r = e.path.endsWith(\".vault\") ? e.path : `${e.path}.vault`;\n        else r = Mi.resolve(process.cwd(), \".env.vault\");\n        return Fi.existsSync(r) ? r : null;\n    }\n    function vs(e) {\n        return e[0] === \"~\" ? Mi.join(np.homedir(), e.slice(1)) : e;\n    }\n    function pp(e) {\n        !!(e && e.debug) && ot(\"Loading env from encrypted .env.vault\");\n        let t = B._parseVault(e), n = process.env;\n        return e && e.processEnv != null && (n = e.processEnv), B.populate(n, t, e), {\n            parsed: t\n        };\n    }\n    function dp(e) {\n        let r = Mi.resolve(process.cwd(), \".env\"), t = \"utf8\", n = !!(e && e.debug);\n        e && e.encoding ? t = e.encoding : n && ot(\"No encoding is specified. UTF-8 is used by default\");\n        let i = [\n            r\n        ];\n        if (e && e.path) if (!Array.isArray(e.path)) i = [\n            vs(e.path)\n        ];\n        else {\n            i = [];\n            for (let l of e.path)i.push(vs(l));\n        }\n        let o, s = {};\n        for (let l of i)try {\n            let u = B.parse(Fi.readFileSync(l, {\n                encoding: t\n            }));\n            B.populate(s, u, e);\n        } catch (u) {\n            n && ot(`Failed to load ${l} ${u.message}`), o = u;\n        }\n        let a = process.env;\n        return e && e.processEnv != null && (a = e.processEnv), B.populate(a, s, e), o ? {\n            parsed: s,\n            error: o\n        } : {\n            parsed: s\n        };\n    }\n    function mp(e) {\n        if (Ss(e).length === 0) return B.configDotenv(e);\n        let r = Rs(e);\n        return r ? B._configVault(e) : (up(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`), B.configDotenv(e));\n    }\n    function fp(e, r) {\n        let t = Buffer.from(r.slice(-64), \"hex\"), n = Buffer.from(e, \"base64\"), i = n.subarray(0, 12), o = n.subarray(-16);\n        n = n.subarray(12, -16);\n        try {\n            let s = ip.createDecipheriv(\"aes-256-gcm\", t, i);\n            return s.setAuthTag(o), `${s.update(n)}${s.final()}`;\n        } catch (s) {\n            let a = s instanceof RangeError, l = s.message === \"Invalid key length\", u = s.message === \"Unsupported state or unable to authenticate data\";\n            if (a || l) {\n                let c = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c.code = \"INVALID_DOTENV_KEY\", c;\n            } else if (u) {\n                let c = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c.code = \"DECRYPTION_FAILED\", c;\n            } else throw s;\n        }\n    }\n    function gp(e, r, t = {}) {\n        let n = !!(t && t.debug), i = !!(t && t.override);\n        if (typeof r != \"object\") {\n            let o = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o.code = \"OBJECT_REQUIRED\", o;\n        }\n        for (let o of Object.keys(r))Object.prototype.hasOwnProperty.call(e, o) ? (i === !0 && (e[o] = r[o]), n && ot(i === !0 ? `\"${o}\" is already defined and WAS overwritten` : `\"${o}\" is already defined and was NOT overwritten`)) : e[o] = r[o];\n    }\n    var B = {\n        configDotenv: dp,\n        _configVault: pp,\n        _parseVault: lp,\n        config: mp,\n        decrypt: fp,\n        parse: ap,\n        populate: gp\n    };\n    _e.exports.configDotenv = B.configDotenv;\n    _e.exports._configVault = B._configVault;\n    _e.exports._parseVault = B._parseVault;\n    _e.exports.config = B.config;\n    _e.exports.decrypt = B.decrypt;\n    _e.exports.parse = B.parse;\n    _e.exports.populate = B.populate;\n    _e.exports = B;\n});\nvar Os = ue((Kh, cn)=>{\n    \"use strict\";\n    cn.exports = (e = {})=>{\n        let r;\n        if (e.repoUrl) r = e.repoUrl;\n        else if (e.user && e.repo) r = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let t = new URL(`${r}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                t.searchParams.set(i, o);\n            }\n        }\n        return t.toString();\n    };\n    cn.exports.default = cn.exports;\n});\nvar Ki = ue((PE, ea)=>{\n    \"use strict\";\n    ea.exports = function() {\n        function e(r, t, n, i, o) {\n            return r < t || n < t ? r > n ? n + 1 : r + 1 : i === o ? t : t + 1;\n        }\n        return function(r, t) {\n            if (r === t) return 0;\n            if (r.length > t.length) {\n                var n = r;\n                r = t, t = n;\n            }\n            for(var i = r.length, o = t.length; i > 0 && r.charCodeAt(i - 1) === t.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && r.charCodeAt(s) === t.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, h, g, I, T, S, E, D = [];\n            for(l = 0; l < i; l++)D.push(l + 1), D.push(r.charCodeAt(s + l));\n            for(var me = D.length - 1; a < o - 3;)for(I = t.charCodeAt(s + (u = a)), T = t.charCodeAt(s + (c = a + 1)), S = t.charCodeAt(s + (p = a + 2)), E = t.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2)h = D[l], g = D[l + 1], u = e(h, u, c, I, g), c = e(u, c, p, T, g), p = e(c, p, d, S, g), f = e(p, d, f, E, g), D[l] = f, d = p, p = c, c = u, u = h;\n            for(; a < o;)for(I = t.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2)h = D[l], D[l] = f = e(h, u, f, I, D[l + 1]), u = h;\n            return f;\n        };\n    }();\n});\nvar oa = Do(()=>{\n    \"use strict\";\n});\nvar sa = Do(()=>{\n    \"use strict\";\n});\nvar jf = {};\ntr(jf, {\n    DMMF: ()=>ct,\n    Debug: ()=>N,\n    Decimal: ()=>Fe,\n    Extensions: ()=>ni,\n    MetricsClient: ()=>Lr,\n    PrismaClientInitializationError: ()=>v,\n    PrismaClientKnownRequestError: ()=>z,\n    PrismaClientRustPanicError: ()=>ae,\n    PrismaClientUnknownRequestError: ()=>V,\n    PrismaClientValidationError: ()=>Z,\n    Public: ()=>ii,\n    Sql: ()=>ie,\n    createParam: ()=>Pa,\n    defineDmmfProperty: ()=>Ca,\n    deserializeJsonResponse: ()=>Vr,\n    deserializeRawResult: ()=>Xn,\n    dmmfToRuntimeDataModel: ()=>Ns,\n    empty: ()=>Oa,\n    getPrismaClient: ()=>fu,\n    getRuntime: ()=>Kn,\n    join: ()=>Da,\n    makeStrictEnum: ()=>gu,\n    makeTypedQueryFactory: ()=>Ia,\n    objectEnumValues: ()=>On,\n    raw: ()=>no,\n    serializeJsonQuery: ()=>$n,\n    skip: ()=>Mn,\n    sqltag: ()=>io,\n    warnEnvConflicts: ()=>hu,\n    warnOnce: ()=>at\n});\nmodule.exports = Pu(jf);\nvar ni = {};\ntr(ni, {\n    defineExtension: ()=>ko,\n    getExtensionContext: ()=>_o\n});\nfunction ko(e) {\n    return typeof e == \"function\" ? e : (r)=>r.$extends(e);\n}\nfunction _o(e) {\n    return e;\n}\nvar ii = {};\ntr(ii, {\n    validator: ()=>No\n});\nfunction No(...e) {\n    return (r)=>r;\n}\nvar Bt = {};\ntr(Bt, {\n    $: ()=>qo,\n    bgBlack: ()=>ku,\n    bgBlue: ()=>Fu,\n    bgCyan: ()=>$u,\n    bgGreen: ()=>Nu,\n    bgMagenta: ()=>Mu,\n    bgRed: ()=>_u,\n    bgWhite: ()=>qu,\n    bgYellow: ()=>Lu,\n    black: ()=>Cu,\n    blue: ()=>nr,\n    bold: ()=>W,\n    cyan: ()=>De,\n    dim: ()=>Ce,\n    gray: ()=>Hr,\n    green: ()=>qe,\n    grey: ()=>Ou,\n    hidden: ()=>Ru,\n    inverse: ()=>Su,\n    italic: ()=>Tu,\n    magenta: ()=>Iu,\n    red: ()=>ce,\n    reset: ()=>vu,\n    strikethrough: ()=>Au,\n    underline: ()=>Y,\n    white: ()=>Du,\n    yellow: ()=>Ie\n});\nvar oi, Lo, Fo, Mo, $o = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: oi, NODE_DISABLE_COLORS: Lo, NO_COLOR: Fo, TERM: Mo } = process.env || {}, $o = process.stdout && process.stdout.isTTY);\nvar qo = {\n    enabled: !Lo && Fo == null && Mo !== \"dumb\" && (oi != null && oi !== \"0\" || $o)\n};\nfunction F(e, r) {\n    let t = new RegExp(`\\\\x1b\\\\[${r}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${r}m`;\n    return function(o) {\n        return !qo.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(t, i + n) : o) + i;\n    };\n}\nvar vu = F(0, 0), W = F(1, 22), Ce = F(2, 22), Tu = F(3, 23), Y = F(4, 24), Su = F(7, 27), Ru = F(8, 28), Au = F(9, 29), Cu = F(30, 39), ce = F(31, 39), qe = F(32, 39), Ie = F(33, 39), nr = F(34, 39), Iu = F(35, 39), De = F(36, 39), Du = F(37, 39), Hr = F(90, 39), Ou = F(90, 39), ku = F(40, 49), _u = F(41, 49), Nu = F(42, 49), Lu = F(43, 49), Fu = F(44, 49), Mu = F(45, 49), $u = F(46, 49), qu = F(47, 49);\nvar Vu = 100, Vo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Yr = [], jo = Date.now(), ju = 0, si = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= si.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= si.DEBUG_COLORS ? si.DEBUG_COLORS === \"true\" : !0;\nvar zr = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let r = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), t = r.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = r.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return t && !n;\n    },\n    log: (...e)=>{\n        let [r, t, ...n] = e;\n        (console.warn ?? console.log)(`${r} ${t}`, ...n);\n    },\n    formatters: {}\n};\nfunction Bu(e) {\n    let r = {\n        color: Vo[ju++ % Vo.length],\n        enabled: zr.enabled(e),\n        namespace: e,\n        log: zr.log,\n        extend: ()=>{}\n    }, t = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = r;\n        if (n.length !== 0 && Yr.push([\n            o,\n            ...n\n        ]), Yr.length > Vu && Yr.shift(), zr.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Uu(c)), u = `+${Date.now() - jo}ms`;\n            jo = Date.now(), globalThis.DEBUG_COLORS ? a(Bt[s](W(o)), ...l, Bt[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(t, {\n        get: (n, i)=>r[i],\n        set: (n, i, o)=>r[i] = o\n    });\n}\nvar N = new Proxy(Bu, {\n    get: (e, r)=>zr[r],\n    set: (e, r, t)=>zr[r] = t\n});\nfunction Uu(e, r = 2) {\n    let t = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (t.has(i)) return \"[Circular *]\";\n            t.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, r);\n}\nfunction Bo(e = 7500) {\n    let r = Yr.map(([t, ...n])=>`${t} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return r.length < e ? r : r.slice(-e);\n}\nfunction Uo() {\n    Yr.length = 0;\n}\nvar gr = N;\nvar Go = O(__webpack_require__(/*! node:fs */ \"node:fs\"));\nfunction ai() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && Go.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar li = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Ut = \"libquery_engine\";\nfunction Gt(e, r) {\n    let t = r === \"url\";\n    return e.includes(\"windows\") ? t ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? t ? `${Ut}.dylib.node` : `${Ut}-${e}.dylib.node` : t ? `${Ut}.so.node` : `${Ut}-${e}.so.node`;\n}\nvar Ko = O(__webpack_require__(/*! node:child_process */ \"node:child_process\")), mi = O(__webpack_require__(/*! node:fs/promises */ \"node:fs/promises\")), Ht = O(__webpack_require__(/*! node:os */ \"node:os\"));\nvar Oe = Symbol.for(\"@ts-pattern/matcher\"), Gu = Symbol.for(\"@ts-pattern/isVariadic\"), Wt = \"@ts-pattern/anonymous-select-key\", ui = (e)=>!!(e && typeof e == \"object\"), Qt = (e)=>e && !!e[Oe], be = (e, r, t)=>{\n    if (Qt(e)) {\n        let n = e[Oe](), { matched: i, selections: o } = n.match(r);\n        return i && o && Object.keys(o).forEach((s)=>t(s, o[s])), i;\n    }\n    if (ui(e)) {\n        if (!ui(r)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(r)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Qt(a) && a[Gu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (r.length < n.length + i.length) return !1;\n                let s = r.slice(0, n.length), a = i.length === 0 ? [] : r.slice(-i.length), l = r.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>be(u, s[c], t)) && i.every((u, c)=>be(u, a[c], t)) && (o.length === 0 || be(o[0], l, t));\n            }\n            return e.length === r.length && e.every((s, a)=>be(s, r[a], t));\n        }\n        return Reflect.ownKeys(e).every((n)=>{\n            let i = e[n];\n            return (n in r || Qt(o = i) && o[Oe]().matcherType === \"optional\") && be(i, r[n], t);\n            var o;\n        });\n    }\n    return Object.is(r, e);\n}, Ge = (e)=>{\n    var r, t, n;\n    return ui(e) ? Qt(e) ? (r = (t = (n = e[Oe]()).getSelectionKeys) == null ? void 0 : t.call(n)) != null ? r : [] : Array.isArray(e) ? Zr(e, Ge) : Zr(Object.values(e), Ge) : [];\n}, Zr = (e, r)=>e.reduce((t, n)=>t.concat(r(n)), []);\nfunction pe(e) {\n    return Object.assign(e, {\n        optional: ()=>Qu(e),\n        and: (r)=>q(e, r),\n        or: (r)=>Wu(e, r),\n        select: (r)=>r === void 0 ? Qo(e) : Qo(r, e)\n    });\n}\nfunction Qu(e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return r === void 0 ? (Ge(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: t\n                    }) : {\n                        matched: be(e, r, n),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction q(...e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>be(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Zr(e, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Wu(...e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return Zr(e, Ge).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>be(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Zr(e, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction A(e) {\n    return {\n        [Oe]: ()=>({\n                match: (r)=>({\n                        matched: !!e(r)\n                    })\n            })\n    };\n}\nfunction Qo(...e) {\n    let r = typeof e[0] == \"string\" ? e[0] : void 0, t = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return pe({\n        [Oe]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [r ?? Wt]: n\n                    };\n                    return {\n                        matched: t === void 0 || be(t, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        r ?? Wt\n                    ].concat(t === void 0 ? [] : Ge(t))\n            })\n    });\n}\nfunction ye(e) {\n    return typeof e == \"number\";\n}\nfunction Ve(e) {\n    return typeof e == \"string\";\n}\nfunction je(e) {\n    return typeof e == \"bigint\";\n}\nvar eg = pe(A(function(e) {\n    return !0;\n}));\nvar Be = (e)=>Object.assign(pe(e), {\n        startsWith: (r)=>{\n            return Be(q(e, (t = r, A((n)=>Ve(n) && n.startsWith(t)))));\n            var t;\n        },\n        endsWith: (r)=>{\n            return Be(q(e, (t = r, A((n)=>Ve(n) && n.endsWith(t)))));\n            var t;\n        },\n        minLength: (r)=>Be(q(e, ((t)=>A((n)=>Ve(n) && n.length >= t))(r))),\n        length: (r)=>Be(q(e, ((t)=>A((n)=>Ve(n) && n.length === t))(r))),\n        maxLength: (r)=>Be(q(e, ((t)=>A((n)=>Ve(n) && n.length <= t))(r))),\n        includes: (r)=>{\n            return Be(q(e, (t = r, A((n)=>Ve(n) && n.includes(t)))));\n            var t;\n        },\n        regex: (r)=>{\n            return Be(q(e, (t = r, A((n)=>Ve(n) && !!n.match(t)))));\n            var t;\n        }\n    }), rg = Be(A(Ve)), Ee = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>Ee(q(e, ((n, i)=>A((o)=>ye(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>Ee(q(e, ((t)=>A((n)=>ye(n) && n < t))(r))),\n        gt: (r)=>Ee(q(e, ((t)=>A((n)=>ye(n) && n > t))(r))),\n        lte: (r)=>Ee(q(e, ((t)=>A((n)=>ye(n) && n <= t))(r))),\n        gte: (r)=>Ee(q(e, ((t)=>A((n)=>ye(n) && n >= t))(r))),\n        int: ()=>Ee(q(e, A((r)=>ye(r) && Number.isInteger(r)))),\n        finite: ()=>Ee(q(e, A((r)=>ye(r) && Number.isFinite(r)))),\n        positive: ()=>Ee(q(e, A((r)=>ye(r) && r > 0))),\n        negative: ()=>Ee(q(e, A((r)=>ye(r) && r < 0)))\n    }), tg = Ee(A(ye)), Ue = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>Ue(q(e, ((n, i)=>A((o)=>je(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>Ue(q(e, ((t)=>A((n)=>je(n) && n < t))(r))),\n        gt: (r)=>Ue(q(e, ((t)=>A((n)=>je(n) && n > t))(r))),\n        lte: (r)=>Ue(q(e, ((t)=>A((n)=>je(n) && n <= t))(r))),\n        gte: (r)=>Ue(q(e, ((t)=>A((n)=>je(n) && n >= t))(r))),\n        positive: ()=>Ue(q(e, A((r)=>je(r) && r > 0))),\n        negative: ()=>Ue(q(e, A((r)=>je(r) && r < 0)))\n    }), ng = Ue(A(je)), ig = pe(A(function(e) {\n    return typeof e == \"boolean\";\n})), og = pe(A(function(e) {\n    return typeof e == \"symbol\";\n})), sg = pe(A(function(e) {\n    return e == null;\n})), ag = pe(A(function(e) {\n    return e != null;\n}));\nvar ci = class extends Error {\n    constructor(r){\n        let t;\n        try {\n            t = JSON.stringify(r);\n        } catch  {\n            t = r;\n        }\n        super(`Pattern matching error: no pattern matches value ${t}`), this.input = void 0, this.input = r;\n    }\n}, pi = {\n    matched: !1,\n    value: void 0\n};\nfunction hr(e) {\n    return new di(e, pi);\n}\nvar di = class e {\n    constructor(r, t){\n        this.input = void 0, this.state = void 0, this.input = r, this.state = t;\n    }\n    with(...r) {\n        if (this.state.matched) return this;\n        let t = r[r.length - 1], n = [\n            r[0]\n        ], i;\n        r.length === 3 && typeof r[1] == \"function\" ? i = r[1] : r.length > 2 && n.push(...r.slice(1, r.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>be(u, this.input, a)) || i && !i(this.input) ? pi : {\n            matched: !0,\n            value: t(o ? Wt in s ? s[Wt] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(r, t) {\n        if (this.state.matched) return this;\n        let n = !!r(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: t(this.input, this.input)\n        } : pi);\n    }\n    otherwise(r) {\n        return this.state.matched ? this.state.value : r(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new ci(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar Ho = __webpack_require__(/*! node:util */ \"node:util\");\nvar Ju = {\n    warn: Ie(\"prisma:warn\")\n}, Ku = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Jt(e, ...r) {\n    Ku.warn() && console.warn(`${Ju.warn} ${e}`, ...r);\n}\nvar Hu = (0, Ho.promisify)(Ko.default.exec), ee = gr(\"prisma:get-platform\"), Yu = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Yo() {\n    let e = Ht.default.platform(), r = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Yt(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: r\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: r\n    };\n    let t = await Zu(), n = await sc(), i = ec({\n        arch: r,\n        archFromUname: n,\n        familyDistro: t.familyDistro\n    }), { libssl: o } = await rc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: r,\n        archFromUname: n,\n        ...t\n    };\n}\nfunction zu(e) {\n    let r = /^ID=\"?([^\"\\n]*)\"?$/im, t = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = r.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = t.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = hr({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return ee(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function Zu() {\n    let e = \"/etc/os-release\";\n    try {\n        let r = await mi.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return zu(r);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction Xu(e) {\n    let r = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (r) {\n        let t = `${r[1]}.x`;\n        return zo(t);\n    }\n}\nfunction Wo(e) {\n    let r = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (r) {\n        let t = `${r[1]}${r[2] ?? \".0\"}.x`;\n        return zo(t);\n    }\n}\nfunction zo(e) {\n    let r = (()=>{\n        if (Xo(e)) return e;\n        let t = e.split(\".\");\n        return t[1] = \"0\", t.join(\".\");\n    })();\n    if (Yu.includes(r)) return r;\n}\nfunction ec(e) {\n    return hr(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(ee('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: r })=>(ee('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${r}-linux-gnu`,\n            `/lib/${r}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ee('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: r, arch: t, archFromUname: n })=>(ee(`Don't know any platform-specific paths for \"${r}\" on ${t} (${n})`), []));\n}\nasync function rc(e) {\n    let r = 'grep -v \"libssl.so.0\"', t = await Jo(e);\n    if (t) {\n        ee(`Found libssl.so file using platform-specific paths: ${t}`);\n        let o = Wo(t);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ee('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Yt(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${r}`);\n    if (n || (n = await Jo([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n) {\n        ee(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = Wo(n);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Yt(\"openssl version -v\");\n    if (i) {\n        ee(`Found openssl binary with version: ${i}`);\n        let o = Xu(i);\n        if (ee(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ee(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Jo(e) {\n    for (let r of e){\n        let t = await tc(r);\n        if (t) return t;\n    }\n}\nasync function tc(e) {\n    try {\n        return (await mi.default.readdir(e)).find((t)=>t.startsWith(\"libssl.so.\") && !t.startsWith(\"libssl.so.0\"));\n    } catch (r) {\n        if (r.code === \"ENOENT\") return;\n        throw r;\n    }\n}\nasync function ir() {\n    let { binaryTarget: e } = await Zo();\n    return e;\n}\nfunction nc(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function fi() {\n    let { memoized: e, ...r } = await Zo();\n    return r;\n}\nvar Kt = {};\nasync function Zo() {\n    if (nc(Kt)) return Promise.resolve({\n        ...Kt,\n        memoized: !0\n    });\n    let e = await Yo(), r = ic(e);\n    return Kt = {\n        ...e,\n        binaryTarget: r\n    }, {\n        ...Kt,\n        memoized: !1\n    };\n}\nfunction ic(e) {\n    let { platform: r, arch: t, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    r === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(t) && Jt(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${t}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (r === \"linux\" && i === void 0) {\n        let c = hr({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Jt(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (r === \"linux\" && o === void 0 && ee(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), r === \"darwin\" && t === \"arm64\") return \"darwin-arm64\";\n    if (r === \"darwin\") return \"darwin\";\n    if (r === \"win32\") return \"windows\";\n    if (r === \"freebsd\") return o;\n    if (r === \"openbsd\") return \"openbsd\";\n    if (r === \"netbsd\") return \"netbsd\";\n    if (r === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (r === \"linux\" && t === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (r === \"linux\" && t === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (r === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || Xo(i) ? c : `${c}-openssl-${i}`;\n    }\n    return r === \"linux\" && o && i ? `${o}-openssl-${i}` : (r !== \"linux\" && Jt(`Prisma detected unknown OS \"${r}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function oc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Yt(e) {\n    return oc(async ()=>{\n        let r = await Hu(e);\n        return ee(`Command \"${e}\" successfully returned \"${r.stdout}\"`), r.stdout;\n    });\n}\nasync function sc() {\n    return typeof Ht.default.machine == \"function\" ? Ht.default.machine() : (await Yt(\"uname -m\"))?.trim();\n}\nfunction Xo(e) {\n    return e.startsWith(\"1.\");\n}\nvar Xt = {};\ntr(Xt, {\n    beep: ()=>kc,\n    clearScreen: ()=>Cc,\n    clearTerminal: ()=>Ic,\n    cursorBackward: ()=>mc,\n    cursorDown: ()=>pc,\n    cursorForward: ()=>dc,\n    cursorGetPosition: ()=>hc,\n    cursorHide: ()=>bc,\n    cursorLeft: ()=>ts,\n    cursorMove: ()=>cc,\n    cursorNextLine: ()=>yc,\n    cursorPrevLine: ()=>Ec,\n    cursorRestorePosition: ()=>gc,\n    cursorSavePosition: ()=>fc,\n    cursorShow: ()=>wc,\n    cursorTo: ()=>uc,\n    cursorUp: ()=>rs,\n    enterAlternativeScreen: ()=>Dc,\n    eraseDown: ()=>Tc,\n    eraseEndLine: ()=>Pc,\n    eraseLine: ()=>ns,\n    eraseLines: ()=>xc,\n    eraseScreen: ()=>gi,\n    eraseStartLine: ()=>vc,\n    eraseUp: ()=>Sc,\n    exitAlternativeScreen: ()=>Oc,\n    iTerm: ()=>Lc,\n    image: ()=>Nc,\n    link: ()=>_c,\n    scrollDown: ()=>Ac,\n    scrollUp: ()=>Rc\n});\nvar Zt = O(__webpack_require__(/*! node:process */ \"node:process\"), 1);\nvar zt = globalThis.window?.document !== void 0, gg = globalThis.process?.versions?.node !== void 0, hg = globalThis.process?.versions?.bun !== void 0, yg = globalThis.Deno?.version?.deno !== void 0, Eg = globalThis.process?.versions?.electron !== void 0, bg = globalThis.navigator?.userAgent?.includes(\"jsdom\") === !0, wg = typeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope, xg = typeof DedicatedWorkerGlobalScope < \"u\" && globalThis instanceof DedicatedWorkerGlobalScope, Pg = typeof SharedWorkerGlobalScope < \"u\" && globalThis instanceof SharedWorkerGlobalScope, vg = typeof ServiceWorkerGlobalScope < \"u\" && globalThis instanceof ServiceWorkerGlobalScope, Xr = globalThis.navigator?.userAgentData?.platform, Tg = Xr === \"macOS\" || globalThis.navigator?.platform === \"MacIntel\" || globalThis.navigator?.userAgent?.includes(\" Mac \") === !0 || globalThis.process?.platform === \"darwin\", Sg = Xr === \"Windows\" || globalThis.navigator?.platform === \"Win32\" || globalThis.process?.platform === \"win32\", Rg = Xr === \"Linux\" || globalThis.navigator?.platform?.startsWith(\"Linux\") === !0 || globalThis.navigator?.userAgent?.includes(\" Linux \") === !0 || globalThis.process?.platform === \"linux\", Ag = Xr === \"iOS\" || globalThis.navigator?.platform === \"MacIntel\" && globalThis.navigator?.maxTouchPoints > 1 || /iPad|iPhone|iPod/.test(globalThis.navigator?.platform), Cg = Xr === \"Android\" || globalThis.navigator?.platform === \"Android\" || globalThis.navigator?.userAgent?.includes(\" Android \") === !0 || globalThis.process?.platform === \"android\";\nvar C = \"\\x1B[\", rt = \"\\x1B]\", yr = \"\\x07\", et = \";\", es = !zt && Zt.default.env.TERM_PROGRAM === \"Apple_Terminal\", ac = !zt && Zt.default.platform === \"win32\", lc = zt ? ()=>{\n    throw new Error(\"`process.cwd()` only works in Node.js, not the browser.\");\n} : Zt.default.cwd, uc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    return typeof r != \"number\" ? C + (e + 1) + \"G\" : C + (r + 1) + et + (e + 1) + \"H\";\n}, cc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    let t = \"\";\n    return e < 0 ? t += C + -e + \"D\" : e > 0 && (t += C + e + \"C\"), r < 0 ? t += C + -r + \"A\" : r > 0 && (t += C + r + \"B\"), t;\n}, rs = (e = 1)=>C + e + \"A\", pc = (e = 1)=>C + e + \"B\", dc = (e = 1)=>C + e + \"C\", mc = (e = 1)=>C + e + \"D\", ts = C + \"G\", fc = es ? \"\\x1B7\" : C + \"s\", gc = es ? \"\\x1B8\" : C + \"u\", hc = C + \"6n\", yc = C + \"E\", Ec = C + \"F\", bc = C + \"?25l\", wc = C + \"?25h\", xc = (e)=>{\n    let r = \"\";\n    for(let t = 0; t < e; t++)r += ns + (t < e - 1 ? rs() : \"\");\n    return e && (r += ts), r;\n}, Pc = C + \"K\", vc = C + \"1K\", ns = C + \"2K\", Tc = C + \"J\", Sc = C + \"1J\", gi = C + \"2J\", Rc = C + \"S\", Ac = C + \"T\", Cc = \"\\x1Bc\", Ic = ac ? `${gi}${C}0f` : `${gi}${C}3J${C}H`, Dc = C + \"?1049h\", Oc = C + \"?1049l\", kc = yr, _c = (e, r)=>[\n        rt,\n        \"8\",\n        et,\n        et,\n        r,\n        yr,\n        e,\n        rt,\n        \"8\",\n        et,\n        et,\n        yr\n    ].join(\"\"), Nc = (e, r = {})=>{\n    let t = `${rt}1337;File=inline=1`;\n    return r.width && (t += `;width=${r.width}`), r.height && (t += `;height=${r.height}`), r.preserveAspectRatio === !1 && (t += \";preserveAspectRatio=0\"), t + \":\" + Buffer.from(e).toString(\"base64\") + yr;\n}, Lc = {\n    setCwd: (e = lc())=>`${rt}50;CurrentDir=${e}${yr}`,\n    annotation (e, r = {}) {\n        let t = `${rt}1337;`, n = r.x !== void 0, i = r.y !== void 0;\n        if ((n || i) && !(n && i && r.length !== void 0)) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        return e = e.replaceAll(\"|\", \"\"), t += r.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", r.length > 0 ? t += (n ? [\n            e,\n            r.length,\n            r.x,\n            r.y\n        ] : [\n            r.length,\n            e\n        ]).join(\"|\") : t += e, t + yr;\n    }\n};\nvar en = O(cs(), 1);\nfunction or(e, r, { target: t = \"stdout\", ...n } = {}) {\n    return en.default[t] ? Xt.link(e, r) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, r) : `${e} (\\u200B${r}\\u200B)`;\n}\nor.isSupported = en.default.stdout;\nor.stderr = (e, r, t = {})=>or(e, r, {\n        target: \"stderr\",\n        ...t\n    });\nor.stderr.isSupported = en.default.stderr;\nfunction wi(e) {\n    return or(e, e, {\n        fallback: Y\n    });\n}\nvar Vc = ps(), xi = Vc.version;\nfunction br(e) {\n    let r = jc();\n    return r || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"client\" ? \"client\" : Bc());\n}\nfunction jc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"client\" ? \"client\" : void 0;\n}\nfunction Bc() {\n    return \"library\";\n}\nfunction Pi(e) {\n    return e.name === \"DriverAdapterError\" && typeof e.cause == \"object\";\n}\nfunction rn(e) {\n    return {\n        ok: !0,\n        value: e,\n        map (r) {\n            return rn(r(e));\n        },\n        flatMap (r) {\n            return r(e);\n        }\n    };\n}\nfunction sr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return sr(e);\n        },\n        flatMap () {\n            return sr(e);\n        }\n    };\n}\nvar ds = N(\"driver-adapter-utils\"), vi = class {\n    consumeError(r) {\n        return this.registeredErrors[r];\n    }\n    registerNewError(r) {\n        let t = 0;\n        for(; this.registeredErrors[t] !== void 0;)t++;\n        return this.registeredErrors[t] = {\n            error: r\n        }, t;\n    }\n    constructor(){\n        this.registeredErrors = [];\n    }\n};\nvar tn = (e, r = new vi)=>{\n    let t = {\n        adapterName: e.adapterName,\n        errorRegistry: r,\n        queryRaw: ke(r, e.queryRaw.bind(e)),\n        executeRaw: ke(r, e.executeRaw.bind(e)),\n        executeScript: ke(r, e.executeScript.bind(e)),\n        dispose: ke(r, e.dispose.bind(e)),\n        provider: e.provider,\n        startTransaction: async (...n)=>(await ke(r, e.startTransaction.bind(e))(...n)).map((o)=>Uc(r, o))\n    };\n    return e.getConnectionInfo && (t.getConnectionInfo = Gc(r, e.getConnectionInfo.bind(e))), t;\n}, Uc = (e, r)=>({\n        adapterName: r.adapterName,\n        provider: r.provider,\n        options: r.options,\n        queryRaw: ke(e, r.queryRaw.bind(r)),\n        executeRaw: ke(e, r.executeRaw.bind(r)),\n        commit: ke(e, r.commit.bind(r)),\n        rollback: ke(e, r.rollback.bind(r))\n    });\nfunction ke(e, r) {\n    return async (...t)=>{\n        try {\n            return rn(await r(...t));\n        } catch (n) {\n            if (ds(\"[error@wrapAsync]\", n), Pi(n)) return sr(n.cause);\n            let i = e.registerNewError(n);\n            return sr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction Gc(e, r) {\n    return (...t)=>{\n        try {\n            return rn(r(...t));\n        } catch (n) {\n            if (ds(\"[error@wrapSync]\", n), Pi(n)) return sr(n.cause);\n            let i = e.registerNewError(n);\n            return sr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar Wc = O(on());\nvar M = O(__webpack_require__(/*! node:path */ \"node:path\")), Jc = O(on()), wh = N(\"prisma:engines\");\nfunction ms() {\n    return M.default.join(__dirname, \"../\");\n}\nvar xh = \"libquery-engine\";\nM.default.join(__dirname, \"../query-engine-darwin\");\nM.default.join(__dirname, \"../query-engine-darwin-arm64\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nM.default.join(__dirname, \"../query-engine-linux-static-x64\");\nM.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nM.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar Si = O(__webpack_require__(/*! node:fs */ \"node:fs\")), fs = gr(\"chmodPlusX\");\nfunction Ri(e) {\n    if (process.platform === \"win32\") return;\n    let r = Si.default.statSync(e), t = r.mode | 64 | 8 | 1;\n    if (r.mode === t) {\n        fs(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = t.toString(8).slice(-3);\n    fs(`Have to call chmodPlusX on ${e}`), Si.default.chmodSync(e, n);\n}\nfunction Ai(e) {\n    let r = e.e, t = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = r.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${wi(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Ce(e.id)}\\`).`, s = hr({\n        message: r.message,\n        code: r.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${t(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${t(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${t(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${r.message}`;\n}\nvar ys = O(hs(), 1);\nfunction Ci(e) {\n    let r = (0, ys.default)(e);\n    if (r === 0) return e;\n    let t = new RegExp(`^[ \\\\t]{${r}}`, \"gm\");\n    return e.replace(t, \"\");\n}\nvar Es = \"prisma+postgres\", sn = `${Es}:`;\nfunction an(e) {\n    return e?.toString().startsWith(`${sn}//`) ?? !1;\n}\nfunction Ii(e) {\n    if (!an(e)) return !1;\n    let { host: r } = new URL(e);\n    return r.includes(\"localhost\") || r.includes(\"127.0.0.1\") || r.includes(\"[::1]\");\n}\nvar ws = O(Di());\nfunction ki(e) {\n    return String(new Oi(e));\n}\nvar Oi = class {\n    constructor(r){\n        this.config = r;\n    }\n    toString() {\n        let { config: r } = this, t = r.provider.fromEnvVar ? `env(\"${r.provider.fromEnvVar}\")` : r.provider.value, n = JSON.parse(JSON.stringify({\n            provider: t,\n            binaryTargets: Kc(r.binaryTargets)\n        }));\n        return `generator ${r.name} {\n${(0, ws.default)(Hc(n), 2)}\n}`;\n    }\n};\nfunction Kc(e) {\n    let r;\n    if (e.length > 0) {\n        let t = e.find((n)=>n.fromEnvVar !== null);\n        t ? r = `env(\"${t.fromEnvVar}\")` : r = e.map((n)=>n.native ? \"native\" : n.value);\n    } else r = void 0;\n    return r;\n}\nfunction Hc(e) {\n    let r = Object.keys(e).reduce((t, n)=>Math.max(t, n.length), 0);\n    return Object.entries(e).map(([t, n])=>`${t.padEnd(r)} = ${Yc(n)}`).join(`\n`);\n}\nfunction Yc(e) {\n    return JSON.parse(JSON.stringify(e, (r, t)=>Array.isArray(t) ? `[${t.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(t)));\n}\nvar nt = {};\ntr(nt, {\n    error: ()=>Xc,\n    info: ()=>Zc,\n    log: ()=>zc,\n    query: ()=>ep,\n    should: ()=>xs,\n    tags: ()=>tt,\n    warn: ()=>_i\n});\nvar tt = {\n    error: ce(\"prisma:error\"),\n    warn: Ie(\"prisma:warn\"),\n    info: De(\"prisma:info\"),\n    query: nr(\"prisma:query\")\n}, xs = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction zc(...e) {\n    console.log(...e);\n}\nfunction _i(e, ...r) {\n    xs.warn() && console.warn(`${tt.warn} ${e}`, ...r);\n}\nfunction Zc(e, ...r) {\n    console.info(`${tt.info} ${e}`, ...r);\n}\nfunction Xc(e, ...r) {\n    console.error(`${tt.error} ${e}`, ...r);\n}\nfunction ep(e, ...r) {\n    console.log(`${tt.query} ${e}`, ...r);\n}\nfunction ln(e, r) {\n    if (!e) throw new Error(`${r}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction ar(e, r) {\n    throw new Error(r);\n}\nfunction Ni({ onlyFirst: e = !1 } = {}) {\n    let t = [\n        \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?(?:\\\\u0007|\\\\u001B\\\\u005C|\\\\u009C))\",\n        \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\"\n    ].join(\"|\");\n    return new RegExp(t, e ? void 0 : \"g\");\n}\nvar rp = Ni();\nfunction wr(e) {\n    if (typeof e != \"string\") throw new TypeError(`Expected a \\`string\\`, got \\`${typeof e}\\``);\n    return e.replace(rp, \"\");\n}\nvar it = O(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Li(e) {\n    return it.default.sep === it.default.posix.sep ? e : e.split(it.default.sep).join(it.default.posix.sep);\n}\nvar qi = O(As()), un = O(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar xr = O(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Cs(e) {\n    let r = e.ignoreProcessEnv ? {} : process.env, t = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(r, p) ? r[p] : e.parsed[p] || \"\", u = t(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(r, n) ? r[n] : e.parsed[n];\n        e.parsed[n] = t(i);\n    }\n    for(let n in e.parsed)r[n] = e.parsed[n];\n    return e;\n}\nvar $i = gr(\"prisma:tryLoadEnv\");\nfunction st({ rootEnvPath: e, schemaEnvPath: r }, t = {\n    conflictCheck: \"none\"\n}) {\n    let n = Is(e);\n    t.conflictCheck !== \"none\" && hp(n, r, t.conflictCheck);\n    let i = null;\n    return Ds(n?.path, r) || (i = Is(r)), !n && !i && $i(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(ce(W(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction hp(e, r, t) {\n    let n = e?.dotenvResult.parsed, i = !Ds(e?.path, r);\n    if (n && r && i && un.default.existsSync(r)) {\n        let o = qi.default.parse(un.default.readFileSync(r)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = xr.default.relative(process.cwd(), e.path), l = xr.default.relative(process.cwd(), r);\n            if (t === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${Y(a)} and ${Y(l)}\nConflicting env vars:\n${s.map((c)=>`  ${W(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${Y(l)} to ${Y(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (t === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>W(c)).join(\", \")} in ${Y(a)} and ${Y(l)}\nEnv vars from ${Y(l)} overwrite the ones from ${Y(a)}\n      `;\n                console.warn(`${Ie(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction Is(e) {\n    if (yp(e)) {\n        $i(`Environment variables loaded from ${e}`);\n        let r = qi.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: Cs(r),\n            message: Ce(`Environment variables loaded from ${xr.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else $i(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction Ds(e, r) {\n    return e && r && xr.default.resolve(e) === xr.default.resolve(r);\n}\nfunction yp(e) {\n    return !!(e && un.default.existsSync(e));\n}\nfunction Vi(e, r) {\n    return Object.prototype.hasOwnProperty.call(e, r);\n}\nfunction pn(e, r) {\n    let t = {};\n    for (let n of Object.keys(e))t[n] = r(e[n], n);\n    return t;\n}\nfunction ji(e, r) {\n    if (e.length === 0) return;\n    let t = e[0];\n    for(let n = 1; n < e.length; n++)r(t, e[n]) < 0 && (t = e[n]);\n    return t;\n}\nfunction x(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar ks = new Set, at = (e, r, ...t)=>{\n    ks.has(e) || (ks.add(e), _i(r, ...t));\n};\nvar v = class e extends Error {\n    constructor(r, t, n){\n        super(r), this.name = \"PrismaClientInitializationError\", this.clientVersion = t, this.errorCode = n, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(v, \"PrismaClientInitializationError\");\nvar z = class extends Error {\n    constructor(r, { code: t, clientVersion: n, meta: i, batchRequestIdx: o }){\n        super(r), this.name = \"PrismaClientKnownRequestError\", this.code = t, this.clientVersion = n, this.meta = i, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(z, \"PrismaClientKnownRequestError\");\nvar ae = class extends Error {\n    constructor(r, t){\n        super(r), this.name = \"PrismaClientRustPanicError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(ae, \"PrismaClientRustPanicError\");\nvar V = class extends Error {\n    constructor(r, { clientVersion: t, batchRequestIdx: n }){\n        super(r), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = t, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(V, \"PrismaClientUnknownRequestError\");\nvar Z = class extends Error {\n    constructor(r, { clientVersion: t }){\n        super(r), this.name = \"PrismaClientValidationError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(Z, \"PrismaClientValidationError\");\nvar we = class {\n    get(r) {\n        return this._map.get(r)?.value;\n    }\n    set(r, t) {\n        this._map.set(r, {\n            value: t\n        });\n    }\n    getOrCreate(r, t) {\n        let n = this._map.get(r);\n        if (n) return n.value;\n        let i = t();\n        return this.set(r, i), i;\n    }\n    constructor(){\n        this._map = new Map;\n    }\n};\nfunction We(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction _s(e, r) {\n    let t = {};\n    for (let n of e){\n        let i = n[r];\n        t[i] = n;\n    }\n    return t;\n}\nfunction lt(e) {\n    let r;\n    return {\n        get () {\n            return r || (r = {\n                value: e()\n            }), r.value;\n        }\n    };\n}\nfunction Ns(e) {\n    return {\n        models: Bi(e.models),\n        enums: Bi(e.enums),\n        types: Bi(e.types)\n    };\n}\nfunction Bi(e) {\n    let r = {};\n    for (let { name: t, ...n } of e)r[t] = n;\n    return r;\n}\nfunction Pr(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction mn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nvar vr = 9e15, Ye = 1e9, Ui = \"0123456789abcdef\", hn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", yn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", Gi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -vr,\n    maxE: vr,\n    crypto: !1\n}, $s, Ne, w = !0, bn = \"[DecimalError] \", He = bn + \"Invalid argument: \", qs = bn + \"Precision limit exceeded\", Vs = bn + \"crypto unavailable\", js = \"[object Decimal]\", X = Math.floor, U = Math.pow, Ep = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, bp = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, wp = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Bs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, fe = 1e7, b = 7, xp = 9007199254740991, Pp = hn.length - 1, Qi = yn.length - 1, m = {\n    toStringTag: js\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), y(e);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, r) {\n    var t, n = this, i = n.constructor;\n    if (e = new i(e), r = new i(r), !e.s || !r.s) return new i(NaN);\n    if (e.gt(r)) throw Error(He + r);\n    return t = n.cmp(e), t < 0 ? e : n.cmp(r) > 0 ? r : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var r, t, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, r = 0, t = n < i ? n : i; r < t; ++r)if (s[r] !== a[r]) return s[r] > a[r] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.d ? t.d[0] ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + b, n.rounding = 1, t = vp(n, Js(n, t)), n.precision = e, n.rounding = r, y(Ne == 2 || Ne == 3 ? t.neg() : t, e, r, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, r, t, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(w = !1, o = c.s * U(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (t = J(c.d), e = c.e, (o = (e - t.length + 1) % 3) && (t += o == 1 || o == -2 ? \"0\" : \"00\"), o = U(t, 1 / 3), e = X((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? t = \"5e\" + e : (t = o.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + e), n = new p(t), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = L(u.plus(c).times(a), u.plus(l), s + 2, 1), J(a.d).slice(0, s) === (t = J(n.d)).slice(0, s)) if (t = t.slice(s - 3, s + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (y(n, e + 1, 1), r = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return w = !0, y(n, e, p.rounding, r);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, r = this.d, t = NaN;\n    if (r) {\n        if (e = r.length - 1, t = (e - X(this.e / b)) * b, e = r[e], e) for(; e % 10 == 0; e /= 10)t--;\n        t < 0 && (t = 0);\n    }\n    return t;\n};\nm.dividedBy = m.div = function(e) {\n    return L(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var r = this, t = r.constructor;\n    return y(L(r, new t(e), 0, 1, 1), t.precision, t.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var r = this.cmp(e);\n    return r == 1 || r === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, r, t, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    t = s.precision, n = s.rounding, s.precision = t + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), r = (1 / xn(4, e)).toString()) : (e = 16, r = \"2.3283064365386962890625e-10\"), o = Tr(s, 1, o.times(r), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return y(o, s.precision = t, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (r = o.precision, t = o.rounding, o.precision = r + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = Tr(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / xn(5, e)), i = Tr(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = r, o.rounding = t, y(i, r, t, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 7, n.rounding = 1, L(t.sinh(), t.cosh(), n.precision = e, n.rounding = r)) : new n(t.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e = this, r = e.constructor, t = e.abs().cmp(1), n = r.precision, i = r.rounding;\n    return t !== -1 ? t === 0 ? e.isNeg() ? xe(r, n, i) : new r(0) : new r(NaN) : e.isZero() ? xe(r, n + 4, i).times(.5) : (r.precision = n + 6, r.rounding = 1, e = new r(1).minus(e).div(e.plus(1)).sqrt().atan(), r.precision = n, r.rounding = i, e.times(2));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, w = !1, t = t.times(t).minus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln()) : new n(t);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, r, t = this, n = t.constructor;\n    return !t.isFinite() || t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, w = !1, t = t.times(t).plus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, r = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, r, !0) : (o.precision = t = n - i.e, i = L(i.plus(1), new o(1).minus(i), t + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = r, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (r = i.abs().cmp(1), t = o.precision, n = o.rounding, r !== -1 ? r === 0 ? (e = xe(o, t + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = t + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = t, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Qi) return s = xe(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Qi) return s = xe(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, t = Math.min(28, a / b + 2 | 0), e = t; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(w = !1, r = Math.ceil(a / b), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[r] !== void 0) for(e = r; s.d[e] === o.d[e] && e--;);\n    return t && (s = s.times(2 << t - 1)), w = !0, y(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && X(this.e / b) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), r = !0;\n    else {\n        if (e = new c(e), t = e.d, e.s < 0 || !t || !t[0] || e.eq(1)) return new c(NaN);\n        r = e.eq(10);\n    }\n    if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1)) return new c(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);\n    if (r) if (t.length > 1) o = !0;\n    else {\n        for(i = t[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (w = !1, a = p + f, s = Ke(u, a), n = r ? En(c, a + 10) : Ke(e, a), l = L(s, n, a, 1), ut(l.d, i = p, d)) do if (a += 10, s = Ke(u, a), n = r ? En(c, a + 10) : Ke(e, a), l = L(s, n, a, 1), !o) {\n        +J(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));\n        break;\n    }\n    while (ut(l.d, i += 10, d));\n    return w = !0, y(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, h = f.constructor;\n    if (e = new h(e), !f.d || !e.d) return !f.s || !e.s ? e = new h(NaN) : f.d ? e.s = -e.s : e = new h(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = h.precision, l = h.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new h(f);\n        else return new h(l === 3 ? -0 : 0);\n        return w ? y(e, a, l) : e;\n    }\n    if (t = X(e.e / b), c = X(f.e / b), u = u.slice(), o = c - t, o) {\n        for(p = o < 0, p ? (r = u, o = -o, s = d.length) : (r = d, t = c, s = u.length), n = Math.max(Math.ceil(a / b), s) + 2, o > n && (o = n, r.length = 1), r.reverse(), n = o; n--;)r.push(0);\n        r.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (r = u, u = d, d = r, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = fe - 1;\n            --u[i], u[n] += fe;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--t;\n    return u[0] ? (e.d = u, e.e = wn(u, t), w ? y(e, a, l) : e) : new h(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var r, t = this, n = t.constructor;\n    return e = new n(e), !t.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || t.d && !t.d[0] ? y(new n(t), n.precision, n.rounding) : (w = !1, n.modulo == 9 ? (r = L(t, e.abs(), 0, 3, 1), r.s *= e.s) : r = L(t, e, 0, n.modulo, 1), r = r.times(e), w = !0, t.minus(r));\n};\nm.naturalExponential = m.exp = function() {\n    return Wi(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Ke(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, y(e);\n};\nm.plus = m.add = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), w ? y(e, a, l) : e;\n    if (o = X(p.e / b), n = X(e.e / b), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (t = u, i = -i, s = c.length) : (t = c, n = o, s = u.length), o = Math.ceil(a / b), s = o > s ? o + 1 : s + 1, i > s && (i = s, t.length = 1), t.reverse(); i--;)t.push(0);\n        t.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, t = c, c = u, u = t), r = 0; i;)r = (u[--i] = u[i] + c[i] + r) / fe | 0, u[i] %= fe;\n    for(r && (u.unshift(r), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = wn(u, n), w ? y(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var r, t = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(He + e);\n    return t.d ? (r = Us(t.d), e && t.e + 1 > r && (r = t.e + 1)) : r = NaN, r;\n};\nm.round = function() {\n    var e = this, r = e.constructor;\n    return y(new r(e), e.e + 1, r.rounding);\n};\nm.sine = m.sin = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + b, n.rounding = 1, t = Sp(n, Js(n, t)), n.precision = e, n.rounding = r, y(Ne > 2 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, r, t, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(w = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (r = J(a), (r.length + l) % 2 == 0 && (r += \"0\"), u = Math.sqrt(r), l = X((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? r = \"5e\" + l : (r = u.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + l), n = new c(r)) : n = new c(u.toString()), t = (l = c.precision) + 3;;)if (o = n, n = o.plus(L(s, o, t + 2, 1)).times(.5), J(o.d).slice(0, t) === (r = J(n.d)).slice(0, t)) if (r = r.slice(t - 3, t + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        t += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (y(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return w = !0, y(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = L(t, new n(1).minus(t.times(t)).sqrt(), e + 10, 0), n.precision = e, n.rounding = r, y(Ne == 2 || Ne == 4 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var r, t, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(t = X(c.e / b) + X(e.e / b), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(r = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + r, o[i--] = a % fe | 0, r = a / fe | 0;\n        o[i] = (o[i] + r) % fe | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return r ? ++t : o.shift(), e.d = o, e.e = wn(o, t), w ? y(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, r) {\n    return Ji(this, 2, e, r);\n};\nm.toDecimalPlaces = m.toDP = function(e, r) {\n    var t = this, n = t.constructor;\n    return t = new n(t), e === void 0 ? t : (ne(e, 0, Ye), r === void 0 ? r = n.rounding : ne(r, 0, 8), y(t, e + t.e + 1, r));\n};\nm.toExponential = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = Pe(n, !0) : (ne(e, 0, Ye), r === void 0 ? r = i.rounding : ne(r, 0, 8), n = y(new i(n), e + 1, r), t = Pe(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toFixed = function(e, r) {\n    var t, n, i = this, o = i.constructor;\n    return e === void 0 ? t = Pe(i) : (ne(e, 0, Ye), r === void 0 ? r = o.rounding : ne(r, 0, 8), n = y(new o(i), e + i.e + 1, r), t = Pe(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + t : t;\n};\nm.toFraction = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, h = f.d, g = f.constructor;\n    if (!h) return new g(f);\n    if (u = t = new g(1), n = l = new g(0), r = new g(n), o = r.e = Us(h) - f.e - 1, s = o % b, r.d[0] = U(10, s < 0 ? b + s : s), e == null) e = o > 0 ? r : u;\n    else {\n        if (a = new g(e), !a.isInt() || a.lt(u)) throw Error(He + a);\n        e = a.gt(r) ? o > 0 ? r : u : a;\n    }\n    for(w = !1, a = new g(J(h)), c = g.precision, g.precision = o = h.length * b * 2; p = L(a, r, 0, 1, 1), i = t.plus(p.times(n)), i.cmp(e) != 1;)t = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = r, r = a.minus(p.times(i)), a = i;\n    return i = L(e.minus(t), n, 0, 1, 1), l = l.plus(i.times(u)), t = t.plus(i.times(n)), l.s = u.s = f.s, d = L(u, n, o, 1).minus(f).abs().cmp(L(l, t, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        t\n    ], g.precision = c, w = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, r) {\n    return Ji(this, 16, e, r);\n};\nm.toNearest = function(e, r) {\n    var t = this, n = t.constructor;\n    if (t = new n(t), e == null) {\n        if (!t.d) return t;\n        e = new n(1), r = n.rounding;\n    } else {\n        if (e = new n(e), r === void 0 ? r = n.rounding : ne(r, 0, 8), !t.d) return e.s ? t : e;\n        if (!e.d) return e.s && (e.s = t.s), e;\n    }\n    return e.d[0] ? (w = !1, t = L(t, e, 0, r, 1).times(e), w = !0, y(t)) : (e.s = t.s, t = e), t;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, r) {\n    return Ji(this, 8, e, r);\n};\nm.toPower = m.pow = function(e) {\n    var r, t, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(U(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);\n    if (r = X(e.e / b), r >= e.d.length - 1 && (t = u < 0 ? -u : u) <= xp) return i = Gs(l, a, t, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);\n    if (s = a.s, s < 0) {\n        if (r < e.d.length - 1) return new l(NaN);\n        if ((e.d[r] & 1) == 0 && (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return t = U(+a, u), r = t == 0 || !isFinite(t) ? X(u * (Math.log(\"0.\" + J(a.d)) / Math.LN10 + a.e + 1)) : new l(t + \"\").e, r > l.maxE + 1 || r < l.minE - 1 ? new l(r > 0 ? s / 0 : 0) : (w = !1, l.rounding = a.s = 1, t = Math.min(12, (r + \"\").length), i = Wi(e.times(Ke(a, n + t)), n), i.d && (i = y(i, n + 5, 1), ut(i.d, n, o) && (r = n + 10, i = y(Wi(e.times(Ke(a, r + t)), r), r + 5, 1), +J(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, w = !0, l.rounding = o, y(i, n, o));\n};\nm.toPrecision = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = Pe(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ne(e, 1, Ye), r === void 0 ? r = i.rounding : ne(r, 0, 8), n = y(new i(n), e, r), t = Pe(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toSignificantDigits = m.toSD = function(e, r) {\n    var t = this, n = t.constructor;\n    return e === void 0 ? (e = n.precision, r = n.rounding) : (ne(e, 1, Ye), r === void 0 ? r = n.rounding : ne(r, 0, 8)), y(new n(t), e, r);\n};\nm.toString = function() {\n    var e = this, r = e.constructor, t = Pe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + t : t;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, r = e.constructor, t = Pe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() ? \"-\" + t : t;\n};\nfunction J(e) {\n    var r, t, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, r = 1; r < i; r++)n = e[r] + \"\", t = b - n.length, t && (o += Je(t)), o += n;\n        s = e[r], n = s + \"\", t = b - n.length, t && (o += Je(t));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ne(e, r, t) {\n    if (e !== ~~e || e < r || e > t) throw Error(He + e);\n}\nfunction ut(e, r, t, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--r;\n    return --r < 0 ? (r += b, i = 0) : (i = Math.ceil((r + 1) / b), r %= b), o = U(10, b - r), a = e[i] % o | 0, n == null ? r < 3 ? (r == 0 ? a = a / 100 | 0 : r == 1 && (a = a / 10 | 0), s = t < 4 && a == 99999 || t > 3 && a == 49999 || a == 5e4 || a == 0) : s = (t < 4 && a + 1 == o || t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == U(10, r - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : r < 4 ? (r == 0 ? a = a / 1e3 | 0 : r == 1 ? a = a / 100 | 0 : r == 2 && (a = a / 10 | 0), s = (n || t < 4) && a == 9999 || !n && t > 3 && a == 4999) : s = ((n || t < 4) && a + 1 == o || !n && t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == U(10, r - 3) - 1, s;\n}\nfunction fn(e, r, t) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= r;\n        for(i[0] += Ui.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > t - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / t | 0, i[n] %= t);\n    }\n    return i.reverse();\n}\nfunction vp(e, r) {\n    var t, n, i;\n    if (r.isZero()) return r;\n    n = r.d.length, n < 32 ? (t = Math.ceil(n / 3), i = (1 / xn(4, t)).toString()) : (t = 16, i = \"2.3283064365386962890625e-10\"), e.precision += t, r = Tr(e, 1, r.times(i), new e(1));\n    for(var o = t; o--;){\n        var s = r.times(r);\n        r = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= t, r;\n}\nvar L = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function r(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function t(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, h, g, I, T, S, E, D, me, se, Kr, j, te, Ae, K, fr, Vt = n.constructor, ti = n.s == i.s ? 1 : -1, H = n.d, k = i.d;\n        if (!H || !H[0] || !k || !k[0]) return new Vt(!n.s || !i.s || (H ? k && H[0] == k[0] : !k) ? NaN : H && H[0] == 0 || !k ? ti * 0 : ti / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = fe, f = b, c = X(n.e / f) - X(i.e / f)), K = k.length, te = H.length, T = new Vt(ti), S = T.d = [], p = 0; k[p] == (H[p] || 0); p++);\n        if (k[p] > (H[p] || 0) && c--, o == null ? (se = o = Vt.precision, s = Vt.rounding) : a ? se = o + (n.e - i.e) + 1 : se = o, se < 0) S.push(1), h = !0;\n        else {\n            if (se = se / f + 2 | 0, p = 0, K == 1) {\n                for(d = 0, k = k[0], se++; (p < te || d) && se--; p++)Kr = d * l + (H[p] || 0), S[p] = Kr / k | 0, d = Kr % k | 0;\n                h = d || p < te;\n            } else {\n                for(d = l / (k[0] + 1) | 0, d > 1 && (k = e(k, d, l), H = e(H, d, l), K = k.length, te = H.length), j = K, E = H.slice(0, K), D = E.length; D < K;)E[D++] = 0;\n                fr = k.slice(), fr.unshift(0), Ae = k[0], k[1] >= l / 2 && ++Ae;\n                do d = 0, u = r(k, E, K, D), u < 0 ? (me = E[0], K != D && (me = me * l + (E[1] || 0)), d = me / Ae | 0, d > 1 ? (d >= l && (d = l - 1), g = e(k, d, l), I = g.length, D = E.length, u = r(g, E, I, D), u == 1 && (d--, t(g, K < I ? fr : k, I, l))) : (d == 0 && (u = d = 1), g = k.slice()), I = g.length, I < D && g.unshift(0), t(E, g, D, l), u == -1 && (D = E.length, u = r(k, E, K, D), u < 1 && (d++, t(E, K < D ? fr : k, D, l))), D = E.length) : u === 0 && (d++, E = [\n                    0\n                ]), S[p++] = d, u && E[0] ? E[D++] = H[j] || 0 : (E = [\n                    H[j]\n                ], D = 1);\n                while ((j++ < te || E[0] !== void 0) && se--);\n                h = E[0] !== void 0;\n            }\n            S[0] || S.shift();\n        }\n        if (f == 1) T.e = c, $s = h;\n        else {\n            for(p = 1, d = S[0]; d >= 10; d /= 10)p++;\n            T.e = p + c * f - 1, y(T, a ? o + T.e + 1 : o, s, h);\n        }\n        return T;\n    };\n}();\nfunction y(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (r != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = r - i, o < 0) o += b, s = r, c = p[d = 0], l = c / U(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / b), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= b, s = o - b + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= b, s = o - b + i, l = s < 0 ? 0 : c / U(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || r < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % U(10, i - s - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && (o > 0 ? s > 0 ? c / U(10, i - s) : 0 : p[d - 1]) % 10 & 1 || t == (e.s < 0 ? 8 : 7)), r < 1 || !p[0]) return p.length = 0, u ? (r -= e.e + 1, p[0] = U(10, (b - r % b) % b), e.e = -r || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = U(10, b - o), p[d] = s > 0 ? (c / U(10, i - s) % U(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == fe && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != fe) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return w && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction Pe(e, r, t) {\n    if (!e.isFinite()) return Ws(e);\n    var n, i = e.e, o = J(e.d), s = o.length;\n    return r ? (t && (n = t - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + Je(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + Je(-i - 1) + o, t && (n = t - s) > 0 && (o += Je(n))) : i >= s ? (o += Je(i + 1 - s), t && (n = t - i - 1) > 0 && (o = o + \".\" + Je(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), t && (n = t - s) > 0 && (i + 1 === s && (o += \".\"), o += Je(n))), o;\n}\nfunction wn(e, r) {\n    var t = e[0];\n    for(r *= b; t >= 10; t /= 10)r++;\n    return r;\n}\nfunction En(e, r, t) {\n    if (r > Pp) throw w = !0, t && (e.precision = t), Error(qs);\n    return y(new e(hn), r, 1, !0);\n}\nfunction xe(e, r, t) {\n    if (r > Qi) throw Error(qs);\n    return y(new e(yn), r, t, !0);\n}\nfunction Us(e) {\n    var r = e.length - 1, t = r * b + 1;\n    if (r = e[r], r) {\n        for(; r % 10 == 0; r /= 10)t--;\n        for(r = e[0]; r >= 10; r /= 10)t++;\n    }\n    return t;\n}\nfunction Je(e) {\n    for(var r = \"\"; e--;)r += \"0\";\n    return r;\n}\nfunction Gs(e, r, t, n) {\n    var i, o = new e(1), s = Math.ceil(n / b + 4);\n    for(w = !1;;){\n        if (t % 2 && (o = o.times(r), Fs(o.d, s) && (i = !0)), t = X(t / 2), t === 0) {\n            t = o.d.length - 1, i && o.d[t] === 0 && ++o.d[t];\n            break;\n        }\n        r = r.times(r), Fs(r.d, s);\n    }\n    return w = !0, o;\n}\nfunction Ls(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction Qs(e, r, t) {\n    for(var n, i, o = new e(r[0]), s = 0; ++s < r.length;){\n        if (i = new e(r[s]), !i.s) {\n            o = i;\n            break;\n        }\n        n = o.cmp(i), (n === t || n === 0 && o.s === t) && (o = i);\n    }\n    return o;\n}\nfunction Wi(e, r) {\n    var t, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, h = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(r == null ? (w = !1, l = h) : l = r, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(U(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, t = o = s = new d(1), d.precision = l;;){\n        if (o = y(o.times(e), l, 1), t = t.times(++c), a = s.plus(L(o, t, l, 1)), J(a.d).slice(0, l) === J(s.d).slice(0, l)) {\n            for(i = p; i--;)s = y(s.times(s), l, 1);\n            if (r == null) if (u < 3 && ut(s.d, l - n, f, u)) d.precision = l += 10, t = o = a = new d(1), c = 0, u++;\n            else return y(s, d.precision = h, f, w = !0);\n            else return d.precision = h, s;\n        }\n        s = a;\n    }\n}\nfunction Ke(e, r) {\n    var t, n, i, o, s, a, l, u, c, p, d, f = 1, h = 10, g = e, I = g.d, T = g.constructor, S = T.rounding, E = T.precision;\n    if (g.s < 0 || !I || !I[0] || !g.e && I[0] == 1 && I.length == 1) return new T(I && !I[0] ? -1 / 0 : g.s != 1 ? NaN : I ? 0 : g);\n    if (r == null ? (w = !1, c = E) : c = r, T.precision = c += h, t = J(I), n = t.charAt(0), Math.abs(o = g.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3;)g = g.times(e), t = J(g.d), n = t.charAt(0), f++;\n        o = g.e, n > 1 ? (g = new T(\"0.\" + t), o++) : g = new T(n + \".\" + t.slice(1));\n    } else return u = En(T, c + 2, E).times(o + \"\"), g = Ke(new T(n + \".\" + t.slice(1)), c - h).plus(u), T.precision = E, r == null ? y(g, E, S, w = !0) : g;\n    for(p = g, l = s = g = L(g.minus(1), g.plus(1), c, 1), d = y(g.times(g), c, 1), i = 3;;){\n        if (s = y(s.times(d), c, 1), u = l.plus(L(s, new T(i), c, 1)), J(u.d).slice(0, c) === J(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(En(T, c + 2, E).times(o + \"\"))), l = L(l, new T(f), c, 1), r == null) if (ut(l.d, c - h, S, a)) T.precision = c += h, u = s = g = L(p.minus(1), p.plus(1), c, 1), d = y(g.times(g), c, 1), i = a = 1;\n        else return y(l, T.precision = E, S, w = !0);\n        else return T.precision = E, l;\n        l = u, i += 2;\n    }\n}\nfunction Ws(e) {\n    return String(e.s * e.s / 0);\n}\nfunction gn(e, r) {\n    var t, n, i;\n    for((t = r.indexOf(\".\")) > -1 && (r = r.replace(\".\", \"\")), (n = r.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +r.slice(n + 1), r = r.substring(0, n)) : t < 0 && (t = r.length), n = 0; r.charCodeAt(n) === 48; n++);\n    for(i = r.length; r.charCodeAt(i - 1) === 48; --i);\n    if (r = r.slice(n, i), r) {\n        if (i -= n, e.e = t = t - n - 1, e.d = [], n = (t + 1) % b, t < 0 && (n += b), n < i) {\n            for(n && e.d.push(+r.slice(0, n)), i -= b; n < i;)e.d.push(+r.slice(n, n += b));\n            r = r.slice(n), n = b - r.length;\n        } else n -= i;\n        for(; n--;)r += \"0\";\n        e.d.push(+r), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Tp(e, r) {\n    var t, n, i, o, s, a, l, u, c;\n    if (r.indexOf(\"_\") > -1) {\n        if (r = r.replace(/(\\d)_(?=\\d)/g, \"$1\"), Bs.test(r)) return gn(e, r);\n    } else if (r === \"Infinity\" || r === \"NaN\") return +r || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (bp.test(r)) t = 16, r = r.toLowerCase();\n    else if (Ep.test(r)) t = 2;\n    else if (wp.test(r)) t = 8;\n    else throw Error(He + r);\n    for(o = r.search(/p/i), o > 0 ? (l = +r.slice(o + 1), r = r.substring(2, o)) : r = r.slice(2), o = r.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (r = r.replace(\".\", \"\"), a = r.length, o = a - o, i = Gs(n, new n(t), o, o * 2)), u = fn(r, t, fe), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = wn(u, c), e.d = u, w = !1, s && (e = L(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? U(2, l) : Le.pow(2, l))), w = !0, e);\n}\nfunction Sp(e, r) {\n    var t, n = r.d.length;\n    if (n < 3) return r.isZero() ? r : Tr(e, 2, r, r);\n    t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, r = r.times(1 / xn(5, t)), r = Tr(e, 2, r, r);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); t--;)i = r.times(r), r = r.times(o.plus(i.times(s.times(i).minus(a))));\n    return r;\n}\nfunction Tr(e, r, t, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / b);\n    for(w = !1, l = t.times(t), a = new e(n);;){\n        if (s = L(a.times(l), new e(r++ * r++), c, 1), a = i ? n.plus(s) : n.minus(s), n = L(s.times(l), new e(r++ * r++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return w = !0, s.d.length = p + 1, s;\n}\nfunction xn(e, r) {\n    for(var t = e; --r;)t *= e;\n    return t;\n}\nfunction Js(e, r) {\n    var t, n = r.s < 0, i = xe(e, e.precision, 1), o = i.times(.5);\n    if (r = r.abs(), r.lte(o)) return Ne = n ? 4 : 1, r;\n    if (t = r.divToInt(i), t.isZero()) Ne = n ? 3 : 2;\n    else {\n        if (r = r.minus(t.times(i)), r.lte(o)) return Ne = Ls(t) ? n ? 2 : 3 : n ? 4 : 1, r;\n        Ne = Ls(t) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return r.minus(i).abs();\n}\nfunction Ji(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, h = t !== void 0;\n    if (h ? (ne(t, 1, Ye), n === void 0 ? n = f.rounding : ne(n, 0, 8)) : (t = f.precision, n = f.rounding), !e.isFinite()) c = Ws(e);\n    else {\n        for(c = Pe(e), s = c.indexOf(\".\"), h ? (i = 2, r == 16 ? t = t * 4 - 3 : r == 8 && (t = t * 3 - 2)) : i = r, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = fn(Pe(d), 10, i), d.e = d.d.length), p = fn(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = h ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = L(e, d, t, n, 0, i), p = e.d, o = e.e, u = $s), s = p[t], a = i / 2, u = u || p[t + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[t - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = t, u) for(; ++p[--t] > i - 1;)p[t] = 0, t || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += Ui.charAt(p[s]);\n            if (h) {\n                if (l > 1) if (r == 16 || r == 8) {\n                    for(s = r == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = fn(c, i, r), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += Ui.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (r == 16 ? \"0x\" : r == 2 ? \"0b\" : r == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction Fs(e, r) {\n    if (e.length > r) return e.length = r, !0;\n}\nfunction Rp(e) {\n    return new this(e).abs();\n}\nfunction Ap(e) {\n    return new this(e).acos();\n}\nfunction Cp(e) {\n    return new this(e).acosh();\n}\nfunction Ip(e, r) {\n    return new this(e).plus(r);\n}\nfunction Dp(e) {\n    return new this(e).asin();\n}\nfunction Op(e) {\n    return new this(e).asinh();\n}\nfunction kp(e) {\n    return new this(e).atan();\n}\nfunction _p(e) {\n    return new this(e).atanh();\n}\nfunction Np(e, r) {\n    e = new this(e), r = new this(r);\n    var t, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !r.s ? t = new this(NaN) : !e.d && !r.d ? (t = xe(this, o, 1).times(r.s > 0 ? .25 : .75), t.s = e.s) : !r.d || e.isZero() ? (t = r.s < 0 ? xe(this, n, i) : new this(0), t.s = e.s) : !e.d || r.isZero() ? (t = xe(this, o, 1).times(.5), t.s = e.s) : r.s < 0 ? (this.precision = o, this.rounding = 1, t = this.atan(L(e, r, o, 1)), r = xe(this, o, 1), this.precision = n, this.rounding = i, t = e.s < 0 ? t.minus(r) : t.plus(r)) : t = this.atan(L(e, r, o, 1)), t;\n}\nfunction Lp(e) {\n    return new this(e).cbrt();\n}\nfunction Fp(e) {\n    return y(e = new this(e), e.e + 1, 2);\n}\nfunction Mp(e, r, t) {\n    return new this(e).clamp(r, t);\n}\nfunction $p(e) {\n    if (!e || typeof e != \"object\") throw Error(bn + \"Object expected\");\n    var r, t, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        Ye,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -vr,\n        0,\n        \"toExpPos\",\n        0,\n        vr,\n        \"maxE\",\n        0,\n        vr,\n        \"minE\",\n        -vr,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(r = 0; r < o.length; r += 3)if (t = o[r], i && (this[t] = Gi[t]), (n = e[t]) !== void 0) if (X(n) === n && n >= o[r + 1] && n <= o[r + 2]) this[t] = n;\n    else throw Error(He + t + \": \" + n);\n    if (t = \"crypto\", i && (this[t] = Gi[t]), (n = e[t]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[t] = !0;\n    else throw Error(Vs);\n    else this[t] = !1;\n    else throw Error(He + t + \": \" + n);\n    return this;\n}\nfunction qp(e) {\n    return new this(e).cos();\n}\nfunction Vp(e) {\n    return new this(e).cosh();\n}\nfunction Ks(e) {\n    var r, t, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, Ms(o)) {\n            u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            }\n            if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return gn(u, o.toString());\n        }\n        if (l === \"string\") return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Bs.test(o) ? gn(u, o) : Tp(u, o);\n        if (l === \"bigint\") return o < 0 ? (o = -o, u.s = -1) : u.s = 1, gn(u, o.toString());\n        throw Error(He + o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = $p, i.clone = Ks, i.isDecimal = Ms, i.abs = Rp, i.acos = Ap, i.acosh = Cp, i.add = Ip, i.asin = Dp, i.asinh = Op, i.atan = kp, i.atanh = _p, i.atan2 = Np, i.cbrt = Lp, i.ceil = Fp, i.clamp = Mp, i.cos = qp, i.cosh = Vp, i.div = jp, i.exp = Bp, i.floor = Up, i.hypot = Gp, i.ln = Qp, i.log = Wp, i.log10 = Kp, i.log2 = Jp, i.max = Hp, i.min = Yp, i.mod = zp, i.mul = Zp, i.pow = Xp, i.random = ed, i.round = rd, i.sign = td, i.sin = nd, i.sinh = id, i.sqrt = od, i.sub = sd, i.sum = ad, i.tan = ld, i.tanh = ud, i.trunc = cd, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], r = 0; r < n.length;)e.hasOwnProperty(t = n[r++]) || (e[t] = this[t]);\n    return i.config(e), i;\n}\nfunction jp(e, r) {\n    return new this(e).div(r);\n}\nfunction Bp(e) {\n    return new this(e).exp();\n}\nfunction Up(e) {\n    return y(e = new this(e), e.e + 1, 3);\n}\nfunction Gp() {\n    var e, r, t = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (r = new this(arguments[e++]), r.d) t.d && (t = t.plus(r.times(r)));\n    else {\n        if (r.s) return w = !0, new this(1 / 0);\n        t = r;\n    }\n    return w = !0, t.sqrt();\n}\nfunction Ms(e) {\n    return e instanceof Le || e && e.toStringTag === js || !1;\n}\nfunction Qp(e) {\n    return new this(e).ln();\n}\nfunction Wp(e, r) {\n    return new this(e).log(r);\n}\nfunction Jp(e) {\n    return new this(e).log(2);\n}\nfunction Kp(e) {\n    return new this(e).log(10);\n}\nfunction Hp() {\n    return Qs(this, arguments, -1);\n}\nfunction Yp() {\n    return Qs(this, arguments, 1);\n}\nfunction zp(e, r) {\n    return new this(e).mod(r);\n}\nfunction Zp(e, r) {\n    return new this(e).mul(r);\n}\nfunction Xp(e, r) {\n    return new this(e).pow(r);\n}\nfunction ed(e) {\n    var r, t, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ne(e, 1, Ye), n = Math.ceil(e / b), this.crypto) if (crypto.getRandomValues) for(r = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = r[o], i >= 429e7 ? r[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(r = crypto.randomBytes(n *= 4); o < n;)i = r[o] + (r[o + 1] << 8) + (r[o + 2] << 16) + ((r[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(r, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(Vs);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= b, n && e && (i = U(10, b - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) t = 0, a = [\n        0\n    ];\n    else {\n        for(t = -1; a[0] === 0; t -= b)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < b && (t -= b - n);\n    }\n    return s.e = t, s.d = a, s;\n}\nfunction rd(e) {\n    return y(e = new this(e), e.e + 1, this.rounding);\n}\nfunction td(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction nd(e) {\n    return new this(e).sin();\n}\nfunction id(e) {\n    return new this(e).sinh();\n}\nfunction od(e) {\n    return new this(e).sqrt();\n}\nfunction sd(e, r) {\n    return new this(e).sub(r);\n}\nfunction ad() {\n    var e = 0, r = arguments, t = new this(r[e]);\n    for(w = !1; t.s && ++e < r.length;)t = t.plus(r[e]);\n    return w = !0, y(t, this.precision, this.rounding);\n}\nfunction ld(e) {\n    return new this(e).tan();\n}\nfunction ud(e) {\n    return new this(e).tanh();\n}\nfunction cd(e) {\n    return y(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar Le = m.constructor = Ks(Gi);\nhn = new Le(hn);\nyn = new Le(yn);\nvar Fe = Le;\nfunction Sr(e) {\n    return Le.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar ct = {};\ntr(ct, {\n    ModelAction: ()=>Rr,\n    datamodelEnumToSchemaEnum: ()=>pd\n});\nfunction pd(e) {\n    return {\n        name: e.name,\n        values: e.values.map((r)=>r.name)\n    };\n}\nvar Rr = ((E)=>(E.findUnique = \"findUnique\", E.findUniqueOrThrow = \"findUniqueOrThrow\", E.findFirst = \"findFirst\", E.findFirstOrThrow = \"findFirstOrThrow\", E.findMany = \"findMany\", E.create = \"create\", E.createMany = \"createMany\", E.createManyAndReturn = \"createManyAndReturn\", E.update = \"update\", E.updateMany = \"updateMany\", E.updateManyAndReturn = \"updateManyAndReturn\", E.upsert = \"upsert\", E.delete = \"delete\", E.deleteMany = \"deleteMany\", E.groupBy = \"groupBy\", E.count = \"count\", E.aggregate = \"aggregate\", E.findRaw = \"findRaw\", E.aggregateRaw = \"aggregateRaw\", E))(Rr || {});\nvar Xs = O(Di());\nvar Zs = O(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar Hs = {\n    keyword: De,\n    entity: De,\n    value: (e)=>W(nr(e)),\n    punctuation: nr,\n    directive: De,\n    function: De,\n    variable: (e)=>W(nr(e)),\n    string: (e)=>W(qe(e)),\n    boolean: Ie,\n    number: De,\n    comment: Hr\n};\nvar dd = (e)=>e, Pn = {}, md = 0, P = {\n    manual: Pn.Prism && Pn.Prism.manual,\n    disableWorkerMessageHandler: Pn.Prism && Pn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof ge) {\n                let r = e;\n                return new ge(r.type, P.util.encode(r.content), r.alias);\n            } else return Array.isArray(e) ? e.map(P.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++md\n            }), e.__id;\n        },\n        clone: function e(r, t) {\n            let n, i, o = P.util.type(r);\n            switch(t = t || {}, o){\n                case \"Object\":\n                    if (i = P.util.objId(r), t[i]) return t[i];\n                    n = {}, t[i] = n;\n                    for(let s in r)r.hasOwnProperty(s) && (n[s] = e(r[s], t));\n                    return n;\n                case \"Array\":\n                    return i = P.util.objId(r), t[i] ? t[i] : (n = [], t[i] = n, r.forEach(function(s, a) {\n                        n[a] = e(s, t);\n                    }), n);\n                default:\n                    return r;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, r) {\n            let t = P.util.clone(P.languages[e]);\n            for(let n in r)t[n] = r[n];\n            return t;\n        },\n        insertBefore: function(e, r, t, n) {\n            n = n || P.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == r) for(let l in t)t.hasOwnProperty(l) && (o[l] = t[l]);\n                t.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, P.languages.DFS(P.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(r, t, n, i) {\n            i = i || {};\n            let o = P.util.objId;\n            for(let s in r)if (r.hasOwnProperty(s)) {\n                t.call(r, s, r[s], n || s);\n                let a = r[s], l = P.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, t, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, t, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, r, t) {\n        let n = {\n            code: e,\n            grammar: r,\n            language: t\n        };\n        return P.hooks.run(\"before-tokenize\", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run(\"after-tokenize\", n), ge.stringify(P.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, r, t, n, i, o, s) {\n        for(let g in t){\n            if (!t.hasOwnProperty(g) || !t[g]) continue;\n            if (g == s) return;\n            let I = t[g];\n            I = P.util.type(I) === \"Array\" ? I : [\n                I\n            ];\n            for(let T = 0; T < I.length; ++T){\n                let S = I[T], E = S.inside, D = !!S.lookbehind, me = !!S.greedy, se = 0, Kr = S.alias;\n                if (me && !S.pattern.global) {\n                    let j = S.pattern.toString().match(/[imuy]*$/)[0];\n                    S.pattern = RegExp(S.pattern.source, j + \"g\");\n                }\n                S = S.pattern || S;\n                for(let j = n, te = i; j < r.length; te += r[j].length, ++j){\n                    let Ae = r[j];\n                    if (r.length > e.length) return;\n                    if (Ae instanceof ge) continue;\n                    if (me && j != r.length - 1) {\n                        S.lastIndex = te;\n                        var p = S.exec(e);\n                        if (!p) break;\n                        var c = p.index + (D ? p[1].length : 0), d = p.index + p[0].length, a = j, l = te;\n                        for(let k = r.length; a < k && (l < d || !r[a].type && !r[a - 1].greedy); ++a)l += r[a].length, c >= l && (++j, te = l);\n                        if (r[j] instanceof ge) continue;\n                        u = a - j, Ae = e.slice(te, l), p.index -= te;\n                    } else {\n                        S.lastIndex = 0;\n                        var p = S.exec(Ae), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    D && (se = p[1] ? p[1].length : 0);\n                    var c = p.index + se, p = p[0].slice(se), d = c + p.length, f = Ae.slice(0, c), h = Ae.slice(d);\n                    let K = [\n                        j,\n                        u\n                    ];\n                    f && (++j, te += f.length, K.push(f));\n                    let fr = new ge(g, E ? P.tokenize(p, E) : p, Kr, p, me);\n                    if (K.push(fr), h && K.push(h), Array.prototype.splice.apply(r, K), u != 1 && P.matchGrammar(e, r, t, j, te, !0, g), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, r) {\n        let t = [\n            e\n        ], n = r.rest;\n        if (n) {\n            for(let i in n)r[i] = n[i];\n            delete r.rest;\n        }\n        return P.matchGrammar(e, t, r, 0, 0, !1), t;\n    },\n    hooks: {\n        all: {},\n        add: function(e, r) {\n            let t = P.hooks.all;\n            t[e] = t[e] || [], t[e].push(r);\n        },\n        run: function(e, r) {\n            let t = P.hooks.all[e];\n            if (!(!t || !t.length)) for(var n = 0, i; i = t[n++];)i(r);\n        }\n    },\n    Token: ge\n};\nP.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nP.languages.javascript = P.languages.extend(\"clike\", {\n    \"class-name\": [\n        P.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nP.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nP.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nP.languages.markup && P.languages.markup.tag.addInlined(\"script\", \"javascript\");\nP.languages.js = P.languages.javascript;\nP.languages.typescript = P.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nP.languages.ts = P.languages.typescript;\nfunction ge(e, r, t, n, i) {\n    this.type = e, this.content = r, this.alias = t, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nge.stringify = function(e, r) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(t) {\n        return ge.stringify(t, r);\n    }).join(\"\") : fd(e.type)(e.content);\n};\nfunction fd(e) {\n    return Hs[e] || dd;\n}\nfunction Ys(e) {\n    return gd(e, P.languages.javascript);\n}\nfunction gd(e, r) {\n    return P.tokenize(e, r).map((n)=>ge.stringify(n)).join(\"\");\n}\nfunction zs(e) {\n    return Ci(e);\n}\nvar vn = class e {\n    static read(r) {\n        let t;\n        try {\n            t = Zs.default.readFileSync(r, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(t);\n    }\n    static fromContent(r) {\n        let t = r.split(/\\r?\\n/);\n        return new e(1, t);\n    }\n    constructor(r, t){\n        this.firstLineNumber = r, this.lines = t;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(r, t) {\n        if (r < this.firstLineNumber || r > this.lines.length + this.firstLineNumber) return this;\n        let n = r - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = t(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(r) {\n        return new e(this.firstLineNumber, this.lines.map((t, n)=>r(t, this.firstLineNumber + n)));\n    }\n    lineAt(r) {\n        return this.lines[r - this.firstLineNumber];\n    }\n    prependSymbolAt(r, t) {\n        return this.mapLines((n, i)=>i === r ? `${t} ${n}` : `  ${n}`);\n    }\n    slice(r, t) {\n        let n = this.lines.slice(r - 1, t).join(`\n`);\n        return new e(r, zs(n).split(`\n`));\n    }\n    highlight() {\n        let r = Ys(this.toString());\n        return new e(this.firstLineNumber, r.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar hd = {\n    red: ce,\n    gray: Hr,\n    dim: Ce,\n    bold: W,\n    underline: Y,\n    highlightSource: (e)=>e.highlight()\n}, yd = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Ed({ message: e, originalMethod: r, isPanic: t, callArguments: n }) {\n    return {\n        functionName: `prisma.${r}()`,\n        message: e,\n        isPanic: t ?? !1,\n        callArguments: n\n    };\n}\nfunction bd({ callsite: e, message: r, originalMethod: t, isPanic: n, callArguments: i }, o) {\n    let s = Ed({\n        message: r,\n        originalMethod: t,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = vn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = xd(c), d = wd(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (h)=>h.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((h, g)=>o.gray(String(g).padStart(f)) + \" \" + h).mapLines((h)=>o.dim(h)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"\\u2192\"))), i) {\n            let h = p + f + 1;\n            h += 2, s.callArguments = (0, Xs.default)(i, h).slice(h);\n        }\n    }\n    return s;\n}\nfunction wd(e) {\n    let r = Object.keys(Rr).join(\"|\"), n = new RegExp(String.raw`\\.(${r})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction xd(e) {\n    let r = 0;\n    for(let t = 0; t < e.length; t++){\n        if (e.charAt(t) !== \" \") return r;\n        r++;\n    }\n    return r;\n}\nfunction Pd({ functionName: e, location: r, message: t, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = r ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), r && a.push(s.underline(vd(r))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(t), a.join(`\n`);\n}\nfunction vd(e) {\n    let r = [\n        e.fileName\n    ];\n    return e.lineNumber && r.push(String(e.lineNumber)), e.columnNumber && r.push(String(e.columnNumber)), r.join(\":\");\n}\nfunction Tn(e) {\n    let r = e.showColors ? hd : yd, t;\n    return t = bd(e, r), Pd(t, r);\n}\nvar la = O(Ki());\nfunction na(e, r, t) {\n    let n = ia(e), i = Td(n), o = Rd(i);\n    o ? Sn(o, r, t) : r.addErrorMessage(()=>\"Unknown error\");\n}\nfunction ia(e) {\n    return e.errors.flatMap((r)=>r.kind === \"Union\" ? ia(r) : [\n            r\n        ]);\n}\nfunction Td(e) {\n    let r = new Map, t = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            t.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = r.get(i);\n        o ? r.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Sd(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : r.set(i, n);\n    }\n    return t.push(...r.values()), t;\n}\nfunction Sd(e, r) {\n    return [\n        ...new Set(e.concat(r))\n    ];\n}\nfunction Rd(e) {\n    return ji(e, (r, t)=>{\n        let n = ra(r), i = ra(t);\n        return n !== i ? n - i : ta(r) - ta(t);\n    });\n}\nfunction ra(e) {\n    let r = 0;\n    return Array.isArray(e.selectionPath) && (r += e.selectionPath.length), Array.isArray(e.argumentPath) && (r += e.argumentPath.length), r;\n}\nfunction ta(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar le = class {\n    constructor(r, t){\n        this.isRequired = !1;\n        this.name = r;\n        this.value = t;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.addMarginSymbol(t(this.isRequired ? \"+\" : \"?\")), r.write(t(this.name)), this.isRequired || r.write(t(\"?\")), r.write(t(\": \")), typeof this.value == \"string\" ? r.write(t(this.value)) : r.write(this.value);\n    }\n};\nsa();\nvar Ar = class {\n    constructor(r = 0, t){\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.context = t;\n        this.currentIndent = r;\n    }\n    write(r) {\n        return typeof r == \"string\" ? this.currentLine += r : r.write(this), this;\n    }\n    writeJoined(r, t, n = (i, o)=>o.write(i)) {\n        let i = t.length - 1;\n        for(let o = 0; o < t.length; o++)n(t[o], this), o !== i && this.write(r);\n        return this;\n    }\n    writeLine(r) {\n        return this.write(r).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let r = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, r?.(), this;\n    }\n    withIndent(r) {\n        return this.indent(), r(this), this.unindent(), this;\n    }\n    afterNextNewline(r) {\n        return this.afterNextNewLineCallback = r, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(r) {\n        return this.marginSymbol = r, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let r = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + r.slice(1) : r;\n    }\n};\noa();\nvar Rn = class {\n    constructor(r){\n        this.value = r;\n    }\n    write(r) {\n        r.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar An = (e)=>e, Cn = {\n    bold: An,\n    red: An,\n    green: An,\n    dim: An,\n    enabled: !1\n}, aa = {\n    bold: W,\n    red: ce,\n    green: qe,\n    dim: Ce,\n    enabled: !0\n}, Cr = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar ve = class {\n    constructor(r){\n        this.isUnderlined = !1;\n        this.color = (r)=>r;\n        this.contents = r;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(r) {\n        return this.color = r, this;\n    }\n    write(r) {\n        let t = r.getCurrentLineLength();\n        r.write(this.color(this.contents)), this.isUnderlined && r.afterNextNewline(()=>{\n            r.write(\" \".repeat(t)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar ze = class {\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n    constructor(){\n        this.hasError = !1;\n    }\n};\nvar Ir = class extends ze {\n    addItem(r) {\n        return this.items.push(new Rn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((t)=>t.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let t = new ve(\"[]\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithItems(r) {\n        let { colors: t } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(Cr, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(t.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n    constructor(...args){\n        super(...args), this.items = [];\n    }\n};\nvar Dr = class e extends ze {\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [t, ...n] = r, i = this.getField(t);\n        if (!i) return;\n        let o = i;\n        for (let s of n){\n            let a;\n            if (o.value instanceof e ? a = o.value.getField(s) : o.value instanceof Ir && (a = o.value.getField(Number(s))), !a) return;\n            o = a;\n        }\n        return o;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let t = this;\n        for (let n of r){\n            if (!(t instanceof e)) return;\n            let i = t.getSubSelectionValue(n);\n            if (!i) return;\n            t = i;\n        }\n        return t;\n    }\n    getDeepSelectionParent(r) {\n        let t = this.getSelectionParent();\n        if (!t) return;\n        let n = t;\n        for (let i of r){\n            let o = n.value.getFieldValue(i);\n            if (!o || !(o instanceof e)) return;\n            let s = o.getSelectionParent();\n            if (!s) return;\n            n = s;\n        }\n        return n;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let t = this.getField(\"include\")?.value.asObject();\n        if (t) return {\n            kind: \"include\",\n            value: t\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((n)=>n.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let t = Object.values(this.fields);\n        if (t.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, t);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let t = new ve(\"{}\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithContents(r, t) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(Cr, [\n                ...t,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    constructor(...args){\n        super(...args), this.fields = {}, this.suggestions = [];\n    }\n};\nvar Q = class extends ze {\n    constructor(t){\n        super();\n        this.text = t;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(t) {\n        let n = new ve(this.text);\n        this.hasError && n.underline().setColor(t.context.colors.red), t.write(n);\n    }\n    asObject() {}\n};\nvar pt = class {\n    addField(r, t) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${r}: ${t}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.writeLine(t(\"{\")).withIndent(()=>{\n            r.writeJoined(Cr, this.fields).newLine();\n        }).write(t(\"}\")).addMarginSymbol(t(\"+\"));\n    }\n    constructor(){\n        this.fields = [];\n    }\n};\nfunction Sn(e, r, t) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            Ad(e, r);\n            break;\n        case \"IncludeOnScalar\":\n            Cd(e, r);\n            break;\n        case \"EmptySelection\":\n            Id(e, r, t);\n            break;\n        case \"UnknownSelectionField\":\n            _d(e, r);\n            break;\n        case \"InvalidSelectionValue\":\n            Nd(e, r);\n            break;\n        case \"UnknownArgument\":\n            Ld(e, r);\n            break;\n        case \"UnknownInputField\":\n            Fd(e, r);\n            break;\n        case \"RequiredArgumentMissing\":\n            Md(e, r);\n            break;\n        case \"InvalidArgumentType\":\n            $d(e, r);\n            break;\n        case \"InvalidArgumentValue\":\n            qd(e, r);\n            break;\n        case \"ValueTooLarge\":\n            Vd(e, r);\n            break;\n        case \"SomeFieldsMissing\":\n            jd(e, r);\n            break;\n        case \"TooManyFieldsGiven\":\n            Bd(e, r);\n            break;\n        case \"Union\":\n            na(e, r, t);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction Ad(e, r) {\n    let t = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    t && (t.getField(e.firstField)?.markAsError(), t.getField(e.secondField)?.markAsError()), r.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Cd(e, r) {\n    let [t, n] = Or(e.selectionPath), i = e.outputType, o = r.arguments.getDeepSelectionParent(t)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new le(s.name, \"true\"));\n    r.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${dt(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction Id(e, r, t) {\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            Dd(e, r, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            Od(e, r);\n            return;\n        }\n    }\n    if (t?.[We(e.outputType.name)]) {\n        kd(e, r);\n        return;\n    }\n    r.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction Dd(e, r, t) {\n    t.removeAllFields();\n    for (let n of e.outputType.fields)t.addSuggestion(new le(n.name, \"false\"));\n    r.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Od(e, r) {\n    let t = e.outputType, n = r.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), pa(n, t)), r.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} must not be empty. ${dt(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction kd(e, r) {\n    let t = new pt;\n    for (let i of e.outputType.fields)i.isRelation || t.addField(i.name, \"false\");\n    let n = new le(\"omit\", t).makeRequired();\n    if (e.selectionPath.length === 0) r.arguments.addSuggestion(n);\n    else {\n        let [i, o] = Or(e.selectionPath), a = r.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new Dr;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    r.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction _d(e, r) {\n    let t = da(e.selectionPath, r);\n    if (t.parentKind !== \"unknown\") {\n        t.field.markAsError();\n        let n = t.parent;\n        switch(t.parentKind){\n            case \"select\":\n                pa(n, e.outputType);\n                break;\n            case \"include\":\n                Ud(n, e.outputType);\n                break;\n            case \"omit\":\n                Gd(n, e.outputType);\n                break;\n        }\n    }\n    r.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${t.fieldName}\\``)}`\n        ];\n        return t.parentKind !== \"unknown\" && i.push(`for ${n.bold(t.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(dt(n)), i.join(\" \");\n    });\n}\nfunction Nd(e, r) {\n    let t = da(e.selectionPath, r);\n    t.parentKind !== \"unknown\" && t.field.value.markAsError(), r.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(t.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction Ld(e, r) {\n    let t = e.argumentPath[0], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(t)?.markAsError(), Qd(n, e.arguments)), r.addErrorMessage((i)=>ua(i, t, e.arguments.map((o)=>o.name)));\n}\nfunction Fd(e, r) {\n    let [t, n] = Or(e.argumentPath), i = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(t)?.asObject();\n        o && ma(o, e.inputType);\n    }\n    r.addErrorMessage((o)=>ua(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction ua(e, r, t) {\n    let n = [\n        `Unknown argument \\`${e.red(r)}\\`.`\n    ], i = Jd(r, t);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), t.length > 0 && n.push(dt(e)), n.join(\" \");\n}\nfunction Md(e, r) {\n    let t;\n    r.addErrorMessage((l)=>t?.value instanceof Q && t.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = Or(e.argumentPath), s = new pt, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) {\n        if (t = a.getField(o), t && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n            for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n            a.addSuggestion(new le(o, s).makeRequired());\n        } else {\n            let l = e.inputTypes.map(ca).join(\" | \");\n            a.addSuggestion(new le(o, l).makeRequired());\n        }\n        if (e.dependentArgumentPath) {\n            n.getDeepField(e.dependentArgumentPath)?.markAsError();\n            let [, l] = Or(e.dependentArgumentPath);\n            r.addErrorMessage((u)=>`Argument \\`${u.green(o)}\\` is required because argument \\`${u.green(l)}\\` was provided.`);\n        }\n    }\n}\nfunction ca(e) {\n    return e.kind === \"list\" ? `${ca(e.elementType)}[]` : e.name;\n}\nfunction $d(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = In(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(t)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction qd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(t)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = In(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Vd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof Q && (i = s.text);\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(t)}\\``), s.join(\" \");\n    });\n}\nfunction jd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && ma(i, e.inputType);\n    }\n    r.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(t)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${In(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(dt(i)), o.join(\" \");\n    });\n}\nfunction Bd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(t)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${In(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction pa(e, r) {\n    for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new le(t.name, \"true\"));\n}\nfunction Ud(e, r) {\n    for (let t of r.fields)t.isRelation && !e.hasField(t.name) && e.addSuggestion(new le(t.name, \"true\"));\n}\nfunction Gd(e, r) {\n    for (let t of r.fields)!e.hasField(t.name) && !t.isRelation && e.addSuggestion(new le(t.name, \"true\"));\n}\nfunction Qd(e, r) {\n    for (let t of r)e.hasField(t.name) || e.addSuggestion(new le(t.name, t.typeNames.join(\" | \")));\n}\nfunction da(e, r) {\n    let [t, n] = Or(e), i = r.arguments.getDeepSubSelectionValue(t)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction ma(e, r) {\n    if (r.kind === \"object\") for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new le(t.name, t.typeNames.join(\" | \")));\n}\nfunction Or(e) {\n    let r = [\n        ...e\n    ], t = r.pop();\n    if (!t) throw new Error(\"unexpected empty path\");\n    return [\n        r,\n        t\n    ];\n}\nfunction dt({ green: e, enabled: r }) {\n    return \"Available options are \" + (r ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction In(e, r) {\n    if (r.length === 1) return r[0];\n    let t = [\n        ...r\n    ], n = t.pop();\n    return `${t.join(\", \")} ${e} ${n}`;\n}\nvar Wd = 3;\nfunction Jd(e, r) {\n    let t = 1 / 0, n;\n    for (let i of r){\n        let o = (0, la.default)(e, i);\n        o > Wd || o < t && (t = o, n = i);\n    }\n    return n;\n}\nvar mt = class {\n    constructor(r, t, n, i, o){\n        this.modelName = r, this.name = t, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let r = this.isList ? \"List\" : \"\", t = this.isEnum ? \"Enum\" : \"\";\n        return `${r}${t}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction kr(e) {\n    return e instanceof mt;\n}\nvar Dn = Symbol(), Yi = new WeakMap, Me = class {\n    constructor(r){\n        r === Dn ? Yi.set(this, `Prisma.${this._getName()}`) : Yi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Yi.get(this);\n    }\n}, ft = class extends Me {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, gt = class extends ft {\n    #e;\n};\nzi(gt, \"DbNull\");\nvar ht = class extends ft {\n    #e;\n};\nzi(ht, \"JsonNull\");\nvar yt = class extends ft {\n    #e;\n};\nzi(yt, \"AnyNull\");\nvar On = {\n    classes: {\n        DbNull: gt,\n        JsonNull: ht,\n        AnyNull: yt\n    },\n    instances: {\n        DbNull: new gt(Dn),\n        JsonNull: new ht(Dn),\n        AnyNull: new yt(Dn)\n    }\n};\nfunction zi(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar fa = \": \", kn = class {\n    constructor(r, t){\n        this.hasError = !1;\n        this.name = r;\n        this.value = t;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + fa.length;\n    }\n    write(r) {\n        let t = new ve(this.name);\n        this.hasError && t.underline().setColor(r.context.colors.red), r.write(t).write(fa).write(this.value);\n    }\n};\nvar Zi = class {\n    constructor(r){\n        this.errorMessages = [];\n        this.arguments = r;\n    }\n    write(r) {\n        r.write(this.arguments);\n    }\n    addErrorMessage(r) {\n        this.errorMessages.push(r);\n    }\n    renderAllMessages(r) {\n        return this.errorMessages.map((t)=>t(r)).join(`\n`);\n    }\n};\nfunction _r(e) {\n    return new Zi(ga(e));\n}\nfunction ga(e) {\n    let r = new Dr;\n    for (let [t, n] of Object.entries(e)){\n        let i = new kn(t, ha(n));\n        r.addField(i);\n    }\n    return r;\n}\nfunction ha(e) {\n    if (typeof e == \"string\") return new Q(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new Q(String(e));\n    if (typeof e == \"bigint\") return new Q(`${e}n`);\n    if (e === null) return new Q(\"null\");\n    if (e === void 0) return new Q(\"undefined\");\n    if (Sr(e)) return new Q(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new Q(`Buffer.alloc(${e.byteLength})`) : new Q(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let r = mn(e) ? e.toISOString() : \"Invalid Date\";\n        return new Q(`new Date(\"${r}\")`);\n    }\n    return e instanceof Me ? new Q(`Prisma.${e._getName()}`) : kr(e) ? new Q(`prisma.${We(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? Kd(e) : typeof e == \"object\" ? ga(e) : new Q(Object.prototype.toString.call(e));\n}\nfunction Kd(e) {\n    let r = new Ir;\n    for (let t of e)r.addItem(ha(t));\n    return r;\n}\nfunction _n(e, r) {\n    let t = r === \"pretty\" ? aa : Cn, n = e.renderAllMessages(t), i = new Ar(0, {\n        colors: t\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction Nn({ args: e, errors: r, errorFormat: t, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = _r(e);\n    for (let p of r)Sn(p, a, s);\n    let { message: l, args: u } = _n(a, t), c = Tn({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: t === \"pretty\",\n        callArguments: u\n    });\n    throw new Z(c, {\n        clientVersion: o\n    });\n}\nfunction Te(e) {\n    return e.replace(/^./, (r)=>r.toLowerCase());\n}\nfunction Ea(e, r, t) {\n    let n = Te(t);\n    return !r.result || !(r.result.$allModels || r.result[n]) ? e : Hd({\n        ...e,\n        ...ya(r.name, e, r.result.$allModels),\n        ...ya(r.name, e, r.result[n])\n    });\n}\nfunction Hd(e) {\n    let r = new we, t = (n, i)=>r.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>t(o, i)) : [\n                n\n            ]));\n    return pn(e, (n)=>({\n            ...n,\n            needs: t(n.name, new Set)\n        }));\n}\nfunction ya(e, r, t) {\n    return t ? pn(t, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: Yd(r, o, i)\n        })) : {};\n}\nfunction Yd(e, r, t) {\n    let n = e?.[r]?.compute;\n    return n ? (i)=>t({\n            ...i,\n            [r]: n(i)\n        }) : t;\n}\nfunction ba(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (e[n.name]) for (let i of n.needs)t[i] = !0;\n    return t;\n}\nfunction wa(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (!e[n.name]) for (let i of n.needs)delete t[i];\n    return t;\n}\nvar Ln = class {\n    constructor(r, t){\n        this.computedFieldsCache = new we;\n        this.modelExtensionsCache = new we;\n        this.queryCallbacksCache = new we;\n        this.clientExtensions = lt(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = lt(()=>{\n            let r = this.previous?.getAllBatchQueryCallbacks() ?? [], t = this.extension.query?.$__internalBatch;\n            return t ? r.concat(t) : r;\n        });\n        this.extension = r;\n        this.previous = t;\n    }\n    getAllComputedFields(r) {\n        return this.computedFieldsCache.getOrCreate(r, ()=>Ea(this.previous?.getAllComputedFields(r), this.extension, r));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(r) {\n        return this.modelExtensionsCache.getOrCreate(r, ()=>{\n            let t = Te(r);\n            return !this.extension.model || !(this.extension.model[t] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(r) : {\n                ...this.previous?.getAllModelExtensions(r),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[t]\n            };\n        });\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.queryCallbacksCache.getOrCreate(`${r}:${t}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(r, t) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[r] || o.$allModels || o[t] || o.$allOperations) ? n : (o[r] !== void 0 && (o[r][t] !== void 0 && i.push(o[r][t]), o[r].$allOperations !== void 0 && i.push(o[r].$allOperations)), r !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[t] !== void 0 && i.push(o.$allModels[t]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[t] !== void 0 && i.push(o[t]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Nr = class e {\n    constructor(r){\n        this.head = r;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(r) {\n        return new e(new Ln(r));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(r) {\n        return new e(new Ln(r, this.head));\n    }\n    getAllComputedFields(r) {\n        return this.head?.getAllComputedFields(r);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(r) {\n        return this.head?.getAllModelExtensions(r);\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.head?.getAllQueryCallbacks(r, t) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Fn = class {\n    constructor(r){\n        this.name = r;\n    }\n};\nfunction xa(e) {\n    return e instanceof Fn;\n}\nfunction Pa(e) {\n    return new Fn(e);\n}\nvar va = Symbol(), Et = class {\n    constructor(r){\n        if (r !== va) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(r) {\n        return r === void 0 ? Mn : r;\n    }\n}, Mn = new Et(va);\nfunction Se(e) {\n    return e instanceof Et;\n}\nvar zd = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, Ta = \"explicitly `undefined` values are not allowed\";\nfunction $n({ modelName: e, action: r, args: t, runtimeDataModel: n, extensions: i = Nr.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new Xi({\n        runtimeDataModel: n,\n        modelName: e,\n        action: r,\n        rootArgs: t,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: zd[r],\n        query: bt(t, p)\n    };\n}\nfunction bt({ select: e, include: r, ...t } = {}, n) {\n    let i = t.omit;\n    return delete t.omit, {\n        arguments: Ra(t, n),\n        selection: Zd(e, r, i, n)\n    };\n}\nfunction Zd(e, r, t, n) {\n    return e ? (r ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : t && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), tm(e, n)) : Xd(n, r, t);\n}\nfunction Xd(e, r, t) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), r && em(n, r, e), rm(n, t, e), n;\n}\nfunction em(e, r, t) {\n    for (let [n, i] of Object.entries(r)){\n        if (Se(i)) continue;\n        let o = t.nestSelection(n);\n        if (eo(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = t.findField(n);\n        if (s && s.kind !== \"object\" && t.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: t.getSelectionPath().concat(n),\n            outputType: t.getOutputTypeDescription()\n        }), s) {\n            e[n] = bt(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = bt(i, o);\n    }\n}\nfunction rm(e, r, t) {\n    let n = t.getComputedFields(), i = {\n        ...t.getGlobalOmit(),\n        ...r\n    }, o = wa(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Se(a)) continue;\n        eo(a, t.nestSelection(s));\n        let l = t.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction tm(e, r) {\n    let t = {}, n = r.getComputedFields(), i = ba(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Se(s)) continue;\n        let a = r.nestSelection(o);\n        eo(s, a);\n        let l = r.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Se(s)) {\n                t[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? t[o] = bt({}, a) : t[o] = !0;\n                continue;\n            }\n            t[o] = bt(s, a);\n        }\n    }\n    return t;\n}\nfunction Sa(e, r) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Pr(e)) {\n        if (mn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: r.getSelectionPath(),\n            argumentPath: r.getArgumentPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (xa(e)) return {\n        $type: \"Param\",\n        value: e.name\n    };\n    if (kr(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return nm(e, r);\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    if (im(e)) return e.values;\n    if (Sr(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof Me) {\n        if (e !== On.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (om(e)) return e.toJSON();\n    if (typeof e == \"object\") return Ra(e, r);\n    r.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: r.getSelectionPath(),\n        argumentPath: r.getArgumentPath(),\n        argument: {\n            name: r.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Ra(e, r) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let t = {};\n    for(let n in e){\n        let i = e[n], o = r.nestArgument(n);\n        Se(i) || (i !== void 0 ? t[n] = Sa(i, o) : r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: r.getSelectionPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: Ta\n        }));\n    }\n    return t;\n}\nfunction nm(e, r) {\n    let t = [];\n    for(let n = 0; n < e.length; n++){\n        let i = r.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Se(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            r.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${r.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        t.push(Sa(o, i));\n    }\n    return t;\n}\nfunction im(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction om(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction eo(e, r) {\n    e === void 0 && r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: r.getSelectionPath(),\n        underlyingError: Ta\n    });\n}\nvar Xi = class e {\n    constructor(r){\n        this.params = r;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(r) {\n        Nn({\n            errors: [\n                r\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((r)=>({\n                    name: r.name,\n                    typeName: \"boolean\",\n                    isRelation: r.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(r) {\n        return this.params.previewFeatures.includes(r);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(r) {\n        return this.modelOrType?.fields.find((t)=>t.name === r);\n    }\n    nestSelection(r) {\n        let t = this.findField(r), n = t?.kind === \"object\" ? t.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(r)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[We(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                ar(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(r) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(r)\n        });\n    }\n};\nfunction Aa(e) {\n    if (!e._hasPreviewFlag(\"metrics\")) throw new Z(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e._clientVersion\n    });\n}\nvar Lr = class {\n    constructor(r){\n        this._client = r;\n    }\n    prometheus(r) {\n        return Aa(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...r\n        });\n    }\n    json(r) {\n        return Aa(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...r\n        });\n    }\n};\nfunction Ca(e, r) {\n    let t = lt(()=>sm(r));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>t.get()\n    });\n}\nfunction sm(e) {\n    return {\n        datamodel: {\n            models: ro(e.models),\n            enums: ro(e.enums),\n            types: ro(e.types)\n        }\n    };\n}\nfunction ro(e) {\n    return Object.entries(e).map(([r, t])=>({\n            name: r,\n            ...t\n        }));\n}\nvar to = new WeakMap, qn = \"$$PrismaTypedSql\", wt = class {\n    constructor(r, t){\n        to.set(this, {\n            sql: r,\n            values: t\n        }), Object.defineProperty(this, qn, {\n            value: qn\n        });\n    }\n    get sql() {\n        return to.get(this).sql;\n    }\n    get values() {\n        return to.get(this).values;\n    }\n};\nfunction Ia(e) {\n    return (...r)=>new wt(e, r);\n}\nfunction Vn(e) {\n    return e != null && e[qn] === qn;\n}\nvar cu = O(Ti());\nvar pu = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"), du = __webpack_require__(/*! node:events */ \"node:events\"), mu = O(__webpack_require__(/*! node:fs */ \"node:fs\")), ri = O(__webpack_require__(/*! node:path */ \"node:path\"));\nvar ie = class e {\n    constructor(r, t){\n        if (r.length - 1 !== t.length) throw r.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${r.length} strings to have ${r.length - 1} values`);\n        let n = t.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = r[0];\n        let i = 0, o = 0;\n        for(; i < t.length;){\n            let s = t[i++], a = r[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `?${this.strings[t++]}`;\n        return n;\n    }\n    get statement() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `:${t}${this.strings[t++]}`;\n        return n;\n    }\n    get text() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `$${t}${this.strings[t++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction Da(e, r = \",\", t = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new ie([\n        t,\n        ...Array(e.length - 1).fill(r),\n        n\n    ], e);\n}\nfunction no(e) {\n    return new ie([\n        e\n    ], []);\n}\nvar Oa = no(\"\");\nfunction io(e, ...r) {\n    return new ie(e, r);\n}\nfunction xt(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (r) {\n            return e[r];\n        }\n    };\n}\nfunction re(e, r) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return r();\n        }\n    };\n}\nfunction lr(e) {\n    let r = new we;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (t) {\n            return r.getOrCreate(t, ()=>e.getPropertyValue(t));\n        },\n        getPropertyDescriptor (t) {\n            return e.getPropertyDescriptor?.(t);\n        }\n    };\n}\nvar jn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Bn(e) {\n    let r = new Set(e);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>jn,\n        has: (t, n)=>r.has(n),\n        set: (t, n, i)=>r.add(n) && Reflect.set(t, n, i),\n        ownKeys: ()=>[\n                ...r\n            ]\n    };\n}\nvar ka = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction he(e, r) {\n    let t = am(r), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = t.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = t.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = _a(Reflect.ownKeys(o), t), a = _a(Array.from(t.keys()), t);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return t.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = t.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...jn,\n                ...l?.getPropertyDescriptor(s)\n            } : jn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i[ka] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[ka], o;\n    }, i;\n}\nfunction am(e) {\n    let r = new Map;\n    for (let t of e){\n        let n = t.getKeys();\n        for (let i of n)r.set(i, t);\n    }\n    return r;\n}\nfunction _a(e, r) {\n    return e.filter((t)=>r.get(t)?.has?.(t) ?? !0);\n}\nfunction Fr(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Mr(e, r) {\n    return {\n        batch: e,\n        transaction: r?.kind === \"batch\" ? {\n            isolationLevel: r.options.isolationLevel\n        } : void 0\n    };\n}\nfunction Na(e) {\n    if (e === void 0) return \"\";\n    let r = _r(e);\n    return new Ar(0, {\n        colors: Cn\n    }).write(r).toString();\n}\nvar lm = \"P2037\";\nfunction $r({ error: e, user_facing_error: r }, t, n) {\n    return r.error_code ? new z(um(r, n), {\n        code: r.error_code,\n        clientVersion: t,\n        meta: r.meta,\n        batchRequestIdx: r.batch_request_idx\n    }) : new V(e, {\n        clientVersion: t,\n        batchRequestIdx: r.batch_request_idx\n    });\n}\nfunction um(e, r) {\n    let t = e.message;\n    return (r === \"postgresql\" || r === \"postgres\" || r === \"mysql\") && e.error_code === lm && (t += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), t;\n}\nvar Pt = \"<unknown>\";\nfunction La(e) {\n    var r = e.split(`\n`);\n    return r.reduce(function(t, n) {\n        var i = dm(n) || fm(n) || ym(n) || xm(n) || bm(n);\n        return i && t.push(i), t;\n    }, []);\n}\nvar cm = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, pm = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction dm(e) {\n    var r = cm.exec(e);\n    if (!r) return null;\n    var t = r[2] && r[2].indexOf(\"native\") === 0, n = r[2] && r[2].indexOf(\"eval\") === 0, i = pm.exec(r[2]);\n    return n && i != null && (r[2] = i[1], r[3] = i[2], r[4] = i[3]), {\n        file: t ? null : r[2],\n        methodName: r[1] || Pt,\n        arguments: t ? [\n            r[2]\n        ] : [],\n        lineNumber: r[3] ? +r[3] : null,\n        column: r[4] ? +r[4] : null\n    };\n}\nvar mm = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction fm(e) {\n    var r = mm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || Pt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar gm = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, hm = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction ym(e) {\n    var r = gm.exec(e);\n    if (!r) return null;\n    var t = r[3] && r[3].indexOf(\" > eval\") > -1, n = hm.exec(r[3]);\n    return t && n != null && (r[3] = n[1], r[4] = n[2], r[5] = null), {\n        file: r[3],\n        methodName: r[1] || Pt,\n        arguments: r[2] ? r[2].split(\",\") : [],\n        lineNumber: r[4] ? +r[4] : null,\n        column: r[5] ? +r[5] : null\n    };\n}\nvar Em = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction bm(e) {\n    var r = Em.exec(e);\n    return r ? {\n        file: r[3],\n        methodName: r[1] || Pt,\n        arguments: [],\n        lineNumber: +r[4],\n        column: r[5] ? +r[5] : null\n    } : null;\n}\nvar wm = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction xm(e) {\n    var r = wm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || Pt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar oo = class {\n    getLocation() {\n        return null;\n    }\n}, so = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let r = this._error.stack;\n        if (!r) return null;\n        let n = La(r).find((i)=>{\n            if (!i.file) return !1;\n            let o = Li(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Ze(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new oo : new so;\n}\nvar Fa = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction qr(e = {}) {\n    let r = vm(e);\n    return Object.entries(r).reduce((n, [i, o])=>(Fa[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction vm(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Un(e = {}) {\n    return (r)=>(typeof e._count == \"boolean\" && (r._count = r._count._all), r);\n}\nfunction Ma(e, r) {\n    let t = Un(e);\n    return r({\n        action: \"aggregate\",\n        unpacker: t,\n        argsMapper: qr\n    })(e);\n}\nfunction Tm(e = {}) {\n    let { select: r, ...t } = e;\n    return typeof r == \"object\" ? qr({\n        ...t,\n        _count: r\n    }) : qr({\n        ...t,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Sm(e = {}) {\n    return typeof e.select == \"object\" ? (r)=>Un(e)(r)._count : (r)=>Un(e)(r)._count._all;\n}\nfunction $a(e, r) {\n    return r({\n        action: \"count\",\n        unpacker: Sm(e),\n        argsMapper: Tm\n    })(e);\n}\nfunction Rm(e = {}) {\n    let r = qr(e);\n    if (Array.isArray(r.by)) for (let t of r.by)typeof t == \"string\" && (r.select[t] = !0);\n    else typeof r.by == \"string\" && (r.select[r.by] = !0);\n    return r;\n}\nfunction Am(e = {}) {\n    return (r)=>(typeof e?._count == \"boolean\" && r.forEach((t)=>{\n            t._count = t._count._all;\n        }), r);\n}\nfunction qa(e, r) {\n    return r({\n        action: \"groupBy\",\n        unpacker: Am(e),\n        argsMapper: Rm\n    })(e);\n}\nfunction Va(e, r, t) {\n    if (r === \"aggregate\") return (n)=>Ma(n, t);\n    if (r === \"count\") return (n)=>$a(n, t);\n    if (r === \"groupBy\") return (n)=>qa(n, t);\n}\nfunction ja(e, r) {\n    let t = r.fields.filter((i)=>!i.relationName), n = _s(t, \"name\");\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new mt(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...Bn(Object.keys(n))\n    });\n}\nvar Ba = (e)=>Array.isArray(e) ? e : e.split(\".\"), ao = (e, r)=>Ba(r).reduce((t, n)=>t && t[n], e), Ua = (e, r, t)=>Ba(r).reduceRight((n, i, o, s)=>Object.assign({}, ao(e, s.slice(0, o)), {\n            [i]: n\n        }), t);\nfunction Cm(e, r) {\n    return e === void 0 || r === void 0 ? [] : [\n        ...r,\n        \"select\",\n        e\n    ];\n}\nfunction Im(e, r, t) {\n    return r === void 0 ? e ?? {} : Ua(r, t, e || !0);\n}\nfunction lo(e, r, t, n, i, o) {\n    let a = e._runtimeDataModel.models[r].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Ze(e._errorFormat), c = Cm(n, i), p = Im(l, o, c), d = t({\n            dataPath: c,\n            callsite: u\n        })(p), f = Dm(e, r);\n        return new Proxy(d, {\n            get (h, g) {\n                if (!f.includes(g)) return h[g];\n                let T = [\n                    a[g].type,\n                    t,\n                    g\n                ], S = [\n                    c,\n                    p\n                ];\n                return lo(e, ...T, ...S);\n            },\n            ...Bn([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction Dm(e, r) {\n    return e._runtimeDataModel.models[r].fields.filter((t)=>t.kind === \"object\").map((t)=>t.name);\n}\nvar Om = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], km = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction uo(e, r) {\n    let t = e._extensions.getAllModelExtensions(r) ?? {}, n = [\n        _m(e, r),\n        Lm(e, r),\n        xt(t),\n        re(\"name\", ()=>r),\n        re(\"$name\", ()=>r),\n        re(\"$parent\", ()=>e._appliedParent)\n    ];\n    return he({}, n);\n}\nfunction _m(e, r) {\n    let t = Te(r), n = Object.keys(Rr).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (a)=>(l)=>{\n                    let u = Ze(e._errorFormat);\n                    return e._createPrismaPromise((c)=>{\n                        let p = {\n                            args: l,\n                            dataPath: [],\n                            action: o,\n                            model: r,\n                            clientMethod: `${t}.${i}`,\n                            jsModelName: t,\n                            transaction: c,\n                            callsite: u\n                        };\n                        return e._request({\n                            ...p,\n                            ...a\n                        });\n                    }, {\n                        action: o,\n                        args: l,\n                        model: r\n                    });\n                };\n            return Om.includes(o) ? lo(e, r, s) : Nm(i) ? Va(e, i, s) : s({});\n        }\n    };\n}\nfunction Nm(e) {\n    return km.includes(e);\n}\nfunction Lm(e, r) {\n    return lr(re(\"fields\", ()=>{\n        let t = e._runtimeDataModel.models[r];\n        return ja(r, t);\n    }));\n}\nfunction Ga(e) {\n    return e.replace(/^./, (r)=>r.toUpperCase());\n}\nvar co = Symbol();\nfunction vt(e) {\n    let r = [\n        Fm(e),\n        Mm(e),\n        re(co, ()=>e),\n        re(\"$parent\", ()=>e._appliedParent)\n    ], t = e._extensions.getAllClientExtensions();\n    return t && r.push(xt(t)), he(e, r);\n}\nfunction Fm(e) {\n    let r = Object.getPrototypeOf(e._originalClient), t = [\n        ...new Set(Object.getOwnPropertyNames(r))\n    ];\n    return {\n        getKeys () {\n            return t;\n        },\n        getPropertyValue (n) {\n            return e[n];\n        }\n    };\n}\nfunction Mm(e) {\n    let r = Object.keys(e._runtimeDataModel.models), t = r.map(Te), n = [\n        ...new Set(r.concat(t))\n    ];\n    return lr({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Ga(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return uo(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return uo(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!t.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Qa(e) {\n    return e[co] ? e[co] : e;\n}\nfunction Wa(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let t = e.client.__AccelerateEngine;\n        this._originalClient._engine = new t(this._originalClient._accelerateEngineConfig);\n    }\n    let r = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return vt(r);\n}\nfunction Ja({ result: e, modelName: r, select: t, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(r);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(Fr(u));\n        } else if (t) {\n            if (!t[l.name]) continue;\n            let u = l.needs.filter((c)=>!t[c]);\n            u.length > 0 && a.push(Fr(u));\n        }\n        $m(e, l.needs) && s.push(qm(l, he(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? he(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction $m(e, r) {\n    return r.every((t)=>Vi(e, t));\n}\nfunction qm(e, r) {\n    return lr(re(e.name, ()=>e.compute(r)));\n}\nfunction Gn({ visitor: e, result: r, args: t, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(r)) {\n        for(let s = 0; s < r.length; s++)r[s] = Gn({\n            result: r[s],\n            args: t,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return r;\n    }\n    let o = e(r, i, t) ?? r;\n    return t.include && Ka({\n        includeOrSelect: t.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), t.select && Ka({\n        includeOrSelect: t.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction Ka({ includeOrSelect: e, result: r, parentModelName: t, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || r[o] == null || Se(s)) continue;\n        let l = n.models[t].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        r[o] = Gn({\n            visitor: i,\n            result: r[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction Ha({ result: e, modelName: r, args: t, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[r] ? e : Gn({\n        result: e,\n        args: t ?? {},\n        modelName: r,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Te(l);\n            return Ja({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nvar Vm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$extends\"\n], Ya = Vm;\nfunction za(e) {\n    if (e instanceof ie) return jm(e);\n    if (Vn(e)) return Bm(e);\n    if (Array.isArray(e)) {\n        let t = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)t[n] = Tt(e[n]);\n        return t;\n    }\n    let r = {};\n    for(let t in e)r[t] = Tt(e[t]);\n    return r;\n}\nfunction jm(e) {\n    return new ie(e.strings, e.values);\n}\nfunction Bm(e) {\n    return new wt(e.sql, e.values);\n}\nfunction Tt(e) {\n    if (typeof e != \"object\" || e == null || e instanceof Me || kr(e)) return e;\n    if (Sr(e)) return new Fe(e.toFixed());\n    if (Pr(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let r = e.length, t;\n        for(t = Array(r); r--;)t[r] = Tt(e[r]);\n        return t;\n    }\n    if (typeof e == \"object\") {\n        let r = {};\n        for(let t in e)t === \"__proto__\" ? Object.defineProperty(r, t, {\n            value: Tt(e[t]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : r[t] = Tt(e[t]);\n        return r;\n    }\n    ar(e, \"Unknown value\");\n}\nfunction Xa(e, r, t, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = r.customDataProxyFetch;\n        return \"transaction\" in r && i !== void 0 && (r.transaction?.kind === \"batch\" && r.transaction.lock.then(), r.transaction = i), n === t.length ? e._executeRequest(r) : t[n]({\n            model: r.model,\n            operation: r.model ? r.action : r.clientMethod,\n            args: za(r.args ?? {}),\n            __internalParams: r,\n            query: (s, a = r)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = nl(o, l), a.args = s, Xa(e, a, t, n + 1);\n            }\n        });\n    });\n}\nfunction el(e, r) {\n    let { jsModelName: t, action: n, clientMethod: i } = r, o = t ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(r);\n    let s = e._extensions.getAllQueryCallbacks(t ?? \"$none\", o);\n    return Xa(e, r, s);\n}\nfunction rl(e) {\n    return (r)=>{\n        let t = {\n            requests: r\n        }, n = r[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? tl(t, n, 0, e) : e(t);\n    };\n}\nfunction tl(e, r, t, n) {\n    if (t === r.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return r[t]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = nl(i, l), tl(a, r, t + 1, n);\n        }\n    });\n}\nvar Za = (e)=>e;\nfunction nl(e = Za, r = Za) {\n    return (t)=>e(r(t));\n}\nvar il = N(\"prisma:client\"), ol = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction sl({ postinstall: e, ciName: r, clientVersion: t, generator: n }) {\n    if (il(\"checkPlatformCaching:postinstall\", e), il(\"checkPlatformCaching:ciName\", r), e === !0 && !(n?.output && typeof (n.output.fromEnvVar ?? n.output.value) == \"string\") && r && r in ol) {\n        let i = `Prisma has detected that this project was built on ${r}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${ol[r]}-build`;\n        throw console.error(i), new v(i, t);\n    }\n}\nfunction al(e, r) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [r[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar dl = O(__webpack_require__(/*! node:fs */ \"node:fs\")), St = O(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Qn(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Add \"${r}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Um(e)}`;\n}\nfunction Um(e) {\n    let { generator: r, generatorBinaryTargets: t, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...t,\n        i\n    ];\n    return ki({\n        ...r,\n        binaryTargets: o\n    });\n}\nfunction Xe(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${r}\".`;\n}\nfunction er(e) {\n    let { searchedLocations: r } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(r)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction ll(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `${Xe(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${r}\".\n${Qn(e)}\n\n${er(e)}`;\n}\nfunction Wn(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Jn(e) {\n    let { errorStack: r } = e;\n    return r?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction ul(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Jn(e)}\n\nThis is likely caused by a bundler that has not copied \"${r}\" next to the resulting bundle.\nEnsure that \"${r}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${Wn(\"engine-not-found-bundler-investigation\")}\n\n${er(e)}`;\n}\nfunction cl(e) {\n    let { runtimeBinaryTarget: r, generatorBinaryTargets: t } = e, n = t.find((i)=>i.native);\n    return `${Xe(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${r}\".\n${Qn(e)}\n\n${er(e)}`;\n}\nfunction pl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Jn(e)}\n\nThis is likely caused by tooling that has not copied \"${r}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${r}\" has been copied to \"${e.expectedLocation}\".\n\n${Wn(\"engine-not-found-tooling-investigation\")}\n\n${er(e)}`;\n}\nvar Gm = N(\"prisma:client:engines:resolveEnginePath\"), Qm = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function ml(e, r) {\n    let t = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? r.prismaPath;\n    if (t !== void 0) return t;\n    let { enginePath: n, searchedLocations: i } = await Wm(e, r);\n    if (Gm(\"enginePath\", n), n !== void 0 && e === \"binary\" && Ri(n), n !== void 0) return r.prismaPath = n;\n    let o = await ir(), s = r.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(Qm()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: r.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: fl(e, o),\n        expectedLocation: St.default.relative(process.cwd(), r.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = cl(c) : l ? p = ll(c) : u ? p = ul(c) : p = pl(c), new v(p, r.clientVersion);\n}\nasync function Wm(e, r) {\n    let t = await ir(), n = [], i = [\n        r.dirname,\n        St.default.resolve(__dirname, \"..\"),\n        r.generator?.output?.value ?? __dirname,\n        St.default.resolve(__dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        r.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && i.push(ms());\n    for (let o of i){\n        let s = fl(e, t), a = St.default.join(o, s);\n        if (n.push(o), dl.default.existsSync(a)) return {\n            enginePath: a,\n            searchedLocations: n\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations: n\n    };\n}\nfunction fl(e, r) {\n    return e === \"library\" ? Gt(r, \"fs\") : `query-engine-${r}${r === \"windows\" ? \".exe\" : \"\"}`;\n}\nfunction gl(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (r)=>`${r[0]}5`) : \"\";\n}\nfunction hl(e) {\n    return e.split(`\n`).map((r)=>r.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar yl = O(Os());\nfunction El({ title: e, user: r = \"prisma\", repo: t = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, yl.default)({\n        user: r,\n        repo: t,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction bl({ version: e, binaryTarget: r, title: t, description: n, engineVersion: i, database: o, query: s }) {\n    let a = Bo(6e3 - (s?.length ?? 0)), l = hl(wr(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = wr(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${r?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? gl(s) : \"\"}\n\\`\\`\\`\n`), p = El({\n        title: t,\n        body: c\n    });\n    return `${t}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${Y(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction wl(e, r) {\n    throw new Error(r);\n}\nfunction Jm(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction Km(e, r) {\n    let t = {};\n    for (let n of Object.keys(e))t[n] = r(e[n], n);\n    return t;\n}\nfunction Vr(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(Vr) : typeof e == \"object\" ? Jm(e) ? Hm(e) : e.constructor !== null && e.constructor.name !== \"Object\" ? e : Km(e, Vr) : e;\n}\nfunction Hm({ $type: e, value: r }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(r);\n        case \"Bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"DateTime\":\n            return new Date(r);\n        case \"Decimal\":\n            return new Le(r);\n        case \"Json\":\n            return JSON.parse(r);\n        default:\n            wl(r, \"Unknown tagged value\");\n    }\n}\nvar xl = \"6.16.1\";\nvar zm = ()=>globalThis.process?.release?.name === \"node\", Zm = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, Xm = ()=>!!globalThis.Deno, ef = ()=>typeof globalThis.Netlify == \"object\", rf = ()=>typeof globalThis.EdgeRuntime == \"object\", tf = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction nf() {\n    return [\n        [\n            ef,\n            \"netlify\"\n        ],\n        [\n            rf,\n            \"edge-light\"\n        ],\n        [\n            tf,\n            \"workerd\"\n        ],\n        [\n            Xm,\n            \"deno\"\n        ],\n        [\n            Zm,\n            \"bun\"\n        ],\n        [\n            zm,\n            \"node\"\n        ]\n    ].flatMap((t)=>t[0]() ? [\n            t[1]\n        ] : []).at(0) ?? \"\";\n}\nvar of = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction Kn() {\n    let e = nf();\n    return {\n        id: e,\n        prettyName: of[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nfunction jr({ inlineDatasources: e, overrideDatasources: r, env: t, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = r[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = t[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new v(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new v(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar Hn = class extends Error {\n    constructor(r, t){\n        super(r), this.clientVersion = t.clientVersion, this.cause = t.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar oe = class extends Hn {\n    constructor(r, t){\n        super(r, t), this.isRetryable = t.isRetryable ?? !0;\n    }\n};\nfunction R(e, r) {\n    return {\n        ...e,\n        isRetryable: r\n    };\n}\nvar ur = class extends oe {\n    constructor(r, t){\n        super(r, R(t, !1)), this.name = \"InvalidDatasourceError\", this.code = \"P6001\";\n    }\n};\nx(ur, \"InvalidDatasourceError\");\nfunction Pl(e) {\n    let r = {\n        clientVersion: e.clientVersion\n    }, t = Object.keys(e.inlineDatasources)[0], n = jr({\n        inlineDatasources: e.inlineDatasources,\n        overrideDatasources: e.overrideDatasources,\n        clientVersion: e.clientVersion,\n        env: {\n            ...e.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }\n    }), i;\n    try {\n        i = new URL(n);\n    } catch  {\n        throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n    }\n    let { protocol: o, searchParams: s } = i;\n    if (o !== \"prisma:\" && o !== sn) throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\` or \\`prisma+postgres://\\``, r);\n    let a = s.get(\"api_key\");\n    if (a === null || a.length < 1) throw new ur(`Error validating datasource \\`${t}\\`: the URL must contain a valid API key`, r);\n    let l = Ii(i) ? \"http:\" : \"https:\";\n    process.env.TEST_CLIENT_ENGINE_REMOTE_EXECUTOR && i.searchParams.has(\"use_http\") && (l = \"http:\");\n    let u = new URL(i.href.replace(o, l));\n    return {\n        apiKey: a,\n        url: u\n    };\n}\nvar vl = O(on()), Yn = class {\n    constructor({ apiKey: r, tracingHelper: t, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = r, this.tracingHelper = t, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: r, transactionId: t } = {}) {\n        let n = {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Content-Type\": \"application/json\",\n            \"Prisma-Engine-Hash\": this.engineHash,\n            \"Prisma-Engine-Version\": vl.enginesVersion\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = r ?? this.tracingHelper.getTraceParent()), t && (n[\"X-Transaction-Id\"] = t);\n        let i = this.#e();\n        return i.length > 0 && (n[\"X-Capture-Telemetry\"] = i.join(\", \")), n;\n    }\n    #e() {\n        let r = [];\n        return this.tracingHelper.isEnabled() && r.push(\"tracing\"), this.logLevel && r.push(this.logLevel), this.logQueries && r.push(\"query\"), r;\n    }\n};\nfunction sf(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction po(e) {\n    return new Date(sf(e));\n}\nvar Br = class extends oe {\n    constructor(r){\n        super(\"This request must be retried\", R(r, !0)), this.name = \"ForcedRetryError\", this.code = \"P5001\";\n    }\n};\nx(Br, \"ForcedRetryError\");\nvar cr = class extends oe {\n    constructor(r, t){\n        super(r, R(t, !1)), this.name = \"NotImplementedYetError\", this.code = \"P5004\";\n    }\n};\nx(cr, \"NotImplementedYetError\");\nvar $ = class extends oe {\n    constructor(r, t){\n        super(r, t), this.response = t.response;\n        let n = this.response.headers.get(\"prisma-request-id\");\n        if (n) {\n            let i = `(The request id was: ${n})`;\n            this.message = this.message + \" \" + i;\n        }\n    }\n};\nvar pr = class extends $ {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", R(r, !0)), this.name = \"SchemaMissingError\", this.code = \"P5005\";\n    }\n};\nx(pr, \"SchemaMissingError\");\nvar mo = \"This request could not be understood by the server\", Rt = class extends $ {\n    constructor(r, t, n){\n        super(t || mo, R(r, !1)), this.name = \"BadRequestError\", this.code = \"P5000\", n && (this.code = n);\n    }\n};\nx(Rt, \"BadRequestError\");\nvar At = class extends $ {\n    constructor(r, t){\n        super(\"Engine not started: healthcheck timeout\", R(r, !0)), this.name = \"HealthcheckTimeoutError\", this.code = \"P5013\", this.logs = t;\n    }\n};\nx(At, \"HealthcheckTimeoutError\");\nvar Ct = class extends $ {\n    constructor(r, t, n){\n        super(t, R(r, !0)), this.name = \"EngineStartupError\", this.code = \"P5014\", this.logs = n;\n    }\n};\nx(Ct, \"EngineStartupError\");\nvar It = class extends $ {\n    constructor(r){\n        super(\"Engine version is not supported\", R(r, !1)), this.name = \"EngineVersionNotSupportedError\", this.code = \"P5012\";\n    }\n};\nx(It, \"EngineVersionNotSupportedError\");\nvar fo = \"Request timed out\", Dt = class extends $ {\n    constructor(r, t = fo){\n        super(t, R(r, !1)), this.name = \"GatewayTimeoutError\", this.code = \"P5009\";\n    }\n};\nx(Dt, \"GatewayTimeoutError\");\nvar af = \"Interactive transaction error\", Ot = class extends $ {\n    constructor(r, t = af){\n        super(t, R(r, !1)), this.name = \"InteractiveTransactionError\", this.code = \"P5015\";\n    }\n};\nx(Ot, \"InteractiveTransactionError\");\nvar lf = \"Request parameters are invalid\", kt = class extends $ {\n    constructor(r, t = lf){\n        super(t, R(r, !1)), this.name = \"InvalidRequestError\", this.code = \"P5011\";\n    }\n};\nx(kt, \"InvalidRequestError\");\nvar go = \"Requested resource does not exist\", _t = class extends $ {\n    constructor(r, t = go){\n        super(t, R(r, !1)), this.name = \"NotFoundError\", this.code = \"P5003\";\n    }\n};\nx(_t, \"NotFoundError\");\nvar ho = \"Unknown server error\", Ur = class extends $ {\n    constructor(r, t, n){\n        super(t || ho, R(r, !0)), this.name = \"ServerError\", this.code = \"P5006\", this.logs = n;\n    }\n};\nx(Ur, \"ServerError\");\nvar yo = \"Unauthorized, check your connection string\", Nt = class extends $ {\n    constructor(r, t = yo){\n        super(t, R(r, !1)), this.name = \"UnauthorizedError\", this.code = \"P5007\";\n    }\n};\nx(Nt, \"UnauthorizedError\");\nvar Eo = \"Usage exceeded, retry again later\", Lt = class extends $ {\n    constructor(r, t = Eo){\n        super(t, R(r, !0)), this.name = \"UsageExceededError\", this.code = \"P5008\";\n    }\n};\nx(Lt, \"UsageExceededError\");\nasync function uf(e) {\n    let r;\n    try {\n        r = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let t = JSON.parse(r);\n        if (typeof t == \"string\") switch(t){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: t\n                };\n        }\n        if (typeof t == \"object\" && t !== null) {\n            if (\"is_panic\" in t && \"message\" in t && \"error_code\" in t) return {\n                type: \"QueryEngineError\",\n                body: t\n            };\n            if (\"EngineNotStarted\" in t || \"InteractiveTransactionMisrouted\" in t || \"InvalidRequestError\" in t) {\n                let n = Object.values(t)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: t\n                } : {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: t\n        };\n    } catch  {\n        return r === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: r\n        };\n    }\n}\nasync function Ft(e, r) {\n    if (e.ok) return;\n    let t = {\n        clientVersion: r,\n        response: e\n    }, n = await uf(e);\n    if (n.type === \"QueryEngineError\") throw new z(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: r\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Ur(t, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new pr(t);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new It(t);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Ct(t, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new v(i, r, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new At(t, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Ot(t, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new kt(t, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new Nt(t, Gr(yo, n));\n    if (e.status === 404) return new _t(t, Gr(go, n));\n    if (e.status === 429) throw new Lt(t, Gr(Eo, n));\n    if (e.status === 504) throw new Dt(t, Gr(fo, n));\n    if (e.status >= 500) throw new Ur(t, Gr(ho, n));\n    if (e.status >= 400) throw new Rt(t, Gr(mo, n));\n}\nfunction Gr(e, r) {\n    return r.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(r)}`;\n}\nfunction Tl(e) {\n    let r = Math.pow(2, e) * 50, t = Math.ceil(Math.random() * r) - Math.ceil(r / 2), n = r + t;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction Sl(e) {\n    let r = new TextEncoder().encode(e), t = \"\", n = r.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = r[p] << 16 | r[p + 1] << 8 | r[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, t += $e[s] + $e[a] + $e[l] + $e[u];\n    return i == 1 ? (c = r[o], s = (c & 252) >> 2, a = (c & 3) << 4, t += $e[s] + $e[a] + \"==\") : i == 2 && (c = r[o] << 8 | r[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, t += $e[s] + $e[a] + $e[l] + \"=\"), t;\n}\nfunction Rl(e) {\n    if (!!e.generator?.previewFeatures.some((t)=>t.toLowerCase().includes(\"metrics\"))) throw new v(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nvar Al = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Mt = class extends oe {\n    constructor(r, t){\n        super(`Cannot fetch data from service:\n${r}`, R(t, !0)), this.name = \"RequestError\", this.code = \"P5010\";\n    }\n};\nx(Mt, \"RequestError\");\nasync function dr(e, r, t = (n)=>n) {\n    let { clientVersion: n, ...i } = r, o = t(fetch);\n    try {\n        return await o(e, i);\n    } catch (s) {\n        let a = s.message ?? \"Unknown error\";\n        throw new Mt(a, {\n            clientVersion: n,\n            cause: s\n        });\n    }\n}\nvar pf = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, Cl = N(\"prisma:client:dataproxyEngine\");\nasync function df(e, r) {\n    let t = Al[\"@prisma/engines-version\"], n = r.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && pf.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        let [s] = t.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = mf(`<=${a}.${l}.${u}`), p = await dr(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        Cl(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (h) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), h;\n        }\n        return f.version;\n    }\n    throw new cr(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function Il(e, r) {\n    let t = await df(e, r);\n    return Cl(\"version\", t), t;\n}\nfunction mf(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar Dl = 3, $t = N(\"prisma:client:dataproxyEngine\"), qt = class {\n    constructor(r){\n        this.name = \"DataProxyEngine\";\n        Rl(r), this.config = r, this.env = r.env, this.inlineSchema = Sl(r.inlineSchema), this.inlineDatasources = r.inlineDatasources, this.inlineSchemaHash = r.inlineSchemaHash, this.clientVersion = r.clientVersion, this.engineHash = r.engineVersion, this.logEmitter = r.logEmitter, this.tracingHelper = r.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let { apiKey: r, url: t } = this.getURLAndAPIKey();\n            this.host = t.host, this.protocol = t.protocol, this.headerBuilder = new Yn({\n                apiKey: r,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel ?? \"error\",\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await Il(this.host, this.config), $t(\"host\", this.host), $t(\"protocol\", this.protocol);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r) {\n        r?.logs?.length && r.logs.forEach((t)=>{\n            switch(t.level){\n                case \"debug\":\n                case \"trace\":\n                    $t(t);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(t.level, {\n                            timestamp: po(t.timestamp),\n                            message: t.attributes.message ?? \"\",\n                            target: t.target ?? \"BinaryEngine\"\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: t.attributes.query ?? \"\",\n                            timestamp: po(t.timestamp),\n                            duration: t.attributes.duration_ms ?? 0,\n                            params: t.attributes.params ?? \"\",\n                            target: t.target ?? \"BinaryEngine\"\n                        });\n                        break;\n                    }\n                default:\n                    t.level;\n            }\n        }), r?.traces?.length && this.tracingHelper.dispatchEngineSpans(r.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(r) {\n        return await this.start(), `${this.protocol}//${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r}`;\n    }\n    async uploadSchema() {\n        let r = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r, async ()=>{\n            let t = await dr(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            t.ok || $t(\"schema response status\", t.status);\n            let n = await Ft(t, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(r, { traceparent: t, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: r,\n            traceparent: t,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(r, { traceparent: t, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = Mr(r, n);\n        return (await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: t\n        })).map((l)=>(l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));\n    }\n    requestInternal({ body: r, traceparent: t, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await dr(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: t,\n                        transactionId: i?.id\n                    }),\n                    body: JSON.stringify(r),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || $t(\"graphql response status\", a.status), await this.handleError(await Ft(a, this.clientVersion));\n                let l = await a.json();\n                if (l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l) throw this.convertProtocolErrorsToClientError(l.errors);\n                return \"batchResult\" in l ? l.batchResult : l;\n            }\n        });\n    }\n    async transaction(r, t, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[r]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (r === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await dr(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(l, this.clientVersion));\n                    let u = await l.json(), { extensions: c } = u;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, d = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: d\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${r}`;\n                    o(s);\n                    let a = await dr(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(a, this.clientVersion));\n                    let l = await a.json(), { extensions: u } = l;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    getURLAndAPIKey() {\n        return Pl({\n            clientVersion: this.clientVersion,\n            env: this.env,\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources\n        });\n    }\n    metrics() {\n        throw new cr(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r) {\n        for(let t = 0;; t++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${t})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await r.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof oe) || !i.isRetryable) throw i;\n                if (t >= Dl) throw i instanceof Br ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${t + 1}/${Dl} failed for ${r.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await Tl(t);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(r) {\n        if (r instanceof pr) throw await this.uploadSchema(), new Br({\n            clientVersion: this.clientVersion,\n            cause: r\n        });\n        if (r) throw r;\n    }\n    convertProtocolErrorsToClientError(r) {\n        return r.length === 1 ? $r(r[0], this.config.clientVersion, this.config.activeProvider) : new V(JSON.stringify(r), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction Ol(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar wo = O(__webpack_require__(/*! node:os */ \"node:os\")), kl = O(__webpack_require__(/*! node:path */ \"node:path\"));\nvar bo = Symbol(\"PrismaLibraryEngineCache\");\nfunction ff() {\n    let e = globalThis;\n    return e[bo] === void 0 && (e[bo] = {}), e[bo];\n}\nfunction gf(e) {\n    let r = ff();\n    if (r[e] !== void 0) return r[e];\n    let t = kl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = wo.default.constants.dlopen.RTLD_LAZY | wo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, t, i), r[e] = n.exports, n.exports;\n}\nvar _l = {\n    async loadLibrary (e) {\n        let r = await fi(), t = await ml(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>gf(t));\n        } catch (n) {\n            let i = Ai({\n                e: n,\n                platformInfo: r,\n                id: t\n            });\n            throw new v(i, e.clientVersion);\n        }\n    }\n};\nvar xo, Nl = {\n    async loadLibrary (e) {\n        let { clientVersion: r, adapter: t, engineWasm: n } = e;\n        if (t === void 0) throw new v(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${Kn().prettyName})`, r);\n        if (n === void 0) throw new v(\"WASM engine was unexpectedly `undefined`\", r);\n        xo === void 0 && (xo = (async ()=>{\n            let o = await n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new v(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a), u = l.exports.__wbindgen_start;\n            return o.__wbg_set_wasm(l.exports), u(), o.QueryEngine;\n        })());\n        let i = await xo;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar hf = \"P2036\", Re = N(\"prisma:client:libraryEngine\");\nfunction yf(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction Ef(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar Ll = [\n    ...li,\n    \"native\"\n], bf = 0xffffffffffffffffn, Po = 1n;\nfunction wf() {\n    let e = Po++;\n    return Po > bf && (Po = 1n), e;\n}\nvar Qr = class {\n    constructor(r, t){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = t ?? _l, r.engineWasm !== void 0 && (this.libraryLoader = t ?? Nl), this.config = r, this.libraryStarted = !1, this.logQueries = r.logQueries ?? !1, this.logLevel = r.logLevel ?? \"error\", this.logEmitter = r.logEmitter, this.datamodel = r.inlineSchema, this.tracingHelper = r.tracingHelper, r.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(r.overrideDatasources)[0], i = r.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(r) {\n        return {\n            applyPendingMigrations: r.applyPendingMigrations?.bind(r),\n            commitTransaction: this.withRequestId(r.commitTransaction.bind(r)),\n            connect: this.withRequestId(r.connect.bind(r)),\n            disconnect: this.withRequestId(r.disconnect.bind(r)),\n            metrics: r.metrics?.bind(r),\n            query: this.withRequestId(r.query.bind(r)),\n            rollbackTransaction: this.withRequestId(r.rollbackTransaction.bind(r)),\n            sdlSchema: r.sdlSchema?.bind(r),\n            startTransaction: this.withRequestId(r.startTransaction.bind(r)),\n            trace: r.trace.bind(r),\n            free: r.free?.bind(r)\n        };\n    }\n    withRequestId(r) {\n        return async (...t)=>{\n            let n = wf().toString();\n            try {\n                return await r(...t, n);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i = await this.engine?.trace(n);\n                    if (i) {\n                        let o = JSON.parse(i);\n                        this.tracingHelper.dispatchEngineSpans(o.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(r, t, n) {\n        await this.start();\n        let i = await this.adapterPromise, o = JSON.stringify(t), s;\n        if (r === \"start\") {\n            let l = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            s = await this.engine?.startTransaction(l, o);\n        } else r === \"commit\" ? s = await this.engine?.commitTransaction(n.id, o) : r === \"rollback\" && (s = await this.engine?.rollbackTransaction(n.id, o));\n        let a = this.parseEngineResponse(s);\n        if (xf(a)) {\n            let l = this.getExternalAdapterError(a, i?.errorRegistry);\n            throw l ? l.error : new z(a.message, {\n                code: a.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a.meta\n            });\n        } else if (typeof a.message == \"string\") throw new V(a.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return a;\n    }\n    async instantiateLibrary() {\n        if (Re(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        ai(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let r = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ir());\n            if (!Ll.includes(r)) throw new v(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(W(r))}. Possible binaryTargets: ${qe(Ll.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r;\n        }\n    }\n    parseEngineResponse(r) {\n        if (!r) throw new V(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r);\n        } catch  {\n            throw new V(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r = new WeakRef(this);\n                this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(tn));\n                let t = await this.adapterPromise;\n                t && Re(\"Using driver adapter: %O\", t), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n)=>{\n                    r.deref()?.logger(n);\n                }, t));\n            } catch (r) {\n                let t = r, n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new v(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(r) {\n        let t = this.parseEngineResponse(r);\n        t && (t.level = t?.level.toLowerCase() ?? \"unknown\", yf(t) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: t.query,\n            params: t.params,\n            duration: Number(t.duration_ms),\n            target: t.module_path\n        }) : Ef(t) ? this.loggerRustPanic = new ae(vo(this, `${t.message}: ${t.reason} in ${t.file}:${t.line}:${t.column}`), this.config.clientVersion) : this.logEmitter.emit(t.level, {\n            timestamp: new Date,\n            message: t.message,\n            target: t.module_path\n        }));\n    }\n    parseInitError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    parseRequestError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (this.libraryInstantiationPromise || (this.libraryInstantiationPromise = this.instantiateLibrary()), await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Re(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r = async ()=>{\n            Re(\"library starting\");\n            try {\n                let t = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(t)), this.libraryStarted = !0, this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(tn)), await this.adapterPromise, Re(\"library started\");\n            } catch (t) {\n                let n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new v(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", r), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryInstantiationPromise, await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Re(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) {\n            await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0;\n            return;\n        }\n        let r = async ()=>{\n            await new Promise((n)=>setImmediate(n)), Re(\"library stopping\");\n            let t = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(t)), this.engine?.free && this.engine.free(), this.engine = void 0, this.libraryStarted = !1, this.libraryStoppingPromise = void 0, this.libraryInstantiationPromise = void 0, await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0, Re(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", r), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r) {\n        return this.library?.debugPanic(r);\n    }\n    async request(r, { traceparent: t, interactiveTransaction: n }) {\n        Re(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: t\n        }), o = JSON.stringify(r);\n        try {\n            await this.start();\n            let s = await this.adapterPromise;\n            this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let a = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], s?.errorRegistry) : new V(JSON.stringify(a.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a\n            };\n        } catch (s) {\n            if (s instanceof v) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new ae(vo(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new V(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r, { transaction: t, traceparent: n }) {\n        Re(\"requestBatch\");\n        let i = Mr(r, t);\n        await this.start();\n        let o = await this.adapterPromise;\n        this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine?.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), Ol(t));\n        let s = await this.executingQueryPromise, a = this.parseEngineResponse(s);\n        if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], o?.errorRegistry) : new V(JSON.stringify(a.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l, errors: u } = a;\n        if (Array.isArray(l)) return l.map((c)=>c.errors && c.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c.errors[0], o?.errorRegistry) : {\n                data: c\n            });\n        throw u && u.length === 1 ? new Error(u[0].error) : new Error(JSON.stringify(a));\n    }\n    buildQueryError(r, t) {\n        if (r.user_facing_error.is_panic) return new ae(vo(this, r.user_facing_error.message), this.config.clientVersion);\n        let n = this.getExternalAdapterError(r.user_facing_error, t);\n        return n ? n.error : $r(r, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(r, t) {\n        if (r.error_code === hf && t) {\n            let n = r.meta?.id;\n            ln(typeof n == \"number\", \"Malformed external JS error received from the engine\");\n            let i = t.consumeError(n);\n            return ln(i, \"External error with reported id was not registered\"), i;\n        }\n    }\n    async metrics(r) {\n        await this.start();\n        let t = await this.engine.metrics(JSON.stringify(r));\n        return r.format === \"prometheus\" ? t : this.parseEngineResponse(t);\n    }\n};\nfunction xf(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction vo(e, r) {\n    return bl({\n        binaryTarget: e.binaryTarget,\n        title: r,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction Fl({ url: e, adapter: r, copyEngine: t, targetBuildType: n }) {\n    let i = [], o = [], s = (g)=>{\n        i.push({\n            _tag: \"warning\",\n            value: g\n        });\n    }, a = (g)=>{\n        let I = g.join(`\n`);\n        o.push({\n            _tag: \"error\",\n            value: I\n        });\n    }, l = !!e?.startsWith(\"prisma://\"), u = an(e), c = !!r, p = l || u;\n    !c && t && p && n !== \"client\" && n !== \"wasm-compiler-edge\" && s([\n        \"recommend--no-engine\",\n        \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\"\n    ]);\n    let d = p || !t;\n    c && (d || n === \"edge\") && (n === \"edge\" ? a([\n        \"Prisma Client was configured to use the `adapter` option but it was imported via its `/edge` endpoint.\",\n        \"Please either remove the `/edge` endpoint or remove the `adapter` from the Prisma Client constructor.\"\n    ]) : t ? l && a([\n        \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n        \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n    ]) : a([\n        \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n        \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n    ]));\n    let f = {\n        accelerate: d,\n        ppg: u,\n        driverAdapters: c\n    };\n    function h(g) {\n        return g.length > 0;\n    }\n    return h(o) ? {\n        ok: !1,\n        diagnostics: {\n            warnings: i,\n            errors: o\n        },\n        isUsing: f\n    } : {\n        ok: !0,\n        diagnostics: {\n            warnings: i\n        },\n        isUsing: f\n    };\n}\nfunction Ml({ copyEngine: e = !0 }, r) {\n    let t;\n    try {\n        t = jr({\n            inlineDatasources: r.inlineDatasources,\n            overrideDatasources: r.overrideDatasources,\n            env: {\n                ...r.env,\n                ...process.env\n            },\n            clientVersion: r.clientVersion\n        });\n    } catch  {}\n    let { ok: n, isUsing: i, diagnostics: o } = Fl({\n        url: t,\n        adapter: r.adapter,\n        copyEngine: e,\n        targetBuildType: \"library\"\n    });\n    for (let p of o.warnings)at(...p.value);\n    if (!n) {\n        let p = o.errors[0];\n        throw new Z(p.value, {\n            clientVersion: r.clientVersion\n        });\n    }\n    let s = br(r.generator), a = s === \"library\", l = s === \"binary\", u = s === \"client\", c = (i.accelerate || i.ppg) && !i.driverAdapters;\n    return i.accelerate ? new qt(r) : (i.driverAdapters, a ? new Qr(r) : (i.accelerate, new Qr(r)));\n}\nfunction $l({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar ql = (e)=>({\n        command: e\n    });\nvar Vl = (e)=>e.strings.reduce((r, t, n)=>`${r}@P${n}${t}`);\nfunction Wr(e) {\n    try {\n        return jl(e, \"fast\");\n    } catch  {\n        return jl(e, \"slow\");\n    }\n}\nfunction jl(e, r) {\n    return JSON.stringify(e.map((t)=>Ul(t, r)));\n}\nfunction Ul(e, r) {\n    if (Array.isArray(e)) return e.map((t)=>Ul(t, r));\n    if (typeof e == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    };\n    if (Pr(e)) return {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    };\n    if (Fe.isDecimal(e)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    };\n    if (Buffer.isBuffer(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    };\n    if (Pf(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    return typeof e == \"object\" && r === \"slow\" ? Gl(e) : e;\n}\nfunction Pf(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Gl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(Bl);\n    let r = {};\n    for (let t of Object.keys(e))r[t] = Bl(e[t]);\n    return r;\n}\nfunction Bl(e) {\n    return typeof e == \"bigint\" ? e.toString() : Gl(e);\n}\nvar vf = /^(\\s*alter\\s)/i, Ql = N(\"prisma:client\");\nfunction To(e, r, t, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && t.length > 0 && vf.exec(r)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar So = ({ clientMethod: e, activeProvider: r })=>(t)=>{\n        let n = \"\", i;\n        if (Vn(t)) n = t.sql, i = {\n            values: Wr(t.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(t)) {\n            let [o, ...s] = t;\n            n = o, i = {\n                values: Wr(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(r){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = t.sql, i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = t.text, i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = Vl(t), i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${r} provider does not support ${e}`);\n        }\n        return i?.values ? Ql(`prisma.${e}(${n}, ${i.values})`) : Ql(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Wl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [r, ...t] = e;\n        return new ie(r, t);\n    }\n}, Jl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction Ro(e) {\n    return function(t, n) {\n        let i, o = (s = e)=>{\n            try {\n                return s === void 0 || s?.kind === \"itx\" ? i ??= Kl(t(s)) : Kl(t(s));\n            } catch (a) {\n                return Promise.reject(a);\n            }\n        };\n        return {\n            get spec () {\n                return n;\n            },\n            then (s, a) {\n                return o().then(s, a);\n            },\n            catch (s) {\n                return o().catch(s);\n            },\n            finally (s) {\n                return o().finally(s);\n            },\n            requestTransaction (s) {\n                let a = o(s);\n                return a.requestTransaction ? a.requestTransaction(s) : a;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Kl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Tf = xi.split(\".\")[0], Sf = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e, r) {\n        return r();\n    }\n}, Ao = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(r) {\n        return this.getGlobalTracingHelper().getTraceParent(r);\n    }\n    dispatchEngineSpans(r) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(r);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(r, t) {\n        return this.getGlobalTracingHelper().runInChildSpan(r, t);\n    }\n    getGlobalTracingHelper() {\n        let r = globalThis[`V${Tf}_PRISMA_INSTRUMENTATION`], t = globalThis.PRISMA_INSTRUMENTATION;\n        return r?.helper ?? t?.helper ?? Sf;\n    }\n};\nfunction Hl() {\n    return new Ao;\n}\nfunction Yl(e, r = ()=>{}) {\n    let t, n = new Promise((i)=>t = i);\n    return {\n        then (i) {\n            return --e === 0 && t(r()), i?.(n);\n        }\n    };\n}\nfunction zl(e) {\n    return typeof e == \"string\" ? e : e.reduce((r, t)=>{\n        let n = typeof t == \"string\" ? t : t.level;\n        return n === \"query\" ? r : r && (t === \"info\" || r === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nfunction zn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction Zl(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let r = [];\n    return e.modelName && r.push(e.modelName), e.query.arguments && r.push(Co(e.query.arguments)), r.push(Co(e.query.selection)), r.join(\"\");\n}\nfunction Co(e) {\n    return `(${Object.keys(e).sort().map((t)=>{\n        let n = e[t];\n        return typeof n == \"object\" && n !== null ? `(${t} ${Co(n)})` : t;\n    }).join(\" \")})`;\n}\nvar Rf = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Io(e) {\n    return Rf[e];\n}\nvar Zn = class {\n    constructor(r){\n        this.tickActive = !1;\n        this.options = r;\n        this.batches = {};\n    }\n    request(r) {\n        let t = this.options.batchBy(r);\n        return t ? (this.batches[t] || (this.batches[t] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[t].push({\n                request: r,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(r);\n    }\n    dispatchBatches() {\n        for(let r in this.batches){\n            let t = this.batches[r];\n            delete this.batches[r], t.length === 1 ? this.options.singleLoader(t[0].request).then((n)=>{\n                n instanceof Error ? t[0].reject(n) : t[0].resolve(n);\n            }).catch((n)=>{\n                t[0].reject(n);\n            }) : (t.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(t.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < t.length; i++)t[i].reject(n);\n                else for(let i = 0; i < t.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? t[i].reject(o) : t[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < t.length; i++)t[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction mr(e, r) {\n    if (r === null) return r;\n    switch(e){\n        case \"bigint\":\n            return BigInt(r);\n        case \"bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"decimal\":\n            return new Fe(r);\n        case \"datetime\":\n        case \"date\":\n            return new Date(r);\n        case \"time\":\n            return new Date(`1970-01-01T${r}Z`);\n        case \"bigint-array\":\n            return r.map((t)=>mr(\"bigint\", t));\n        case \"bytes-array\":\n            return r.map((t)=>mr(\"bytes\", t));\n        case \"decimal-array\":\n            return r.map((t)=>mr(\"decimal\", t));\n        case \"datetime-array\":\n            return r.map((t)=>mr(\"datetime\", t));\n        case \"date-array\":\n            return r.map((t)=>mr(\"date\", t));\n        case \"time-array\":\n            return r.map((t)=>mr(\"time\", t));\n        default:\n            return r;\n    }\n}\nfunction Xn(e) {\n    let r = [], t = Af(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...t\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = mr(e.types[s], i[s]);\n        r.push(o);\n    }\n    return r;\n}\nfunction Af(e) {\n    let r = {};\n    for(let t = 0; t < e.columns.length; t++)r[e.columns[t]] = null;\n    return r;\n}\nvar Cf = N(\"prisma:client:request_handler\"), ei = class {\n    constructor(r, t){\n        this.logEmitter = t, this.client = r, this.dataloader = new Zn({\n            batchLoader: rl(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>Io(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: If(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? Xl(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: Io(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : Zl(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(r) {\n        try {\n            return await this.dataloader.request(r);\n        } catch (t) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = r;\n            this.handleAndLogRequestError({\n                error: t,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: r.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: r, unpacker: t }, n) {\n        let i = n?.data, o = this.unpack(i, r, t);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o\n        } : o;\n    }\n    handleAndLogRequestError(r) {\n        try {\n            this.handleRequestError(r);\n        } catch (t) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: t.message,\n                target: r.clientMethod,\n                timestamp: new Date\n            }), t;\n        }\n    }\n    handleRequestError({ error: r, clientMethod: t, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Cf(r), Df(r, i)) throw r;\n        if (r instanceof z && Of(r)) {\n            let u = eu(r.meta);\n            Nn({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: t,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = r.message;\n        if (n && (l = Tn({\n            callsite: n,\n            originalMethod: t,\n            isPanic: r.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), r.code) {\n            let u = s ? {\n                modelName: s,\n                ...r.meta\n            } : r.meta;\n            throw new z(l, {\n                code: r.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: r.batchRequestIdx\n            });\n        } else {\n            if (r.isPanic) throw new ae(l, this.client._clientVersion);\n            if (r instanceof V) throw new V(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: r.batchRequestIdx\n            });\n            if (r instanceof v) throw new v(l, this.client._clientVersion);\n            if (r instanceof ae) throw new ae(l, this.client._clientVersion);\n        }\n        throw r.clientVersion = this.client._clientVersion, r;\n    }\n    sanitizeMessage(r) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? wr(r) : r;\n    }\n    unpack(r, t, n) {\n        if (!r || (r.data && (r = r.data), !r)) return r;\n        let i = Object.keys(r)[0], o = Object.values(r)[0], s = t.filter((u)=>u !== \"select\" && u !== \"include\"), a = ao(o, s), l = i === \"queryRaw\" ? Xn(a) : Vr(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction If(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Xl(e)\n        };\n        ar(e, \"Unknown transaction kind\");\n    }\n}\nfunction Xl(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction Df(e, r) {\n    return zn(e) && r?.kind === \"batch\" && e.batchRequestIdx !== r.index;\n}\nfunction Of(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction eu(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(eu)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...r] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: r\n        };\n    }\n    return e;\n}\nvar ru = xl;\nvar su = O(Ki());\nvar _ = class extends Error {\n    constructor(r){\n        super(r + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(_, \"PrismaClientConstructorValidationError\");\nvar tu = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], nu = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], iu = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], kf = {\n    datasources: (e, { datasourceNames: r })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new _(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [t, n] of Object.entries(e)){\n                if (!r.includes(t)) {\n                    let i = Jr(t, r) || ` Available datasources: ${r.join(\", \")}`;\n                    throw new _(`Unknown datasource ${t} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new _(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new _(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new _(`Invalid value ${JSON.stringify(o)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, r)=>{\n        if (!e && br(r.generator) === \"client\") throw new _('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e !== null) {\n            if (e === void 0) throw new _('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n            if (br(r.generator) === \"binary\") throw new _('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n        }\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new _(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new _(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!nu.includes(e)) {\n                let r = Jr(e, nu);\n                throw new _(`Invalid errorFormat ${e} provided to PrismaClient constructor.${r}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new _(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function r(t) {\n            if (typeof t == \"string\" && !iu.includes(t)) {\n                let n = Jr(t, iu);\n                throw new _(`Invalid log level \"${t}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let t of e){\n            r(t);\n            let n = {\n                level: r,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Jr(i, o);\n                        throw new _(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (t && typeof t == \"object\") for (let [i, o] of Object.entries(t))if (n[i]) n[i](o);\n            else throw new _(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let r = e.maxWait;\n        if (r != null && r <= 0) throw new _(`Invalid value ${r} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let t = e.timeout;\n        if (t != null && t <= 0) throw new _(`Invalid value ${t} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, r)=>{\n        if (typeof e != \"object\") throw new _('\"omit\" option is expected to be an object.');\n        if (e === null) throw new _('\"omit\" option can not be `null`');\n        let t = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = Nf(n, r.runtimeDataModel);\n            if (!o) {\n                t.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    t.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    t.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && t.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (t.length > 0) throw new _(Lf(e, t));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let r = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new _(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [t] of Object.entries(e))if (!r.includes(t)) {\n            let n = Jr(t, r);\n            throw new _(`Invalid property ${JSON.stringify(t)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction au(e, r) {\n    for (let [t, n] of Object.entries(e)){\n        if (!tu.includes(t)) {\n            let i = Jr(t, tu);\n            throw new _(`Unknown property ${t} provided to PrismaClient constructor.${i}`);\n        }\n        kf[t](n, r);\n    }\n    if (e.datasourceUrl && e.datasources) throw new _('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Jr(e, r) {\n    if (r.length === 0 || typeof e != \"string\") return \"\";\n    let t = _f(e, r);\n    return t ? ` Did you mean \"${t}\"?` : \"\";\n}\nfunction _f(e, r) {\n    if (r.length === 0) return null;\n    let t = r.map((i)=>({\n            value: i,\n            distance: (0, su.default)(e, i)\n        }));\n    t.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = t[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction Nf(e, r) {\n    return ou(r.models, e) ?? ou(r.types, e);\n}\nfunction ou(e, r) {\n    let t = Object.keys(e).find((n)=>We(n) === r);\n    if (t) return e[t];\n}\nfunction Lf(e, r) {\n    let t = _r(e);\n    for (let o of r)switch(o.kind){\n        case \"UnknownModel\":\n            t.arguments.getField(o.modelKey)?.markAsError(), t.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            t.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = _n(t, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction lu(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((r, t)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? t(i) : r(n)));\n        }, l = (u)=>{\n            o || (o = !0, t(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!zn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar rr = N(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar Ff = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, Mf = Symbol.for(\"prisma.client.transaction.id\"), $f = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction fu(e) {\n    class r {\n        constructor(n){\n            this._originalClient = this;\n            this._createPrismaPromise = Ro();\n            this.$metrics = new Lr(this);\n            this.$extends = Wa;\n            e = n?.__internal?.configOverride?.(e) ?? e, sl(e), n && au(n, e);\n            let i = new du.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Nr.empty(), this._previewFeatures = $l(e), this._clientVersion = e.clientVersion ?? ru, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Hl();\n            let o = e.relativeEnvPaths && {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && ri.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && ri.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = n.adapter;\n                let l = e.activeProvider === \"postgresql\" || e.activeProvider === \"cockroachdb\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new v(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new v(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && o && st(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && N.enable(\"prisma:client\");\n                let p = ri.default.resolve(e.dirname, e.relativePath);\n                mu.default.existsSync(p) || (p = e.dirname), rr(\"dirname\", e.dirname), rr(\"relativePath\", e.relativePath), rr(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && zl(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    compilerWasm: e.compilerWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: al(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: jr,\n                        getBatchRequestPayload: Mr,\n                        prismaGraphQLToJSError: $r,\n                        PrismaClientUnknownRequestError: V,\n                        PrismaClientInitializationError: v,\n                        PrismaClientKnownRequestError: z,\n                        debug: N(\"prisma:client:accelerateEngine\"),\n                        engineVersion: cu.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, rr(\"clientVersion\", e.clientVersion), this._engine = Ml(e, this._engineConfig), this._requestHandler = new ei(this, i), l.log) for (let f of l.log){\n                    let h = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    h && this.$on(h, (g)=>{\n                        nt.log(`${nt.tags[h] ?? \"\"}`, g.message || g.query);\n                    });\n                }\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = vt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $on(n, i) {\n            return n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Uo();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: So({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = uu(n, i);\n                    return To(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new Z(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(To(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new Z(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: ql,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: So({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...uu(n, i));\n                throw new Z(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new Z(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = $f.nextId(), s = Yl(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return lu(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return he(vt(he(Qa(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                re(\"_createPrismaPromise\", ()=>Ro(n)),\n                re(Mf, ()=>n.id)\n            ])), [\n                Fr(Ya)\n            ]);\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? Ff, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = async (l)=>{\n                let { runInTransaction: u, args: c, ...p } = l, d = {\n                    ...n,\n                    ...p\n                };\n                c && (d.args = i.middlewareArgsToRequestArgs(c)), n.transaction !== void 0 && u === !1 && delete d.transaction;\n                let f = await el(this, d);\n                return d.model ? Ha({\n                    result: f,\n                    modelName: d.model,\n                    args: d.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : f;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new pu.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>a(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let h = {\n                    name: \"serialize\"\n                }, g = this._tracingHelper.runInChildSpan(h, ()=>$n({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return N.enabled(\"prisma:client\") && (rr(\"Prisma Client call:\"), rr(`prisma.${i}(${Na(n)})`), rr(\"Generated request:\"), rr(JSON.stringify(g, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: g,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f\n                });\n            } catch (h) {\n                throw h.clientVersion = this._clientVersion, h;\n            }\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return r;\n}\nfunction uu(e, r) {\n    return qf(e) ? [\n        new ie(e, r),\n        Wl\n    ] : [\n        e,\n        Jl\n    ];\n}\nfunction qf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar Vf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction gu(e) {\n    return new Proxy(e, {\n        get (r, t) {\n            if (t in r) return r[t];\n            if (!Vf.has(t)) throw new TypeError(`Invalid enum value: ${String(t)}`);\n        }\n    });\n}\nfunction hu(e) {\n    st(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.5.0\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/generated/prisma/runtime/library.js\n");

/***/ }),

/***/ "(rsc)/./src/server/db.ts":
/*!**************************!*\
  !*** ./src/server/db.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generated/prisma */ \"(rsc)/./src/generated/prisma/index.js\");\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_generated_prisma__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = global.prismaGlobal ?? new _generated_prisma__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    global.prismaGlobal = prisma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2RiLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtRDtBQU81QyxNQUFNQyxTQUF1QkMsT0FBT0MsWUFBWSxJQUFJLElBQUlILDJEQUFZQSxHQUFHO0FBRTlFLElBQUlJLElBQXFDLEVBQUU7SUFDekNGLE9BQU9DLFlBQVksR0FBR0Y7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQW51cmFnIFNpbmdoIFRoYWt1clxcQ2FzY2FkZVByb2plY3RzXFxPcmF0aW9uQk9UXFxzcmNcXHNlcnZlclxcZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIi4uL2dlbmVyYXRlZC9wcmlzbWFcIjtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdmFyXHJcbiAgdmFyIHByaXNtYUdsb2JhbDogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hOiBQcmlzbWFDbGllbnQgPSBnbG9iYWwucHJpc21hR2xvYmFsID8/IG5ldyBQcmlzbWFDbGllbnQoKTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICBnbG9iYWwucHJpc21hR2xvYmFsID0gcHJpc21hO1xyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInByaXNtYSIsImdsb2JhbCIsInByaXNtYUdsb2JhbCIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/server/db.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/routers/chat.ts":
/*!************************************!*\
  !*** ./src/server/routers/chat.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatRouter: () => (/* binding */ chatRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/tracked-BOPN0_Sr.mjs\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./src/server/trpc.ts\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../db */ \"(rsc)/./src/server/db.ts\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\n\n\n\nconst chatRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    listSessions: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.object({\n        cursor: zod__WEBPACK_IMPORTED_MODULE_3__.string().nullish(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_3__.number().min(1).max(50).default(20)\n    }).default({\n        limit: 20\n    })).query(async ({ input })=>{\n        const limit = input.limit ?? 20;\n        const sessions = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.chatSession.findMany({\n            orderBy: {\n                createdAt: \"desc\"\n            },\n            take: limit + 1,\n            cursor: input.cursor ? {\n                id: input.cursor\n            } : undefined,\n            select: {\n                id: true,\n                title: true,\n                createdAt: true,\n                updatedAt: true\n            }\n        });\n        let nextCursor = undefined;\n        if (sessions.length > limit) {\n            const next = sessions.pop();\n            nextCursor = next?.id;\n        }\n        return {\n            items: sessions,\n            nextCursor\n        };\n    }),\n    createSession: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.object({\n        title: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1)\n    }).nullish()).mutation(async ({ input })=>{\n        const title = input?.title ?? \"New session\";\n        const session = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.chatSession.create({\n            data: {\n                title\n            }\n        });\n        return session;\n    }),\n    deleteSession: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.object({\n        sessionId: zod__WEBPACK_IMPORTED_MODULE_3__.string()\n    })).mutation(async ({ input })=>{\n        // Delete the session and all its messages (cascade delete)\n        await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.chatSession.delete({\n            where: {\n                id: input.sessionId\n            }\n        });\n        return {\n            success: true\n        };\n    }),\n    getMessages: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.object({\n        sessionId: zod__WEBPACK_IMPORTED_MODULE_3__.string(),\n        cursor: zod__WEBPACK_IMPORTED_MODULE_3__.string().nullish(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_3__.number().min(1).max(100).default(50)\n    })).query(async ({ input })=>{\n        const { sessionId, cursor, limit } = input;\n        // Verify session exists\n        const session = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.chatSession.findUnique({\n            where: {\n                id: sessionId\n            },\n            select: {\n                id: true\n            }\n        });\n        if (!session) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_4__.TRPCError({\n                code: 'NOT_FOUND',\n                message: 'Session not found'\n            });\n        }\n        // Fetch messages\n        const messages = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.findMany({\n            where: {\n                sessionId\n            },\n            orderBy: {\n                createdAt: 'asc'\n            },\n            take: limit + 1,\n            cursor: cursor ? {\n                id: cursor\n            } : undefined\n        });\n        // Ensure we always return an array\n        const messageList = Array.isArray(messages) ? messages : [];\n        let nextCursor = undefined;\n        if (messageList.length > limit) {\n            const nextItem = messageList.pop();\n            nextCursor = nextItem?.id;\n        }\n        // Return the array directly instead of an object\n        return messageList;\n    }),\n    sendMessage: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure// Accept loosely to work around any client/batch serialization quirks\n    .input(zod__WEBPACK_IMPORTED_MODULE_3__.any()).mutation(async ({ input })=>{\n        console.log(\"sendMessage raw input:\", input);\n        let sessionId;\n        let content;\n        // Normalize various possible shapes due to batching/serialization\n        const unwrapPossibleWrappers = (val)=>{\n            if (Array.isArray(val)) return val[0];\n            if (val && typeof val === \"object\") {\n                const obj = val;\n                if (\"input\" in obj) return obj.input;\n                if (\"json\" in obj) return obj.json;\n                if (\"0\" in obj) return obj[\"0\"]; // some clients send index keys in batch\n            }\n            return val;\n        };\n        const normalized = unwrapPossibleWrappers(input);\n        if (typeof normalized === \"string\") {\n            try {\n                const parsed = JSON.parse(normalized);\n                sessionId = parsed?.sessionId;\n                content = parsed?.content;\n            } catch  {\n            // ignore and fall through\n            }\n        } else if (typeof normalized === \"object\" && normalized !== null) {\n            sessionId = normalized.sessionId;\n            content = normalized.content;\n        }\n        // Require content, but if sessionId is missing, auto-create a session\n        if (!content || typeof content !== \"string\" || !content.trim()) {\n            console.error(\"sendMessage invalid input parsed:\", {\n                sessionId,\n                content,\n                input\n            });\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_4__.TRPCError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid input for sendMessage\"\n            });\n        }\n        if (!sessionId || typeof sessionId !== \"string\") {\n            const derivedTitle = content.length > 48 ? content.slice(0, 48) + \"…\" : content;\n            const createdSession = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.chatSession.create({\n                data: {\n                    title: derivedTitle || \"New session\"\n                }\n            });\n            sessionId = createdSession.id;\n        }\n        const createdUserMessage = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n            data: {\n                sessionId,\n                role: \"user\",\n                content\n            }\n        });\n        const history = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.findMany({\n            where: {\n                sessionId\n            },\n            orderBy: {\n                createdAt: \"asc\"\n            },\n            select: {\n                role: true,\n                content: true\n            }\n        });\n        // Detect if the user is writing in Hindi\n        const isHindi = /[\\u0900-\\u097F]/.test(content);\n        const systemPrompt = isHindi ? \"आप एक सहायक, पेशेवर करियर काउंसलर हैं। संरचित, कार्य योग्य सलाह दें। उपयोगकर्ता के संदेश को दोहराएं या पुनः व्याख्या न करें; केवल नई मार्गदर्शन के साथ उत्तर दें। हिंदी में बात करें।\" : \"You are a helpful, professional career counsellor. Provide structured, actionable advice. Do not repeat or rephrase the user's message; respond with new guidance only. If the user writes in Hindi, respond in Hindi. If they write in English, respond in English.\";\n        // If forced mock or no provider key, return a local mock response so the UI still works\n        const hasOpenAIKey = typeof process.env.OPENAI_API_KEY === \"string\" && process.env.OPENAI_API_KEY.trim().length > 0;\n        const geminiKey = (process.env.GOOGLE_API_KEY || process.env.GEMINI_API_KEY || \"\").trim();\n        const forceMock = process.env.OPENAI_USE_MOCK === \"true\";\n        console.log(\"sendMessage providers:\", {\n            openai: hasOpenAIKey,\n            gemini: !!geminiKey,\n            forceMock\n        });\n        if (forceMock || !hasOpenAIKey && !geminiKey) {\n            const lastUser = history.filter((m)=>m.role === \"user\").slice(-1)[0]?.content ?? content;\n            const mock = isHindi ? `मॉक प्रतिक्रिया (AI उपलब्ध नहीं)। आपका संदेश: \"${lastUser}\"\\n\\n- यह एक स्थानीय प्लेसहोल्डर है जबकि AI अक्षम है या कोटा समाप्त हो गया है।\\n- वास्तविक उत्तर पाने के लिए OPENAI_API_KEY जोड़ें या ठीक करें और OPENAI_USE_MOCK हटाएं।` : `Mock response (no AI available). Your message: \"${lastUser}\"\\n\\n- This is a local placeholder while AI is disabled or quota is exceeded.\\n- Add or fix OPENAI_API_KEY and remove OPENAI_USE_MOCK to get real answers.`;\n            const assistant = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                data: {\n                    sessionId,\n                    role: \"assistant\",\n                    content: mock\n                }\n            });\n            return {\n                sessionId,\n                user: createdUserMessage,\n                assistant\n            };\n        }\n        try {\n            // Prefer Gemini if configured, otherwise use OpenAI\n            if (geminiKey) {\n                const geminiModel = process.env.GEMINI_MODEL || \"gemini-1.5-flash\";\n                const url = `https://generativelanguage.googleapis.com/v1/models/${geminiModel}:generateContent?key=${encodeURIComponent(geminiKey)}`;\n                // Map history to Gemini's roles: user/model\n                const geminiContents = [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: systemPrompt\n                            }\n                        ]\n                    },\n                    ...history.map((m)=>({\n                            role: m.role === \"assistant\" ? \"model\" : \"user\",\n                            parts: [\n                                {\n                                    text: m.content\n                                }\n                            ]\n                        }))\n                ];\n                const geminiRes = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        contents: geminiContents,\n                        generationConfig: {\n                            temperature: 0.4\n                        }\n                    })\n                });\n                if (!geminiRes.ok) {\n                    const errText = await geminiRes.text();\n                    throw new Error(`Gemini error ${geminiRes.status}: ${errText}`);\n                }\n                const geminiJson = await geminiRes.json();\n                const parts = geminiJson?.candidates?.[0]?.content?.parts ?? [];\n                const aiMessage = parts.map((p)=>p?.text).filter(Boolean).join(\"\\n\");\n                console.log(\"sendMessage Gemini response preview:\", aiMessage.slice(0, 200));\n                const assistant = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                    data: {\n                        sessionId,\n                        role: \"assistant\",\n                        content: aiMessage\n                    }\n                });\n                return {\n                    sessionId,\n                    user: createdUserMessage,\n                    assistant\n                };\n            } else {\n                const apiKey = process.env.OPENAI_API_KEY;\n                if (!apiKey) {\n                    throw new Error('No API key configured for OpenAI');\n                }\n                const openai = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                    apiKey: apiKey\n                });\n                const completion = await openai.chat.completions.create({\n                    model: process.env.OPENAI_MODEL || \"gpt-3.5-turbo\",\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        },\n                        ...history.map((m)=>({\n                                role: m.role,\n                                content: m.content\n                            }))\n                    ],\n                    temperature: 0.4\n                });\n                const aiMessage = completion.choices?.[0]?.message?.content?.toString() ?? \"\";\n                console.log(\"sendMessage OpenAI response preview:\", aiMessage.slice(0, 200));\n                const assistant = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                    data: {\n                        sessionId,\n                        role: \"assistant\",\n                        content: aiMessage\n                    }\n                });\n                return {\n                    sessionId,\n                    user: createdUserMessage,\n                    assistant\n                };\n            }\n        } catch (error) {\n            console.error(\"sendMessage OpenAI error:\", error);\n            const isQuota = error?.code === \"insufficient_quota\" || error?.status === 429;\n            const contentForUser = isQuota ? \"The AI service quota was exceeded. Please check billing or try again later.\" : \"Sorry, I couldn\\'t generate a response right now. Please try again in a moment.\";\n            const assistant = await _db__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                data: {\n                    sessionId,\n                    role: \"assistant\",\n                    content: contentForUser\n                }\n            });\n            return {\n                sessionId,\n                user: createdUserMessage,\n                assistant\n            };\n        }\n    })\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL3JvdXRlcnMvY2hhdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0I7QUFDaUI7QUFDUztBQUNuQjtBQUNIO0FBRXJCLE1BQU1NLGFBQWFILDZDQUFNQSxDQUFDO0lBQy9CSSxjQUFjTCxrREFBZUEsQ0FDMUJNLEtBQUssQ0FBQ1IsdUNBQVEsQ0FBQztRQUFFVSxRQUFRVix1Q0FBUSxHQUFHWSxPQUFPO1FBQUlDLE9BQU9iLHVDQUFRLEdBQUdlLEdBQUcsQ0FBQyxHQUFHQyxHQUFHLENBQUMsSUFBSUMsT0FBTyxDQUFDO0lBQUksR0FBR0EsT0FBTyxDQUFDO1FBQUVKLE9BQU87SUFBRyxJQUNuSEssS0FBSyxDQUFDLE9BQU8sRUFBRVYsS0FBSyxFQUFFO1FBQ3JCLE1BQU1LLFFBQVFMLE1BQU1LLEtBQUssSUFBSTtRQUM3QixNQUFNTSxXQUFXLE1BQU1mLHVDQUFNQSxDQUFDZ0IsV0FBVyxDQUFDQyxRQUFRLENBQUM7WUFDakRDLFNBQVM7Z0JBQUVDLFdBQVc7WUFBTztZQUM3QkMsTUFBTVgsUUFBUTtZQUNkSCxRQUFRRixNQUFNRSxNQUFNLEdBQUc7Z0JBQUVlLElBQUlqQixNQUFNRSxNQUFNO1lBQUMsSUFBSWdCO1lBQzlDQyxRQUFRO2dCQUFFRixJQUFJO2dCQUFNRyxPQUFPO2dCQUFNTCxXQUFXO2dCQUFNTSxXQUFXO1lBQUs7UUFDcEU7UUFDQSxJQUFJQyxhQUFpQ0o7UUFDckMsSUFBSVAsU0FBU1ksTUFBTSxHQUFHbEIsT0FBTztZQUMzQixNQUFNbUIsT0FBT2IsU0FBU2MsR0FBRztZQUN6QkgsYUFBYUUsTUFBTVA7UUFDckI7UUFDQSxPQUFPO1lBQUVTLE9BQU9mO1lBQVVXO1FBQVc7SUFDdkM7SUFFRkssZUFBZWpDLGtEQUFlQSxDQUMzQk0sS0FBSyxDQUFDUix1Q0FBUSxDQUFDO1FBQUU0QixPQUFPNUIsdUNBQVEsR0FBR2UsR0FBRyxDQUFDO0lBQUcsR0FBR0gsT0FBTyxJQUNwRHdCLFFBQVEsQ0FBQyxPQUFPLEVBQUU1QixLQUFLLEVBQUU7UUFDeEIsTUFBTW9CLFFBQVFwQixPQUFPb0IsU0FBUztRQUM5QixNQUFNUyxVQUFVLE1BQU1qQyx1Q0FBTUEsQ0FBQ2dCLFdBQVcsQ0FBQ2tCLE1BQU0sQ0FBQztZQUFFQyxNQUFNO2dCQUFFWDtZQUFNO1FBQUU7UUFDbEUsT0FBT1M7SUFDVDtJQUVGRyxlQUFldEMsa0RBQWVBLENBQzNCTSxLQUFLLENBQUNSLHVDQUFRLENBQUM7UUFBRXlDLFdBQVd6Qyx1Q0FBUTtJQUFHLElBQ3ZDb0MsUUFBUSxDQUFDLE9BQU8sRUFBRTVCLEtBQUssRUFBRTtRQUN4QiwyREFBMkQ7UUFDM0QsTUFBTUosdUNBQU1BLENBQUNnQixXQUFXLENBQUNzQixNQUFNLENBQUM7WUFDOUJDLE9BQU87Z0JBQUVsQixJQUFJakIsTUFBTWlDLFNBQVM7WUFBQztRQUMvQjtRQUNBLE9BQU87WUFBRUcsU0FBUztRQUFLO0lBQ3pCO0lBRUZDLGFBQWEzQyxrREFBZUEsQ0FDekJNLEtBQUssQ0FBQ1IsdUNBQVEsQ0FBQztRQUNkeUMsV0FBV3pDLHVDQUFRO1FBQ25CVSxRQUFRVix1Q0FBUSxHQUFHWSxPQUFPO1FBQzFCQyxPQUFPYix1Q0FBUSxHQUFHZSxHQUFHLENBQUMsR0FBR0MsR0FBRyxDQUFDLEtBQUtDLE9BQU8sQ0FBQztJQUM1QyxJQUNDQyxLQUFLLENBQUMsT0FBTyxFQUFFVixLQUFLLEVBQUU7UUFDckIsTUFBTSxFQUFFaUMsU0FBUyxFQUFFL0IsTUFBTSxFQUFFRyxLQUFLLEVBQUUsR0FBR0w7UUFFckMsd0JBQXdCO1FBQ3hCLE1BQU02QixVQUFVLE1BQU1qQyx1Q0FBTUEsQ0FBQ2dCLFdBQVcsQ0FBQzBCLFVBQVUsQ0FBQztZQUNsREgsT0FBTztnQkFBRWxCLElBQUlnQjtZQUFVO1lBQ3ZCZCxRQUFRO2dCQUFFRixJQUFJO1lBQUs7UUFDckI7UUFFQSxJQUFJLENBQUNZLFNBQVM7WUFDWixNQUFNLElBQUlwQyxtREFBU0EsQ0FBQztnQkFDbEI4QyxNQUFNO2dCQUNOQyxTQUFTO1lBQ1g7UUFDRjtRQUVBLGlCQUFpQjtRQUNqQixNQUFNQyxXQUFXLE1BQU03Qyx1Q0FBTUEsQ0FBQzRDLE9BQU8sQ0FBQzNCLFFBQVEsQ0FBQztZQUM3Q3NCLE9BQU87Z0JBQUVGO1lBQVU7WUFDbkJuQixTQUFTO2dCQUFFQyxXQUFXO1lBQU07WUFDNUJDLE1BQU1YLFFBQVE7WUFDZEgsUUFBUUEsU0FBUztnQkFBRWUsSUFBSWY7WUFBTyxJQUFJZ0I7UUFDcEM7UUFFQSxtQ0FBbUM7UUFDbkMsTUFBTXdCLGNBQWNDLE1BQU1DLE9BQU8sQ0FBQ0gsWUFBWUEsV0FBVyxFQUFFO1FBRTNELElBQUluQixhQUFpQ0o7UUFDckMsSUFBSXdCLFlBQVluQixNQUFNLEdBQUdsQixPQUFPO1lBQzlCLE1BQU13QyxXQUFXSCxZQUFZakIsR0FBRztZQUNoQ0gsYUFBYXVCLFVBQVU1QjtRQUN6QjtRQUVBLGlEQUFpRDtRQUNqRCxPQUFPeUI7SUFDVDtJQUVGSSxhQUFhcEQsa0RBQ1gsc0VBQXNFO0tBQ3JFTSxLQUFLLENBQUNSLG9DQUFLLElBQ1hvQyxRQUFRLENBQUMsT0FBTyxFQUFFNUIsS0FBSyxFQUFFO1FBQ3hCZ0QsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQmpEO1FBQ3RDLElBQUlpQztRQUNKLElBQUlpQjtRQUVKLGtFQUFrRTtRQUNsRSxNQUFNQyx5QkFBeUIsQ0FBQ0M7WUFDOUIsSUFBSVQsTUFBTUMsT0FBTyxDQUFDUSxNQUFNLE9BQU9BLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLElBQUlBLE9BQU8sT0FBT0EsUUFBUSxVQUFVO2dCQUNsQyxNQUFNQyxNQUFNRDtnQkFDWixJQUFJLFdBQVdDLEtBQUssT0FBTyxJQUFhckQsS0FBSztnQkFDN0MsSUFBSSxVQUFVcUQsS0FBSyxPQUFPLElBQWFDLElBQUk7Z0JBQzNDLElBQUksT0FBT0QsS0FBSyxPQUFPLEdBQVksQ0FBQyxJQUFJLEVBQUUsd0NBQXdDO1lBQ3BGO1lBQ0EsT0FBT0Q7UUFDVDtRQUVBLE1BQU1HLGFBQWFKLHVCQUF1Qm5EO1FBRTFDLElBQUksT0FBT3VELGVBQWUsVUFBVTtZQUNsQyxJQUFJO2dCQUNGLE1BQU1DLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ0g7Z0JBQzFCdEIsWUFBWXVCLFFBQVF2QjtnQkFDcEJpQixVQUFVTSxRQUFRTjtZQUNwQixFQUFFLE9BQU07WUFDTiwwQkFBMEI7WUFDNUI7UUFDRixPQUFPLElBQUksT0FBT0ssZUFBZSxZQUFZQSxlQUFlLE1BQU07WUFDaEV0QixZQUFZLFdBQW9CQSxTQUFTO1lBQ3pDaUIsVUFBVSxXQUFvQkEsT0FBTztRQUN2QztRQUVBLHNFQUFzRTtRQUN0RSxJQUFJLENBQUNBLFdBQVcsT0FBT0EsWUFBWSxZQUFZLENBQUNBLFFBQVFTLElBQUksSUFBSTtZQUM5RFgsUUFBUVksS0FBSyxDQUFDLHFDQUFxQztnQkFBRTNCO2dCQUFXaUI7Z0JBQVNsRDtZQUFNO1lBQy9FLE1BQU0sSUFBSVAsbURBQVNBLENBQUM7Z0JBQUU4QyxNQUFNO2dCQUFlQyxTQUFTO1lBQWdDO1FBQ3RGO1FBRUEsSUFBSSxDQUFDUCxhQUFhLE9BQU9BLGNBQWMsVUFBVTtZQUMvQyxNQUFNNEIsZUFBZVgsUUFBUTNCLE1BQU0sR0FBRyxLQUFLMkIsUUFBUVksS0FBSyxDQUFDLEdBQUcsTUFBTSxNQUFNWjtZQUN4RSxNQUFNYSxpQkFBaUIsTUFBTW5FLHVDQUFNQSxDQUFDZ0IsV0FBVyxDQUFDa0IsTUFBTSxDQUFDO2dCQUNyREMsTUFBTTtvQkFBRVgsT0FBT3lDLGdCQUFnQjtnQkFBYztZQUMvQztZQUNBNUIsWUFBWThCLGVBQWU5QyxFQUFFO1FBQy9CO1FBQ0EsTUFBTStDLHFCQUFxQixNQUFNcEUsdUNBQU1BLENBQUM0QyxPQUFPLENBQUNWLE1BQU0sQ0FBQztZQUNyREMsTUFBTTtnQkFBRUU7Z0JBQVdnQyxNQUFNO2dCQUFRZjtZQUFRO1FBQzNDO1FBRUEsTUFBTWdCLFVBQVUsTUFBTXRFLHVDQUFNQSxDQUFDNEMsT0FBTyxDQUFDM0IsUUFBUSxDQUFDO1lBQzVDc0IsT0FBTztnQkFBRUY7WUFBVTtZQUNuQm5CLFNBQVM7Z0JBQUVDLFdBQVc7WUFBTTtZQUM1QkksUUFBUTtnQkFBRThDLE1BQU07Z0JBQU1mLFNBQVM7WUFBSztRQUN0QztRQUVBLHlDQUF5QztRQUN6QyxNQUFNaUIsVUFBVSxrQkFBa0JDLElBQUksQ0FBQ2xCO1FBQ3ZDLE1BQU1tQixlQUFlRixVQUNqQiwwTEFDQTtRQUVKLHdGQUF3RjtRQUN4RixNQUFNRyxlQUFlLE9BQU9DLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYyxLQUFLLFlBQVlGLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYyxDQUFDZCxJQUFJLEdBQUdwQyxNQUFNLEdBQUc7UUFDbEgsTUFBTW1ELFlBQVksQ0FBQ0gsUUFBUUMsR0FBRyxDQUFDRyxjQUFjLElBQUlKLFFBQVFDLEdBQUcsQ0FBQ0ksY0FBYyxJQUFJLEVBQUMsRUFBR2pCLElBQUk7UUFDdkYsTUFBTWtCLFlBQVlOLFFBQVFDLEdBQUcsQ0FBQ00sZUFBZSxLQUFLO1FBQ2xEOUIsUUFBUUMsR0FBRyxDQUNULDBCQUNBO1lBQUU4QixRQUFRVDtZQUFjVSxRQUFRLENBQUMsQ0FBQ047WUFBV0c7UUFBVTtRQUV6RCxJQUFJQSxhQUFjLENBQUNQLGdCQUFnQixDQUFDSSxXQUFZO1lBQzlDLE1BQU1PLFdBQVdmLFFBQVFnQixNQUFNLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRWxCLElBQUksS0FBSyxRQUFRSCxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFWixXQUFXQTtZQUNuRixNQUFNa0MsT0FBT2pCLFVBQ1QsQ0FBQywrQ0FBK0MsRUFBRWMsU0FBUyx3S0FBd0ssQ0FBQyxHQUNwTyxDQUFDLGdEQUFnRCxFQUFFQSxTQUFTLDBKQUEwSixDQUFDO1lBQzNOLE1BQU1JLFlBQVksTUFBTXpGLHVDQUFNQSxDQUFDNEMsT0FBTyxDQUFDVixNQUFNLENBQUM7Z0JBQzVDQyxNQUFNO29CQUFFRTtvQkFBV2dDLE1BQU07b0JBQWFmLFNBQVNrQztnQkFBSztZQUN0RDtZQUNBLE9BQU87Z0JBQUVuRDtnQkFBV3FELE1BQU10QjtnQkFBb0JxQjtZQUFVO1FBQzFEO1FBRUEsSUFBSTtZQUNGLG9EQUFvRDtZQUNwRCxJQUFJWCxXQUFXO2dCQUNiLE1BQU1hLGNBQWNoQixRQUFRQyxHQUFHLENBQUNnQixZQUFZLElBQUk7Z0JBQ2hELE1BQU1DLE1BQU0sQ0FBQyxvREFBb0QsRUFBRUYsWUFBWSxxQkFBcUIsRUFBRUcsbUJBQW1CaEIsWUFBWTtnQkFFckksNENBQTRDO2dCQUM1QyxNQUFNaUIsaUJBQWlCO29CQUNyQjt3QkFBRTFCLE1BQU07d0JBQVEyQixPQUFPOzRCQUFDO2dDQUFFQyxNQUFNeEI7NEJBQWE7eUJBQUU7b0JBQUM7dUJBQzdDSCxRQUFRNEIsR0FBRyxDQUFDLENBQUNYLElBQU87NEJBQ3JCbEIsTUFBTWtCLEVBQUVsQixJQUFJLEtBQUssY0FBYyxVQUFVOzRCQUN6QzJCLE9BQU87Z0NBQUM7b0NBQUVDLE1BQU1WLEVBQUVqQyxPQUFPO2dDQUFDOzZCQUFFO3dCQUM5QjtpQkFDRDtnQkFFRCxNQUFNNkMsWUFBWSxNQUFNQyxNQUFNUCxLQUFLO29CQUNqQ1EsUUFBUTtvQkFDUkMsU0FBUzt3QkFBRSxnQkFBZ0I7b0JBQW1CO29CQUM5Q0MsTUFBTTFDLEtBQUsyQyxTQUFTLENBQUM7d0JBQUVDLFVBQVVWO3dCQUFnQlcsa0JBQWtCOzRCQUFFQyxhQUFhO3dCQUFJO29CQUFFO2dCQUMxRjtnQkFFQSxJQUFJLENBQUNSLFVBQVVTLEVBQUUsRUFBRTtvQkFDakIsTUFBTUMsVUFBVSxNQUFNVixVQUFVRixJQUFJO29CQUNwQyxNQUFNLElBQUlhLE1BQU0sQ0FBQyxhQUFhLEVBQUVYLFVBQVVZLE1BQU0sQ0FBQyxFQUFFLEVBQUVGLFNBQVM7Z0JBQ2hFO2dCQUVBLE1BQU1HLGFBQWtCLE1BQU1iLFVBQVV6QyxJQUFJO2dCQUM1QyxNQUFNc0MsUUFBUWdCLFlBQVlDLFlBQVksQ0FBQyxFQUFFLEVBQUUzRCxTQUFTMEMsU0FBUyxFQUFFO2dCQUMvRCxNQUFNa0IsWUFBWWxCLE1BQU1FLEdBQUcsQ0FBQyxDQUFDaUIsSUFBV0EsR0FBR2xCLE1BQU1YLE1BQU0sQ0FBQzhCLFNBQVNDLElBQUksQ0FBQztnQkFDdEVqRSxRQUFRQyxHQUFHLENBQUMsd0NBQXdDNkQsVUFBVWhELEtBQUssQ0FBQyxHQUFHO2dCQUN2RSxNQUFNdUIsWUFBWSxNQUFNekYsdUNBQU1BLENBQUM0QyxPQUFPLENBQUNWLE1BQU0sQ0FBQztvQkFDNUNDLE1BQU07d0JBQUVFO3dCQUFXZ0MsTUFBTTt3QkFBYWYsU0FBUzREO29CQUFVO2dCQUMzRDtnQkFDQSxPQUFPO29CQUFFN0U7b0JBQVdxRCxNQUFNdEI7b0JBQW9CcUI7Z0JBQVU7WUFDMUQsT0FBTztnQkFDTCxNQUFNNkIsU0FBUzNDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztnQkFDekMsSUFBSSxDQUFDeUMsUUFBUTtvQkFDWCxNQUFNLElBQUlSLE1BQU07Z0JBQ2xCO2dCQUVBLE1BQU0zQixTQUFTLElBQUlsRiw4Q0FBTUEsQ0FBQztvQkFDeEJxSCxRQUFRQTtnQkFDVjtnQkFFQSxNQUFNQyxhQUFhLE1BQU1wQyxPQUFPcUMsSUFBSSxDQUFDQyxXQUFXLENBQUN2RixNQUFNLENBQUM7b0JBQ3REd0YsT0FBTy9DLFFBQVFDLEdBQUcsQ0FBQytDLFlBQVksSUFBSTtvQkFDbkM5RSxVQUFVO3dCQUNSOzRCQUFFd0IsTUFBTTs0QkFBVWYsU0FBU21CO3dCQUFhOzJCQUNyQ0gsUUFBUTRCLEdBQUcsQ0FBQyxDQUFDWCxJQUFPO2dDQUNyQmxCLE1BQU1rQixFQUFFbEIsSUFBSTtnQ0FDWmYsU0FBU2lDLEVBQUVqQyxPQUFPOzRCQUNwQjtxQkFDRDtvQkFDRHFELGFBQWE7Z0JBQ2Y7Z0JBRUEsTUFBTU8sWUFBWUssV0FBV0ssT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFaEYsU0FBU1UsU0FBU3VFLGNBQWM7Z0JBQzNFekUsUUFBUUMsR0FBRyxDQUFDLHdDQUF3QzZELFVBQVVoRCxLQUFLLENBQUMsR0FBRztnQkFDdkUsTUFBTXVCLFlBQVksTUFBTXpGLHVDQUFNQSxDQUFDNEMsT0FBTyxDQUFDVixNQUFNLENBQUM7b0JBQzVDQyxNQUFNO3dCQUFFRTt3QkFBV2dDLE1BQU07d0JBQWFmLFNBQVM0RDtvQkFBVTtnQkFDM0Q7Z0JBQ0EsT0FBTztvQkFBRTdFO29CQUFXcUQsTUFBTXRCO29CQUFvQnFCO2dCQUFVO1lBQzFEO1FBQ0YsRUFBRSxPQUFPekIsT0FBWTtZQUNuQlosUUFBUVksS0FBSyxDQUFDLDZCQUE2QkE7WUFDM0MsTUFBTThELFVBQVU5RCxPQUFPckIsU0FBUyx3QkFBd0JxQixPQUFPK0MsV0FBVztZQUMxRSxNQUFNZ0IsaUJBQWlCRCxVQUNuQixnRkFDQTtZQUNKLE1BQU1yQyxZQUFZLE1BQU16Rix1Q0FBTUEsQ0FBQzRDLE9BQU8sQ0FBQ1YsTUFBTSxDQUFDO2dCQUM1Q0MsTUFBTTtvQkFBRUU7b0JBQVdnQyxNQUFNO29CQUFhZixTQUFTeUU7Z0JBQWU7WUFDaEU7WUFDQSxPQUFPO2dCQUFFMUY7Z0JBQVdxRCxNQUFNdEI7Z0JBQW9CcUI7WUFBVTtRQUMxRDtJQUNGO0FBQ0osR0FBRyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBbnVyYWcgU2luZ2ggVGhha3VyXFxDYXNjYWRlUHJvamVjdHNcXE9yYXRpb25CT1RcXHNyY1xcc2VydmVyXFxyb3V0ZXJzXFxjaGF0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBUUlBDRXJyb3IgfSBmcm9tIFwiQHRycGMvc2VydmVyXCI7XG5pbXBvcnQgeyBwdWJsaWNQcm9jZWR1cmUsIHJvdXRlciB9IGZyb20gXCIuLi90cnBjXCI7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiLi4vZGJcIjtcbmltcG9ydCBPcGVuQUkgZnJvbSBcIm9wZW5haVwiO1xuXG5leHBvcnQgY29uc3QgY2hhdFJvdXRlciA9IHJvdXRlcih7XG4gIGxpc3RTZXNzaW9uczogcHVibGljUHJvY2VkdXJlXG4gICAgLmlucHV0KHoub2JqZWN0KHsgY3Vyc29yOiB6LnN0cmluZygpLm51bGxpc2goKSwgbGltaXQ6IHoubnVtYmVyKCkubWluKDEpLm1heCg1MCkuZGVmYXVsdCgyMCkgfSkuZGVmYXVsdCh7IGxpbWl0OiAyMCB9KSlcbiAgICAucXVlcnkoYXN5bmMgKHsgaW5wdXQgfSkgPT4ge1xuICAgICAgY29uc3QgbGltaXQgPSBpbnB1dC5saW1pdCA/PyAyMDtcbiAgICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgcHJpc21hLmNoYXRTZXNzaW9uLmZpbmRNYW55KHtcbiAgICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6IFwiZGVzY1wiIH0sXG4gICAgICAgIHRha2U6IGxpbWl0ICsgMSxcbiAgICAgICAgY3Vyc29yOiBpbnB1dC5jdXJzb3IgPyB7IGlkOiBpbnB1dC5jdXJzb3IgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCB0aXRsZTogdHJ1ZSwgY3JlYXRlZEF0OiB0cnVlLCB1cGRhdGVkQXQ6IHRydWUgfSxcbiAgICAgIH0pO1xuICAgICAgbGV0IG5leHRDdXJzb3I6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChzZXNzaW9ucy5sZW5ndGggPiBsaW1pdCkge1xuICAgICAgICBjb25zdCBuZXh0ID0gc2Vzc2lvbnMucG9wKCk7XG4gICAgICAgIG5leHRDdXJzb3IgPSBuZXh0Py5pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGl0ZW1zOiBzZXNzaW9ucywgbmV4dEN1cnNvciB9O1xuICAgIH0pLFxuXG4gIGNyZWF0ZVNlc3Npb246IHB1YmxpY1Byb2NlZHVyZVxuICAgIC5pbnB1dCh6Lm9iamVjdCh7IHRpdGxlOiB6LnN0cmluZygpLm1pbigxKSB9KS5udWxsaXNoKCkpXG4gICAgLm11dGF0aW9uKGFzeW5jICh7IGlucHV0IH0pID0+IHtcbiAgICAgIGNvbnN0IHRpdGxlID0gaW5wdXQ/LnRpdGxlID8/IFwiTmV3IHNlc3Npb25cIjtcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBwcmlzbWEuY2hhdFNlc3Npb24uY3JlYXRlKHsgZGF0YTogeyB0aXRsZSB9IH0pO1xuICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfSksXG5cbiAgZGVsZXRlU2Vzc2lvbjogcHVibGljUHJvY2VkdXJlXG4gICAgLmlucHV0KHoub2JqZWN0KHsgc2Vzc2lvbklkOiB6LnN0cmluZygpIH0pKVxuICAgIC5tdXRhdGlvbihhc3luYyAoeyBpbnB1dCB9KSA9PiB7XG4gICAgICAvLyBEZWxldGUgdGhlIHNlc3Npb24gYW5kIGFsbCBpdHMgbWVzc2FnZXMgKGNhc2NhZGUgZGVsZXRlKVxuICAgICAgYXdhaXQgcHJpc21hLmNoYXRTZXNzaW9uLmRlbGV0ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiBpbnB1dC5zZXNzaW9uSWQgfSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0pLFxuXG4gIGdldE1lc3NhZ2VzOiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoei5vYmplY3QoeyBcbiAgICAgIHNlc3Npb25JZDogei5zdHJpbmcoKSxcbiAgICAgIGN1cnNvcjogei5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICBsaW1pdDogei5udW1iZXIoKS5taW4oMSkubWF4KDEwMCkuZGVmYXVsdCg1MCkgXG4gICAgfSkpXG4gICAgLnF1ZXJ5KGFzeW5jICh7IGlucHV0IH0pID0+IHtcbiAgICAgIGNvbnN0IHsgc2Vzc2lvbklkLCBjdXJzb3IsIGxpbWl0IH0gPSBpbnB1dDtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHNlc3Npb24gZXhpc3RzXG4gICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgcHJpc21hLmNoYXRTZXNzaW9uLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogc2Vzc2lvbklkIH0sXG4gICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgIGNvZGU6ICdOT1RfRk9VTkQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdTZXNzaW9uIG5vdCBmb3VuZCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBGZXRjaCBtZXNzYWdlc1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBwcmlzbWEubWVzc2FnZS5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IHNlc3Npb25JZCB9LFxuICAgICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2FzYycgfSxcbiAgICAgICAgdGFrZTogbGltaXQgKyAxLCAvLyBUYWtlIG9uZSBleHRyYSB0byBkZXRlcm1pbmUgaWYgdGhlcmUgYXJlIG1vcmVcbiAgICAgICAgY3Vyc29yOiBjdXJzb3IgPyB7IGlkOiBjdXJzb3IgfSA6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIHJldHVybiBhbiBhcnJheVxuICAgICAgY29uc3QgbWVzc2FnZUxpc3QgPSBBcnJheS5pc0FycmF5KG1lc3NhZ2VzKSA/IG1lc3NhZ2VzIDogW107XG4gICAgICBcbiAgICAgIGxldCBuZXh0Q3Vyc29yOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAobWVzc2FnZUxpc3QubGVuZ3RoID4gbGltaXQpIHtcbiAgICAgICAgY29uc3QgbmV4dEl0ZW0gPSBtZXNzYWdlTGlzdC5wb3AoKTtcbiAgICAgICAgbmV4dEN1cnNvciA9IG5leHRJdGVtPy5pZDtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHRoZSBhcnJheSBkaXJlY3RseSBpbnN0ZWFkIG9mIGFuIG9iamVjdFxuICAgICAgcmV0dXJuIG1lc3NhZ2VMaXN0O1xuICAgIH0pLFxuXG4gIHNlbmRNZXNzYWdlOiBwdWJsaWNQcm9jZWR1cmVcbiAgICAvLyBBY2NlcHQgbG9vc2VseSB0byB3b3JrIGFyb3VuZCBhbnkgY2xpZW50L2JhdGNoIHNlcmlhbGl6YXRpb24gcXVpcmtzXG4gICAgLmlucHV0KHouYW55KCkpXG4gICAgLm11dGF0aW9uKGFzeW5jICh7IGlucHV0IH0pID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwic2VuZE1lc3NhZ2UgcmF3IGlucHV0OlwiLCBpbnB1dCk7XG4gICAgICBsZXQgc2Vzc2lvbklkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICBsZXQgY29udGVudDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgICAvLyBOb3JtYWxpemUgdmFyaW91cyBwb3NzaWJsZSBzaGFwZXMgZHVlIHRvIGJhdGNoaW5nL3NlcmlhbGl6YXRpb25cbiAgICAgIGNvbnN0IHVud3JhcFBvc3NpYmxlV3JhcHBlcnMgPSAodmFsOiB1bmtub3duKTogdW5rbm93biA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiB2YWxbMF07XG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGNvbnN0IG9iaiA9IHZhbCBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICAgICAgICBpZiAoXCJpbnB1dFwiIGluIG9iaikgcmV0dXJuIChvYmogYXMgYW55KS5pbnB1dDtcbiAgICAgICAgICBpZiAoXCJqc29uXCIgaW4gb2JqKSByZXR1cm4gKG9iaiBhcyBhbnkpLmpzb247XG4gICAgICAgICAgaWYgKFwiMFwiIGluIG9iaikgcmV0dXJuIChvYmogYXMgYW55KVtcIjBcIl07IC8vIHNvbWUgY2xpZW50cyBzZW5kIGluZGV4IGtleXMgaW4gYmF0Y2hcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IHVud3JhcFBvc3NpYmxlV3JhcHBlcnMoaW5wdXQpO1xuXG4gICAgICBpZiAodHlwZW9mIG5vcm1hbGl6ZWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKG5vcm1hbGl6ZWQpO1xuICAgICAgICAgIHNlc3Npb25JZCA9IHBhcnNlZD8uc2Vzc2lvbklkO1xuICAgICAgICAgIGNvbnRlbnQgPSBwYXJzZWQ/LmNvbnRlbnQ7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIC8vIGlnbm9yZSBhbmQgZmFsbCB0aHJvdWdoXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vcm1hbGl6ZWQgPT09IFwib2JqZWN0XCIgJiYgbm9ybWFsaXplZCAhPT0gbnVsbCkge1xuICAgICAgICBzZXNzaW9uSWQgPSAobm9ybWFsaXplZCBhcyBhbnkpLnNlc3Npb25JZDtcbiAgICAgICAgY29udGVudCA9IChub3JtYWxpemVkIGFzIGFueSkuY29udGVudDtcbiAgICAgIH1cblxuICAgICAgLy8gUmVxdWlyZSBjb250ZW50LCBidXQgaWYgc2Vzc2lvbklkIGlzIG1pc3NpbmcsIGF1dG8tY3JlYXRlIGEgc2Vzc2lvblxuICAgICAgaWYgKCFjb250ZW50IHx8IHR5cGVvZiBjb250ZW50ICE9PSBcInN0cmluZ1wiIHx8ICFjb250ZW50LnRyaW0oKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwic2VuZE1lc3NhZ2UgaW52YWxpZCBpbnB1dCBwYXJzZWQ6XCIsIHsgc2Vzc2lvbklkLCBjb250ZW50LCBpbnB1dCB9KTtcbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7IGNvZGU6IFwiQkFEX1JFUVVFU1RcIiwgbWVzc2FnZTogXCJJbnZhbGlkIGlucHV0IGZvciBzZW5kTWVzc2FnZVwiIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNlc3Npb25JZCB8fCB0eXBlb2Ygc2Vzc2lvbklkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IGRlcml2ZWRUaXRsZSA9IGNvbnRlbnQubGVuZ3RoID4gNDggPyBjb250ZW50LnNsaWNlKDAsIDQ4KSArIFwi4oCmXCIgOiBjb250ZW50O1xuICAgICAgICBjb25zdCBjcmVhdGVkU2Vzc2lvbiA9IGF3YWl0IHByaXNtYS5jaGF0U2Vzc2lvbi5jcmVhdGUoe1xuICAgICAgICAgIGRhdGE6IHsgdGl0bGU6IGRlcml2ZWRUaXRsZSB8fCBcIk5ldyBzZXNzaW9uXCIgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHNlc3Npb25JZCA9IGNyZWF0ZWRTZXNzaW9uLmlkO1xuICAgICAgfVxuICAgICAgY29uc3QgY3JlYXRlZFVzZXJNZXNzYWdlID0gYXdhaXQgcHJpc21hLm1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgICAgZGF0YTogeyBzZXNzaW9uSWQsIHJvbGU6IFwidXNlclwiLCBjb250ZW50IH0sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaGlzdG9yeSA9IGF3YWl0IHByaXNtYS5tZXNzYWdlLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHsgc2Vzc2lvbklkIH0sXG4gICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiBcImFzY1wiIH0sXG4gICAgICAgIHNlbGVjdDogeyByb2xlOiB0cnVlLCBjb250ZW50OiB0cnVlIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gRGV0ZWN0IGlmIHRoZSB1c2VyIGlzIHdyaXRpbmcgaW4gSGluZGlcbiAgICAgIGNvbnN0IGlzSGluZGkgPSAvW1xcdTA5MDAtXFx1MDk3Rl0vLnRlc3QoY29udGVudCk7XG4gICAgICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBpc0hpbmRpIFxuICAgICAgICA/IFwi4KSG4KSqIOCkj+CklSDgpLjgpLngpL7gpK/gpJUsIOCkquClh+CktuClh+CkteCksCDgpJXgpLDgpL/gpK/gpLAg4KSV4KS+4KSJ4KSC4KS44KSy4KSwIOCkueCliOCkguClpCDgpLjgpILgpLDgpJrgpL/gpKQsIOCkleCkvuCksOCljeCkryDgpK/gpYvgpJfgpY3gpK8g4KS44KSy4KS+4KS5IOCkpuClh+CkguClpCDgpIngpKrgpK/gpYvgpJfgpJXgpLDgpY3gpKTgpL4g4KSV4KWHIOCkuOCkguCkpuClh+CktiDgpJXgpYsg4KSm4KWL4KS54KSw4KS+4KSP4KSCIOCkr+CkviDgpKrgpYHgpKjgpIMg4KS14KWN4KSv4KS+4KSW4KWN4KSv4KS+IOCkqCDgpJXgpLDgpYfgpII7IOCkleClh+CkteCksiDgpKjgpIgg4KSu4KS+4KSw4KWN4KSX4KSm4KSw4KWN4KS24KSoIOCkleClhyDgpLjgpL7gpKUg4KSJ4KSk4KWN4KSk4KSwIOCkpuClh+CkguClpCDgpLngpL/gpILgpKbgpYAg4KSu4KWH4KSCIOCkrOCkvuCkpCDgpJXgpLDgpYfgpILgpaRcIlxuICAgICAgICA6IFwiWW91IGFyZSBhIGhlbHBmdWwsIHByb2Zlc3Npb25hbCBjYXJlZXIgY291bnNlbGxvci4gUHJvdmlkZSBzdHJ1Y3R1cmVkLCBhY3Rpb25hYmxlIGFkdmljZS4gRG8gbm90IHJlcGVhdCBvciByZXBocmFzZSB0aGUgdXNlcidzIG1lc3NhZ2U7IHJlc3BvbmQgd2l0aCBuZXcgZ3VpZGFuY2Ugb25seS4gSWYgdGhlIHVzZXIgd3JpdGVzIGluIEhpbmRpLCByZXNwb25kIGluIEhpbmRpLiBJZiB0aGV5IHdyaXRlIGluIEVuZ2xpc2gsIHJlc3BvbmQgaW4gRW5nbGlzaC5cIjtcblxuICAgICAgLy8gSWYgZm9yY2VkIG1vY2sgb3Igbm8gcHJvdmlkZXIga2V5LCByZXR1cm4gYSBsb2NhbCBtb2NrIHJlc3BvbnNlIHNvIHRoZSBVSSBzdGlsbCB3b3Jrc1xuICAgICAgY29uc3QgaGFzT3BlbkFJS2V5ID0gdHlwZW9mIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZID09PSBcInN0cmluZ1wiICYmIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLnRyaW0oKS5sZW5ndGggPiAwO1xuICAgICAgY29uc3QgZ2VtaW5pS2V5ID0gKHByb2Nlc3MuZW52LkdPT0dMRV9BUElfS0VZIHx8IHByb2Nlc3MuZW52LkdFTUlOSV9BUElfS0VZIHx8IFwiXCIpLnRyaW0oKTtcbiAgICAgIGNvbnN0IGZvcmNlTW9jayA9IHByb2Nlc3MuZW52Lk9QRU5BSV9VU0VfTU9DSyA9PT0gXCJ0cnVlXCI7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgXCJzZW5kTWVzc2FnZSBwcm92aWRlcnM6XCIsXG4gICAgICAgIHsgb3BlbmFpOiBoYXNPcGVuQUlLZXksIGdlbWluaTogISFnZW1pbmlLZXksIGZvcmNlTW9jayB9XG4gICAgICApO1xuICAgICAgaWYgKGZvcmNlTW9jayB8fCAoIWhhc09wZW5BSUtleSAmJiAhZ2VtaW5pS2V5KSkge1xuICAgICAgICBjb25zdCBsYXN0VXNlciA9IGhpc3RvcnkuZmlsdGVyKChtKSA9PiBtLnJvbGUgPT09IFwidXNlclwiKS5zbGljZSgtMSlbMF0/LmNvbnRlbnQgPz8gY29udGVudDtcbiAgICAgICAgY29uc3QgbW9jayA9IGlzSGluZGkgXG4gICAgICAgICAgPyBg4KSu4KWJ4KSVIOCkquCljeCksOCkpOCkv+CkleCljeCksOCkv+Ckr+CkviAoQUkg4KSJ4KSq4KSy4KSs4KWN4KSnIOCkqOCkueClgOCkgingpaQg4KSG4KSq4KSV4KS+IOCkuOCkguCkpuClh+CktjogXCIke2xhc3RVc2VyfVwiXFxuXFxuLSDgpK/gpLkg4KSP4KSVIOCkuOCljeCkpeCkvuCkqOClgOCkryDgpKrgpY3gpLLgpYfgpLjgpLngpYvgpLLgpY3gpKHgpLAg4KS54KWIIOCknOCkrOCkleCkvyBBSSDgpIXgpJXgpY3gpLfgpK4g4KS54KWIIOCkr+CkviDgpJXgpYvgpJ/gpL4g4KS44KSu4KS+4KSq4KWN4KSkIOCkueCliyDgpJfgpK/gpL4g4KS54KWI4KWkXFxuLSDgpLXgpL7gpLjgpY3gpKTgpLXgpL/gpJUg4KSJ4KSk4KWN4KSk4KSwIOCkquCkvuCkqOClhyDgpJXgpYcg4KSy4KS/4KSPIE9QRU5BSV9BUElfS0VZIOCknOCli+CkoeCkvOClh+CkgiDgpK/gpL4g4KSg4KWA4KSVIOCkleCksOClh+CkgiDgpJTgpLAgT1BFTkFJX1VTRV9NT0NLIOCkueCkn+CkvuCkj+CkguClpGBcbiAgICAgICAgICA6IGBNb2NrIHJlc3BvbnNlIChubyBBSSBhdmFpbGFibGUpLiBZb3VyIG1lc3NhZ2U6IFwiJHtsYXN0VXNlcn1cIlxcblxcbi0gVGhpcyBpcyBhIGxvY2FsIHBsYWNlaG9sZGVyIHdoaWxlIEFJIGlzIGRpc2FibGVkIG9yIHF1b3RhIGlzIGV4Y2VlZGVkLlxcbi0gQWRkIG9yIGZpeCBPUEVOQUlfQVBJX0tFWSBhbmQgcmVtb3ZlIE9QRU5BSV9VU0VfTU9DSyB0byBnZXQgcmVhbCBhbnN3ZXJzLmA7XG4gICAgICAgIGNvbnN0IGFzc2lzdGFudCA9IGF3YWl0IHByaXNtYS5tZXNzYWdlLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogeyBzZXNzaW9uSWQsIHJvbGU6IFwiYXNzaXN0YW50XCIsIGNvbnRlbnQ6IG1vY2sgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IHNlc3Npb25JZCwgdXNlcjogY3JlYXRlZFVzZXJNZXNzYWdlLCBhc3Npc3RhbnQgfTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gUHJlZmVyIEdlbWluaSBpZiBjb25maWd1cmVkLCBvdGhlcndpc2UgdXNlIE9wZW5BSVxuICAgICAgICBpZiAoZ2VtaW5pS2V5KSB7XG4gICAgICAgICAgY29uc3QgZ2VtaW5pTW9kZWwgPSBwcm9jZXNzLmVudi5HRU1JTklfTU9ERUwgfHwgXCJnZW1pbmktMS41LWZsYXNoXCI7XG4gICAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxL21vZGVscy8ke2dlbWluaU1vZGVsfTpnZW5lcmF0ZUNvbnRlbnQ/a2V5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGdlbWluaUtleSl9YDtcblxuICAgICAgICAgIC8vIE1hcCBoaXN0b3J5IHRvIEdlbWluaSdzIHJvbGVzOiB1c2VyL21vZGVsXG4gICAgICAgICAgY29uc3QgZ2VtaW5pQ29udGVudHMgPSBbXG4gICAgICAgICAgICB7IHJvbGU6IFwidXNlclwiLCBwYXJ0czogW3sgdGV4dDogc3lzdGVtUHJvbXB0IH1dIH0sXG4gICAgICAgICAgICAuLi5oaXN0b3J5Lm1hcCgobSkgPT4gKHtcbiAgICAgICAgICAgICAgcm9sZTogbS5yb2xlID09PSBcImFzc2lzdGFudFwiID8gXCJtb2RlbFwiIDogXCJ1c2VyXCIsXG4gICAgICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBtLmNvbnRlbnQgfV0sXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIGNvbnN0IGdlbWluaVJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgY29udGVudHM6IGdlbWluaUNvbnRlbnRzLCBnZW5lcmF0aW9uQ29uZmlnOiB7IHRlbXBlcmF0dXJlOiAwLjQgfSB9KSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICghZ2VtaW5pUmVzLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJUZXh0ID0gYXdhaXQgZ2VtaW5pUmVzLnRleHQoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR2VtaW5pIGVycm9yICR7Z2VtaW5pUmVzLnN0YXR1c306ICR7ZXJyVGV4dH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBnZW1pbmlKc29uOiBhbnkgPSBhd2FpdCBnZW1pbmlSZXMuanNvbigpO1xuICAgICAgICAgIGNvbnN0IHBhcnRzID0gZ2VtaW5pSnNvbj8uY2FuZGlkYXRlcz8uWzBdPy5jb250ZW50Py5wYXJ0cyA/PyBbXTtcbiAgICAgICAgICBjb25zdCBhaU1lc3NhZ2UgPSBwYXJ0cy5tYXAoKHA6IGFueSkgPT4gcD8udGV4dCkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzZW5kTWVzc2FnZSBHZW1pbmkgcmVzcG9uc2UgcHJldmlldzpcIiwgYWlNZXNzYWdlLnNsaWNlKDAsIDIwMCkpO1xuICAgICAgICAgIGNvbnN0IGFzc2lzdGFudCA9IGF3YWl0IHByaXNtYS5tZXNzYWdlLmNyZWF0ZSh7XG4gICAgICAgICAgICBkYXRhOiB7IHNlc3Npb25JZCwgcm9sZTogXCJhc3Npc3RhbnRcIiwgY29udGVudDogYWlNZXNzYWdlIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHsgc2Vzc2lvbklkLCB1c2VyOiBjcmVhdGVkVXNlck1lc3NhZ2UsIGFzc2lzdGFudCB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xuICAgICAgICAgIGlmICghYXBpS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIEFQSSBrZXkgY29uZmlndXJlZCBmb3IgT3BlbkFJJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IG9wZW5haSA9IG5ldyBPcGVuQUkoe1xuICAgICAgICAgICAgYXBpS2V5OiBhcGlLZXlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICAgIG1vZGVsOiBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUwgfHwgXCJncHQtMy41LXR1cmJvXCIsXG4gICAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgICB7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQ6IHN5c3RlbVByb21wdCB9LFxuICAgICAgICAgICAgICAuLi5oaXN0b3J5Lm1hcCgobSkgPT4gKHtcbiAgICAgICAgICAgICAgICByb2xlOiBtLnJvbGUgYXMgXCJ1c2VyXCIgfCBcImFzc2lzdGFudFwiIHwgXCJzeXN0ZW1cIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBtLmNvbnRlbnRcbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuNCxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IGFpTWVzc2FnZSA9IGNvbXBsZXRpb24uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50b1N0cmluZygpID8/IFwiXCI7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzZW5kTWVzc2FnZSBPcGVuQUkgcmVzcG9uc2UgcHJldmlldzpcIiwgYWlNZXNzYWdlLnNsaWNlKDAsIDIwMCkpO1xuICAgICAgICAgIGNvbnN0IGFzc2lzdGFudCA9IGF3YWl0IHByaXNtYS5tZXNzYWdlLmNyZWF0ZSh7XG4gICAgICAgICAgICBkYXRhOiB7IHNlc3Npb25JZCwgcm9sZTogXCJhc3Npc3RhbnRcIiwgY29udGVudDogYWlNZXNzYWdlIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHsgc2Vzc2lvbklkLCB1c2VyOiBjcmVhdGVkVXNlck1lc3NhZ2UsIGFzc2lzdGFudCB9O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJzZW5kTWVzc2FnZSBPcGVuQUkgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgY29uc3QgaXNRdW90YSA9IGVycm9yPy5jb2RlID09PSBcImluc3VmZmljaWVudF9xdW90YVwiIHx8IGVycm9yPy5zdGF0dXMgPT09IDQyOTtcbiAgICAgICAgY29uc3QgY29udGVudEZvclVzZXIgPSBpc1F1b3RhXG4gICAgICAgICAgPyBcIlRoZSBBSSBzZXJ2aWNlIHF1b3RhIHdhcyBleGNlZWRlZC4gUGxlYXNlIGNoZWNrIGJpbGxpbmcgb3IgdHJ5IGFnYWluIGxhdGVyLlwiXG4gICAgICAgICAgOiBcIlNvcnJ5LCBJIGNvdWxkblxcJ3QgZ2VuZXJhdGUgYSByZXNwb25zZSByaWdodCBub3cuIFBsZWFzZSB0cnkgYWdhaW4gaW4gYSBtb21lbnQuXCI7XG4gICAgICAgIGNvbnN0IGFzc2lzdGFudCA9IGF3YWl0IHByaXNtYS5tZXNzYWdlLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogeyBzZXNzaW9uSWQsIHJvbGU6IFwiYXNzaXN0YW50XCIsIGNvbnRlbnQ6IGNvbnRlbnRGb3JVc2VyIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBzZXNzaW9uSWQsIHVzZXI6IGNyZWF0ZWRVc2VyTWVzc2FnZSwgYXNzaXN0YW50IH07XG4gICAgICB9XG4gICAgfSksXG59KTtcblxuXG4iXSwibmFtZXMiOlsieiIsIlRSUENFcnJvciIsInB1YmxpY1Byb2NlZHVyZSIsInJvdXRlciIsInByaXNtYSIsIk9wZW5BSSIsImNoYXRSb3V0ZXIiLCJsaXN0U2Vzc2lvbnMiLCJpbnB1dCIsIm9iamVjdCIsImN1cnNvciIsInN0cmluZyIsIm51bGxpc2giLCJsaW1pdCIsIm51bWJlciIsIm1pbiIsIm1heCIsImRlZmF1bHQiLCJxdWVyeSIsInNlc3Npb25zIiwiY2hhdFNlc3Npb24iLCJmaW5kTWFueSIsIm9yZGVyQnkiLCJjcmVhdGVkQXQiLCJ0YWtlIiwiaWQiLCJ1bmRlZmluZWQiLCJzZWxlY3QiLCJ0aXRsZSIsInVwZGF0ZWRBdCIsIm5leHRDdXJzb3IiLCJsZW5ndGgiLCJuZXh0IiwicG9wIiwiaXRlbXMiLCJjcmVhdGVTZXNzaW9uIiwibXV0YXRpb24iLCJzZXNzaW9uIiwiY3JlYXRlIiwiZGF0YSIsImRlbGV0ZVNlc3Npb24iLCJzZXNzaW9uSWQiLCJkZWxldGUiLCJ3aGVyZSIsInN1Y2Nlc3MiLCJnZXRNZXNzYWdlcyIsImZpbmRVbmlxdWUiLCJjb2RlIiwibWVzc2FnZSIsIm1lc3NhZ2VzIiwibWVzc2FnZUxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJuZXh0SXRlbSIsInNlbmRNZXNzYWdlIiwiYW55IiwiY29uc29sZSIsImxvZyIsImNvbnRlbnQiLCJ1bndyYXBQb3NzaWJsZVdyYXBwZXJzIiwidmFsIiwib2JqIiwianNvbiIsIm5vcm1hbGl6ZWQiLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJ0cmltIiwiZXJyb3IiLCJkZXJpdmVkVGl0bGUiLCJzbGljZSIsImNyZWF0ZWRTZXNzaW9uIiwiY3JlYXRlZFVzZXJNZXNzYWdlIiwicm9sZSIsImhpc3RvcnkiLCJpc0hpbmRpIiwidGVzdCIsInN5c3RlbVByb21wdCIsImhhc09wZW5BSUtleSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOQUlfQVBJX0tFWSIsImdlbWluaUtleSIsIkdPT0dMRV9BUElfS0VZIiwiR0VNSU5JX0FQSV9LRVkiLCJmb3JjZU1vY2siLCJPUEVOQUlfVVNFX01PQ0siLCJvcGVuYWkiLCJnZW1pbmkiLCJsYXN0VXNlciIsImZpbHRlciIsIm0iLCJtb2NrIiwiYXNzaXN0YW50IiwidXNlciIsImdlbWluaU1vZGVsIiwiR0VNSU5JX01PREVMIiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2VtaW5pQ29udGVudHMiLCJwYXJ0cyIsInRleHQiLCJtYXAiLCJnZW1pbmlSZXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5Iiwic3RyaW5naWZ5IiwiY29udGVudHMiLCJnZW5lcmF0aW9uQ29uZmlnIiwidGVtcGVyYXR1cmUiLCJvayIsImVyclRleHQiLCJFcnJvciIsInN0YXR1cyIsImdlbWluaUpzb24iLCJjYW5kaWRhdGVzIiwiYWlNZXNzYWdlIiwicCIsIkJvb2xlYW4iLCJqb2luIiwiYXBpS2V5IiwiY29tcGxldGlvbiIsImNoYXQiLCJjb21wbGV0aW9ucyIsIm1vZGVsIiwiT1BFTkFJX01PREVMIiwiY2hvaWNlcyIsInRvU3RyaW5nIiwiaXNRdW90YSIsImNvbnRlbnRGb3JVc2VyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/server/routers/chat.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/routers/index.ts":
/*!*************************************!*\
  !*** ./src/server/routers/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouter: () => (/* binding */ appRouter)\n/* harmony export */ });\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./src/server/trpc.ts\");\n/* harmony import */ var _chat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat */ \"(rsc)/./src/server/routers/chat.ts\");\n\n\nconst appRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    chat: _chat__WEBPACK_IMPORTED_MODULE_1__.chatRouter\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL3JvdXRlcnMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0c7QUFFN0IsTUFBTUUsWUFBWUYsNkNBQU1BLENBQUM7SUFDOUJHLE1BQU1GLDZDQUFVQTtBQUNsQixHQUFHIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFudXJhZyBTaW5naCBUaGFrdXJcXENhc2NhZGVQcm9qZWN0c1xcT3JhdGlvbkJPVFxcc3JjXFxzZXJ2ZXJcXHJvdXRlcnNcXGluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJvdXRlciB9IGZyb20gXCIuLi90cnBjXCI7XHJcbmltcG9ydCB7IGNoYXRSb3V0ZXIgfSBmcm9tIFwiLi9jaGF0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgYXBwUm91dGVyID0gcm91dGVyKHtcclxuICBjaGF0OiBjaGF0Um91dGVyLFxyXG59KTtcclxuXHJcbmV4cG9ydCB0eXBlIEFwcFJvdXRlciA9IHR5cGVvZiBhcHBSb3V0ZXI7XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbInJvdXRlciIsImNoYXRSb3V0ZXIiLCJhcHBSb3V0ZXIiLCJjaGF0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/server/routers/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/trpc.ts":
/*!****************************!*\
  !*** ./src/server/trpc.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicProcedure: () => (/* binding */ publicProcedure),\n/* harmony export */   router: () => (/* binding */ router),\n/* harmony export */   t: () => (/* binding */ t)\n/* harmony export */ });\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/initTRPC-Bt3JfYTm.mjs\");\n/* harmony import */ var superjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superjson */ \"(rsc)/./node_modules/superjson/dist/index.js\");\n\n\nconst t = _trpc_server__WEBPACK_IMPORTED_MODULE_1__.initTRPC.create({\n    transformer: superjson__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n});\nconst router = t.router;\nconst publicProcedure = t.procedure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL3RycGMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0M7QUFDTjtBQUUzQixNQUFNRSxJQUFJRixrREFBUUEsQ0FBQ0csTUFBTSxDQUFDO0lBQy9CQyxhQUFhSCxpREFBU0E7QUFDeEIsR0FBRztBQUVJLE1BQU1JLFNBQVNILEVBQUVHLE1BQU0sQ0FBQztBQUN4QixNQUFNQyxrQkFBa0JKLEVBQUVLLFNBQVMsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBbnVyYWcgU2luZ2ggVGhha3VyXFxDYXNjYWRlUHJvamVjdHNcXE9yYXRpb25CT1RcXHNyY1xcc2VydmVyXFx0cnBjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluaXRUUlBDIH0gZnJvbSBcIkB0cnBjL3NlcnZlclwiO1xyXG5pbXBvcnQgc3VwZXJqc29uIGZyb20gXCJzdXBlcmpzb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCB0ID0gaW5pdFRSUEMuY3JlYXRlKHtcclxuICB0cmFuc2Zvcm1lcjogc3VwZXJqc29uLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCByb3V0ZXIgPSB0LnJvdXRlcjtcclxuZXhwb3J0IGNvbnN0IHB1YmxpY1Byb2NlZHVyZSA9IHQucHJvY2VkdXJlO1xyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJpbml0VFJQQyIsInN1cGVyanNvbiIsInQiLCJjcmVhdGUiLCJ0cmFuc2Zvcm1lciIsInJvdXRlciIsInB1YmxpY1Byb2NlZHVyZSIsInByb2NlZHVyZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/trpc.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:child_process");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:tty":
/*!***************************!*\
  !*** external "node:tty" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tty");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@trpc","vendor-chunks/superjson","vendor-chunks/is-what","vendor-chunks/copy-anything","vendor-chunks/openai","vendor-chunks/formdata-node","vendor-chunks/form-data-encoder","vendor-chunks/zod","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/node-domexception","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAnurag%20Singh%20Thakur%5CCascadeProjects%5COrationBOT&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();